
N32-HYT271.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008318  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080084a8  080084a8  000184a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088c4  080088c4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  080088c4  080088c4  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088c4  080088c4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088c4  080088c4  000188c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088c8  080088c8  000188c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080088cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000264  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000438  20000438  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000eae0  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002516  00000000  00000000  0002ed27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b70  00000000  00000000  00031240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008ce  00000000  00000000  00031db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001bdf8  00000000  00000000  0003267e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011ae8  00000000  00000000  0004e476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009dc40  00000000  00000000  0005ff5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003fb4  00000000  00000000  000fdba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00101b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008490 	.word	0x08008490

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008490 	.word	0x08008490

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <request_measurements>:
 Step 2: Wait for conversion (<100 ms)
 Step 3: Read raw data.
 Step 4: Convert data.
*/

uint8_t request_measurements(I2C_HandleTypeDef *hi2c, uint8_t addr, uint8_t *buff) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	460b      	mov	r3, r1
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	72fb      	strb	r3, [r7, #11]
	// Send Measurement Request (MR)
	// Remember to put in delay to allow for conversion time
		if (HAL_I2C_Master_Transmit(hi2c, addr << 1, buff, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000c76:	7afb      	ldrb	r3, [r7, #11]
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	b299      	uxth	r1, r3
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	2301      	movs	r3, #1
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	f001 f987 	bl	8001f9c <HAL_I2C_Master_Transmit>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <request_measurements+0x30>
			// We should probably go to error handler here
			return 1; // I2C Transmit error
 8000c94:	2301      	movs	r3, #1
 8000c96:	e000      	b.n	8000c9a <request_measurements+0x32>
		} else {
			return 0;
 8000c98:	2300      	movs	r3, #0
		}
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <read_HYT271>:

uint8_t read_HYT271(I2C_HandleTypeDef *hi2c, uint8_t addr, uint8_t *buff){
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b088      	sub	sp, #32
 8000ca6:	af02      	add	r7, sp, #8
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	460b      	mov	r3, r1
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	72fb      	strb	r3, [r7, #11]
	// Read the data from HYT271
	// return 2: 	I2C error.
	// return 1:	Stale data.
	// return 0:	OK, fresh data.
	if (HAL_I2C_Master_Receive(hi2c, addr << 1, buff, 4, HAL_MAX_DELAY) != HAL_OK) {
 8000cb0:	7afb      	ldrb	r3, [r7, #11]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	b299      	uxth	r1, r3
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f001 fa82 	bl	80021cc <HAL_I2C_Master_Receive>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <read_HYT271+0x30>
	   return 2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e00b      	b.n	8000cea <read_HYT271+0x48>
	} else {
		// Check for stale data
		uint8_t status = (*buff & 0xC0) >> 6;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	099b      	lsrs	r3, r3, #6
 8000cd8:	75fb      	strb	r3, [r7, #23]
		if (status & 0x02) {
 8000cda:	7dfb      	ldrb	r3, [r7, #23]
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <read_HYT271+0x46>
			return 1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e000      	b.n	8000cea <read_HYT271+0x48>
		} else {
			return 0;
 8000ce8:	2300      	movs	r3, #0
		}
	}
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	0000      	movs	r0, r0
 8000cf4:	0000      	movs	r0, r0
	...

08000cf8 <convert_data>:

void convert_data(uint8_t *buff, float *data){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
	// Convert raw data to correct units and store in data buffer
	uint16_t hum_raw = ((*buff & 0x3F) << 8) | *(buff + 1);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3301      	adds	r3, #1
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	82fb      	strh	r3, [r7, #22]
	float humidity = hum_raw * (100.0 / 16383.0);
 8000d1e:	8afb      	ldrh	r3, [r7, #22]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fc0f 	bl	8000544 <__aeabi_i2d>
 8000d26:	a31f      	add	r3, pc, #124	; (adr r3, 8000da4 <convert_data+0xac>)
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2c:	f7ff fc74 	bl	8000618 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4610      	mov	r0, r2
 8000d36:	4619      	mov	r1, r3
 8000d38:	f7ff ff46 	bl	8000bc8 <__aeabi_d2f>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	613b      	str	r3, [r7, #16]

	uint16_t temp_raw = ((*(buff + 2) << 8) | (*(buff + 3) & 0xFC)) >> 2;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3302      	adds	r3, #2
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	021a      	lsls	r2, r3, #8
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3303      	adds	r3, #3
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8000d52:	4313      	orrs	r3, r2
 8000d54:	109b      	asrs	r3, r3, #2
 8000d56:	81fb      	strh	r3, [r7, #14]
	float temperature = (temp_raw * 165.0f) / 16383.0f - 40.0f;
 8000d58:	89fb      	ldrh	r3, [r7, #14]
 8000d5a:	ee07 3a90 	vmov	s15, r3
 8000d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d62:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000d98 <convert_data+0xa0>
 8000d66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d6a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000d9c <convert_data+0xa4>
 8000d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d72:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000da0 <convert_data+0xa8>
 8000d76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d7a:	edc7 7a02 	vstr	s15, [r7, #8]

	*data = humidity;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	601a      	str	r2, [r3, #0]
	*(data+1) = temperature;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	3304      	adds	r3, #4
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	f3af 8000 	nop.w
 8000d98:	43250000 	.word	0x43250000
 8000d9c:	467ffc00 	.word	0x467ffc00
 8000da0:	42200000 	.word	0x42200000
 8000da4:	01900640 	.word	0x01900640
 8000da8:	3f790064 	.word	0x3f790064

08000dac <scan_i2c>:

uint8_t scan_i2c(I2C_HandleTypeDef *hi2c, uint8_t * devices) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
	// Scan whole range of i2c addresses to identify devices
	uint8_t identified = 0; // number of identified devices
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 128; i++) {
 8000dba:	2300      	movs	r3, #0
 8000dbc:	73bb      	strb	r3, [r7, #14]
 8000dbe:	e016      	b.n	8000dee <scan_i2c+0x42>
		if (HAL_I2C_IsDeviceReady(hi2c, (uint16_t)(i<<1), 3, 5) == HAL_OK) {
 8000dc0:	7bbb      	ldrb	r3, [r7, #14]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	b299      	uxth	r1, r3
 8000dc8:	2305      	movs	r3, #5
 8000dca:	2203      	movs	r2, #3
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f001 faf3 	bl	80023b8 <HAL_I2C_IsDeviceReady>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d107      	bne.n	8000de8 <scan_i2c+0x3c>
			*(devices + identified) = i;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	4413      	add	r3, r2
 8000dde:	7bba      	ldrb	r2, [r7, #14]
 8000de0:	701a      	strb	r2, [r3, #0]
			identified++;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	3301      	adds	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 128; i++) {
 8000de8:	7bbb      	ldrb	r3, [r7, #14]
 8000dea:	3301      	adds	r3, #1
 8000dec:	73bb      	strb	r3, [r7, #14]
 8000dee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	dae4      	bge.n	8000dc0 <scan_i2c+0x14>
		}
	}

	return identified;
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b092      	sub	sp, #72	; 0x48
 8000e04:	af00      	add	r7, sp, #0
	uint8_t i2c_buff[4]; //Storage for raw data

	float data[4][2];	// Data for HYT271 sensor 1 {humidity, temperature}

	// I2C Addresses
	uint8_t ADDR_HYT_1 = 0x28;
 8000e06:	2328      	movs	r3, #40	; 0x28
 8000e08:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	uint8_t ADDR_HYT_2 = 0x71;
 8000e0c:	2371      	movs	r3, #113	; 0x71
 8000e0e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	// I2C Address array
	uint8_t devices[4];
	uint8_t n_devices = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Status bits
	uint8_t HYT_RM_status = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t HYT_Read_status = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e24:	f000 fc94 	bl	8001750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e28:	f000 f87e 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2c:	f000 f93e 	bl	80010ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e30:	f000 f8cc 	bl	8000fcc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000e34:	f000 f90a 	bl	800104c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_buff, 4);
 8000e38:	2204      	movs	r2, #4
 8000e3a:	4936      	ldr	r1, [pc, #216]	; (8000f14 <main+0x114>)
 8000e3c:	4836      	ldr	r0, [pc, #216]	; (8000f18 <main+0x118>)
 8000e3e:	f003 fb41 	bl	80044c4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (scan) {
 8000e42:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <main+0x11c>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d013      	beq.n	8000e72 <main+0x72>
		  n_devices = scan_i2c(&hi2c1, devices);
 8000e4a:	f107 0318 	add.w	r3, r7, #24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4833      	ldr	r0, [pc, #204]	; (8000f20 <main+0x120>)
 8000e52:	f7ff ffab 	bl	8000dac <scan_i2c>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		  broadcast_devices(&huart2, devices, n_devices);
 8000e5c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	4619      	mov	r1, r3
 8000e66:	482c      	ldr	r0, [pc, #176]	; (8000f18 <main+0x118>)
 8000e68:	f000 fa1c 	bl	80012a4 <broadcast_devices>
		  scan = 0;
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <main+0x11c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
	  }

	  for (uint8_t i = 0; i < n_devices; i++) {
 8000e72:	2300      	movs	r3, #0
 8000e74:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000e78:	e041      	b.n	8000efe <main+0xfe>
		  uint8_t addr = devices[i];
 8000e7a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000e7e:	3348      	adds	r3, #72	; 0x48
 8000e80:	443b      	add	r3, r7
 8000e82:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8000e86:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		  // Read data from sensor
		  HYT_RM_status = request_measurements(&hi2c1, addr, i2c_buff);
 8000e8a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000e8e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000e92:	4619      	mov	r1, r3
 8000e94:	4822      	ldr	r0, [pc, #136]	; (8000f20 <main+0x120>)
 8000e96:	f7ff fee7 	bl	8000c68 <request_measurements>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		  HAL_Delay(100);
 8000ea0:	2064      	movs	r0, #100	; 0x64
 8000ea2:	f000 fcbb 	bl	800181c <HAL_Delay>
		  HYT_Read_status = read_HYT271(&hi2c1, addr, i2c_buff);
 8000ea6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000eaa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481b      	ldr	r0, [pc, #108]	; (8000f20 <main+0x120>)
 8000eb2:	f7ff fef6 	bl	8000ca2 <read_HYT271>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
		  convert_data(i2c_buff, data[i]);
 8000ebc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000ec0:	f107 021c 	add.w	r2, r7, #28
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	441a      	add	r2, r3
 8000ec8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff12 	bl	8000cf8 <convert_data>

		  if (stream) {
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <main+0x124>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00b      	beq.n	8000ef4 <main+0xf4>
			  transmit_HYT(&huart2, data[i], tx_buff, addr);
 8000edc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000ee0:	f107 021c 	add.w	r2, r7, #28
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	18d1      	adds	r1, r2, r3
 8000ee8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000eec:	1d3a      	adds	r2, r7, #4
 8000eee:	480a      	ldr	r0, [pc, #40]	; (8000f18 <main+0x118>)
 8000ef0:	f000 f9a0 	bl	8001234 <transmit_HYT>
	  for (uint8_t i = 0; i < n_devices; i++) {
 8000ef4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000ef8:	3301      	adds	r3, #1
 8000efa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000efe:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000f02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d3b7      	bcc.n	8000e7a <main+0x7a>
		  }
	  }



	  HAL_Delay(500);
 8000f0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f0e:	f000 fc85 	bl	800181c <HAL_Delay>
	  if (scan) {
 8000f12:	e796      	b.n	8000e42 <main+0x42>
 8000f14:	200002d0 	.word	0x200002d0
 8000f18:	20000244 	.word	0x20000244
 8000f1c:	200002cd 	.word	0x200002cd
 8000f20:	200001f0 	.word	0x200001f0
 8000f24:	200002cc 	.word	0x200002cc

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b096      	sub	sp, #88	; 0x58
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f32:	2228      	movs	r2, #40	; 0x28
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f005 f9a3 	bl	8006282 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
 8000f5a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	2301      	movs	r3, #1
 8000f62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f64:	2310      	movs	r3, #16
 8000f66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 fe4b 	bl	8002c0c <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f7c:	f000 f8c6 	bl	800110c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 fe74 	bl	8003c88 <HAL_RCC_ClockConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fa6:	f000 f8b1 	bl	800110c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000faa:	2320      	movs	r3, #32
 8000fac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 f887 	bl	80040c8 <HAL_RCCEx_PeriphCLKConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fc0:	f000 f8a4 	bl	800110c <Error_Handler>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3758      	adds	r7, #88	; 0x58
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <MX_I2C1_Init+0x74>)
 8000fd2:	4a1c      	ldr	r2, [pc, #112]	; (8001044 <MX_I2C1_Init+0x78>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_I2C1_Init+0x74>)
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <MX_I2C1_Init+0x7c>)
 8000fda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <MX_I2C1_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_I2C1_Init+0x74>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_I2C1_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_I2C1_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_I2C1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_I2C1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_I2C1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <MX_I2C1_Init+0x74>)
 8001008:	f000 ff2c 	bl	8001e64 <HAL_I2C_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001012:	f000 f87b 	bl	800110c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001016:	2100      	movs	r1, #0
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <MX_I2C1_Init+0x74>)
 800101a:	f001 fd5f 	bl	8002adc <HAL_I2CEx_ConfigAnalogFilter>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001024:	f000 f872 	bl	800110c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001028:	2100      	movs	r1, #0
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_I2C1_Init+0x74>)
 800102c:	f001 fda1 	bl	8002b72 <HAL_I2CEx_ConfigDigitalFilter>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001036:	f000 f869 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001f0 	.word	0x200001f0
 8001044:	40005400 	.word	0x40005400
 8001048:	2000090e 	.word	0x2000090e

0800104c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001052:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <MX_USART2_UART_Init+0x5c>)
 8001054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001058:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800105c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_USART2_UART_Init+0x58>)
 8001090:	f003 f940 	bl	8004314 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800109a:	f000 f837 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000244 	.word	0x20000244
 80010a8:	40004400 	.word	0x40004400

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	4a14      	ldr	r2, [pc, #80]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010bc:	6153      	str	r3, [r2, #20]
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	6153      	str	r3, [r2, #20]
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ec:	6153      	str	r3, [r2, #20]
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_GPIO_Init+0x5c>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001114:	e7fe      	b.n	8001114 <Error_Handler+0x8>
	...

08001118 <HAL_UART_RxCpltCallback>:

#include "serial_driver.h"


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	// Function to handle incoming serial messages

	uint8_t ack[] = "#!#0#\n";
 8001120:	4a3a      	ldr	r2, [pc, #232]	; (800120c <HAL_UART_RxCpltCallback+0xf4>)
 8001122:	f107 0318 	add.w	r3, r7, #24
 8001126:	e892 0003 	ldmia.w	r2, {r0, r1}
 800112a:	6018      	str	r0, [r3, #0]
 800112c:	3304      	adds	r3, #4
 800112e:	8019      	strh	r1, [r3, #0]
 8001130:	3302      	adds	r3, #2
 8001132:	0c0a      	lsrs	r2, r1, #16
 8001134:	701a      	strb	r2, [r3, #0]
	uint8_t ack_stream[] = "#A!#\n";
 8001136:	4a36      	ldr	r2, [pc, #216]	; (8001210 <HAL_UART_RxCpltCallback+0xf8>)
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001140:	6018      	str	r0, [r3, #0]
 8001142:	3304      	adds	r3, #4
 8001144:	8019      	strh	r1, [r3, #0]
	uint8_t ack_stream_stop[] = "S!#\n";
 8001146:	4a33      	ldr	r2, [pc, #204]	; (8001214 <HAL_UART_RxCpltCallback+0xfc>)
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001150:	6018      	str	r0, [r3, #0]
 8001152:	3304      	adds	r3, #4
 8001154:	7019      	strb	r1, [r3, #0]

	// do something with the data
	if (strcmp(rx_buff, "#?#\n") == 0) {
 8001156:	4930      	ldr	r1, [pc, #192]	; (8001218 <HAL_UART_RxCpltCallback+0x100>)
 8001158:	4830      	ldr	r0, [pc, #192]	; (800121c <HAL_UART_RxCpltCallback+0x104>)
 800115a:	f7ff f839 	bl	80001d0 <strcmp>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10e      	bne.n	8001182 <HAL_UART_RxCpltCallback+0x6a>
		HAL_UART_Transmit(huart, ack, strlen(ack), HAL_MAX_DELAY);
 8001164:	f107 0318 	add.w	r3, r7, #24
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f891 	bl	8000290 <strlen>
 800116e:	4603      	mov	r3, r0
 8001170:	b29a      	uxth	r2, r3
 8001172:	f107 0118 	add.w	r1, r7, #24
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f003 f918 	bl	80043b0 <HAL_UART_Transmit>
 8001180:	e03b      	b.n	80011fa <HAL_UART_RxCpltCallback+0xe2>
	} else if(strcmp(rx_buff, "#A#\n") == 0) {
 8001182:	4927      	ldr	r1, [pc, #156]	; (8001220 <HAL_UART_RxCpltCallback+0x108>)
 8001184:	4825      	ldr	r0, [pc, #148]	; (800121c <HAL_UART_RxCpltCallback+0x104>)
 8001186:	f7ff f823 	bl	80001d0 <strcmp>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d111      	bne.n	80011b4 <HAL_UART_RxCpltCallback+0x9c>
		// set stream flag
		stream = 1;
 8001190:	4b24      	ldr	r3, [pc, #144]	; (8001224 <HAL_UART_RxCpltCallback+0x10c>)
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(huart, ack_stream, strlen(ack), HAL_MAX_DELAY);
 8001196:	f107 0318 	add.w	r3, r7, #24
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f878 	bl	8000290 <strlen>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	f107 0110 	add.w	r1, r7, #16
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f003 f8ff 	bl	80043b0 <HAL_UART_Transmit>
 80011b2:	e022      	b.n	80011fa <HAL_UART_RxCpltCallback+0xe2>
	} else if (strcmp(rx_buff, "#S#\n") == 0) {
 80011b4:	491c      	ldr	r1, [pc, #112]	; (8001228 <HAL_UART_RxCpltCallback+0x110>)
 80011b6:	4819      	ldr	r0, [pc, #100]	; (800121c <HAL_UART_RxCpltCallback+0x104>)
 80011b8:	f7ff f80a 	bl	80001d0 <strcmp>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d111      	bne.n	80011e6 <HAL_UART_RxCpltCallback+0xce>
		// reset stream flag (stop streaming)
		stream = 0;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_UART_RxCpltCallback+0x10c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(huart, ack_stream_stop, strlen(ack), HAL_MAX_DELAY);
 80011c8:	f107 0318 	add.w	r3, r7, #24
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f85f 	bl	8000290 <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	f107 0108 	add.w	r1, r7, #8
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f003 f8e6 	bl	80043b0 <HAL_UART_Transmit>
 80011e4:	e009      	b.n	80011fa <HAL_UART_RxCpltCallback+0xe2>
	} else if (strcmp(rx_buff, "#s#\n") == 0) {
 80011e6:	4911      	ldr	r1, [pc, #68]	; (800122c <HAL_UART_RxCpltCallback+0x114>)
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <HAL_UART_RxCpltCallback+0x104>)
 80011ea:	f7fe fff1 	bl	80001d0 <strcmp>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <HAL_UART_RxCpltCallback+0xe2>
		// set scan flag
		scan = 1;
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_UART_RxCpltCallback+0x118>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(huart, rx_buff, 4);
 80011fa:	2204      	movs	r2, #4
 80011fc:	4907      	ldr	r1, [pc, #28]	; (800121c <HAL_UART_RxCpltCallback+0x104>)
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f003 f960 	bl	80044c4 <HAL_UART_Receive_IT>
}
 8001204:	bf00      	nop
 8001206:	3720      	adds	r7, #32
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	080084c8 	.word	0x080084c8
 8001210:	080084d0 	.word	0x080084d0
 8001214:	080084d8 	.word	0x080084d8
 8001218:	080084a8 	.word	0x080084a8
 800121c:	200002d0 	.word	0x200002d0
 8001220:	080084b0 	.word	0x080084b0
 8001224:	200002cc 	.word	0x200002cc
 8001228:	080084b8 	.word	0x080084b8
 800122c:	080084c0 	.word	0x080084c0
 8001230:	200002cd 	.word	0x200002cd

08001234 <transmit_HYT>:

// Transmit HYT271 sensor data
uint8_t transmit_HYT(UART_HandleTypeDef *huart, float *data, uint8_t *tx_buff, uint8_t addr) {
 8001234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af04      	add	r7, sp, #16
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	70fb      	strb	r3, [r7, #3]
	sprintf(tx_buff,"#D#%02X#%.2f#%.2f#\n", addr, *data, *(data+1));
 8001242:	78fe      	ldrb	r6, [r7, #3]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f98d 	bl	8000568 <__aeabi_f2d>
 800124e:	4604      	mov	r4, r0
 8001250:	460d      	mov	r5, r1
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	3304      	adds	r3, #4
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f985 	bl	8000568 <__aeabi_f2d>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001266:	e9cd 4500 	strd	r4, r5, [sp]
 800126a:	4632      	mov	r2, r6
 800126c:	490c      	ldr	r1, [pc, #48]	; (80012a0 <transmit_HYT+0x6c>)
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f004 ffa4 	bl	80061bc <siprintf>
	if(HAL_UART_Transmit(huart, tx_buff, strlen(tx_buff), HAL_MAX_DELAY) != HAL_OK){
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff f80b 	bl	8000290 <strlen>
 800127a:	4603      	mov	r3, r0
 800127c:	b29a      	uxth	r2, r3
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f003 f893 	bl	80043b0 <HAL_UART_Transmit>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <transmit_HYT+0x60>
		return 1; // UART transmission error
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <transmit_HYT+0x62>
	} else {
		return 0;
 8001294:	2300      	movs	r3, #0
	}
}
 8001296:	4618      	mov	r0, r3
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129e:	bf00      	nop
 80012a0:	080084e0 	.word	0x080084e0

080012a4 <broadcast_devices>:

uint8_t broadcast_devices(UART_HandleTypeDef *huart, uint8_t * devices, uint8_t n_devices) {
 80012a4:	b5b0      	push	{r4, r5, r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	71fb      	strb	r3, [r7, #7]
	uint8_t tx[19] = "#s!#0#00#00#00#00#\n";
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <broadcast_devices+0xc8>)
 80012b4:	f107 0414 	add.w	r4, r7, #20
 80012b8:	461d      	mov	r5, r3
 80012ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012be:	682b      	ldr	r3, [r5, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	8022      	strh	r2, [r4, #0]
 80012c4:	3402      	adds	r4, #2
 80012c6:	0c1b      	lsrs	r3, r3, #16
 80012c8:	7023      	strb	r3, [r4, #0]
	uint8_t appendix[4];

	sprintf(tx, "#s!#%d", n_devices);
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4927      	ldr	r1, [pc, #156]	; (8001370 <broadcast_devices+0xcc>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f004 ff72 	bl	80061bc <siprintf>

	for (uint8_t i = 0; i < n_devices; i++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012de:	e018      	b.n	8001312 <broadcast_devices+0x6e>

		sprintf(appendix, "#%02X", *(devices + i));	// Set up appendix with device address, format as hex
 80012e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	4413      	add	r3, r2
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4920      	ldr	r1, [pc, #128]	; (8001374 <broadcast_devices+0xd0>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 ff62 	bl	80061bc <siprintf>
		strcat(tx, appendix); 						// concatenate 'appendix' to 'tx'
 80012f8:	f107 0210 	add.w	r2, r7, #16
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f004 ffc5 	bl	8006292 <strcat>
	for (uint8_t i = 0; i < n_devices; i++) {
 8001308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800130c:	3301      	adds	r3, #1
 800130e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001312:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	429a      	cmp	r2, r3
 800131a:	d3e1      	bcc.n	80012e0 <broadcast_devices+0x3c>
	}

	strcat(tx, "#\n");
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4618      	mov	r0, r3
 8001322:	f7fe ffb5 	bl	8000290 <strlen>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4413      	add	r3, r2
 8001330:	4a11      	ldr	r2, [pc, #68]	; (8001378 <broadcast_devices+0xd4>)
 8001332:	8811      	ldrh	r1, [r2, #0]
 8001334:	7892      	ldrb	r2, [r2, #2]
 8001336:	8019      	strh	r1, [r3, #0]
 8001338:	709a      	strb	r2, [r3, #2]

	if(HAL_UART_Transmit(huart, tx, strlen(tx), HAL_MAX_DELAY) != HAL_OK) {
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4618      	mov	r0, r3
 8001340:	f7fe ffa6 	bl	8000290 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	b29a      	uxth	r2, r3
 8001348:	f107 0114 	add.w	r1, r7, #20
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f003 f82d 	bl	80043b0 <HAL_UART_Transmit>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <broadcast_devices+0xbc>
		return 1;
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <broadcast_devices+0xbe>
	} else {
		return 0;
 8001360:	2300      	movs	r3, #0
	}
}
 8001362:	4618      	mov	r0, r3
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bdb0      	pop	{r4, r5, r7, pc}
 800136a:	bf00      	nop
 800136c:	08008508 	.word	0x08008508
 8001370:	080084f4 	.word	0x080084f4
 8001374:	080084fc 	.word	0x080084fc
 8001378:	08008504 	.word	0x08008504

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_MspInit+0x44>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <HAL_MspInit+0x44>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6193      	str	r3, [r2, #24]
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_MspInit+0x44>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_MspInit+0x44>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_MspInit+0x44>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_MspInit+0x44>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000

080013c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_I2C_MspInit+0x7c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d127      	bne.n	8001436 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <HAL_I2C_MspInit+0x80>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <HAL_I2C_MspInit+0x80>)
 80013ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f0:	6153      	str	r3, [r2, #20]
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_I2C_MspInit+0x80>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013fe:	23c0      	movs	r3, #192	; 0xc0
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001402:	2312      	movs	r3, #18
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800140e:	2304      	movs	r3, #4
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <HAL_I2C_MspInit+0x84>)
 800141a:	f000 fbb1 	bl	8001b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_I2C_MspInit+0x80>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <HAL_I2C_MspInit+0x80>)
 8001424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001428:	61d3      	str	r3, [r2, #28]
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_I2C_MspInit+0x80>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40005400 	.word	0x40005400
 8001444:	40021000 	.word	0x40021000
 8001448:	48000400 	.word	0x48000400

0800144c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a1c      	ldr	r2, [pc, #112]	; (80014dc <HAL_UART_MspInit+0x90>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d131      	bne.n	80014d2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <HAL_UART_MspInit+0x94>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <HAL_UART_MspInit+0x94>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	61d3      	str	r3, [r2, #28]
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <HAL_UART_MspInit+0x94>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_UART_MspInit+0x94>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <HAL_UART_MspInit+0x94>)
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	6153      	str	r3, [r2, #20]
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_UART_MspInit+0x94>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800149e:	f248 0304 	movw	r3, #32772	; 0x8004
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b0:	2307      	movs	r3, #7
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014be:	f000 fb5f 	bl	8001b80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2026      	movs	r0, #38	; 0x26
 80014c8:	f000 faa7 	bl	8001a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014cc:	2026      	movs	r0, #38	; 0x26
 80014ce:	f000 fac0 	bl	8001a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40004400 	.word	0x40004400
 80014e0:	40021000 	.word	0x40021000

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e8:	e7fe      	b.n	80014e8 <NMI_Handler+0x4>

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001530:	f000 f954 	bl	80017dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <USART2_IRQHandler+0x10>)
 800153e:	f003 f805 	bl	800454c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000244 	.word	0x20000244

0800154c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return 1;
 8001550:	2301      	movs	r3, #1
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <_kill>:

int _kill(int pid, int sig)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001566:	f004 feed 	bl	8006344 <__errno>
 800156a:	4603      	mov	r3, r0
 800156c:	2216      	movs	r2, #22
 800156e:	601a      	str	r2, [r3, #0]
  return -1;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_exit>:

void _exit (int status)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001584:	f04f 31ff 	mov.w	r1, #4294967295
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ffe7 	bl	800155c <_kill>
  while (1) {}    /* Make sure we hang here */
 800158e:	e7fe      	b.n	800158e <_exit+0x12>

08001590 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	e00a      	b.n	80015b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015a2:	f3af 8000 	nop.w
 80015a6:	4601      	mov	r1, r0
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	60ba      	str	r2, [r7, #8]
 80015ae:	b2ca      	uxtb	r2, r1
 80015b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbf0      	blt.n	80015a2 <_read+0x12>
  }

  return len;
 80015c0:	687b      	ldr	r3, [r7, #4]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e009      	b.n	80015f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	60ba      	str	r2, [r7, #8]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	dbf1      	blt.n	80015dc <_write+0x12>
  }
  return len;
 80015f8:	687b      	ldr	r3, [r7, #4]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <_close>:

int _close(int file)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162a:	605a      	str	r2, [r3, #4]
  return 0;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <_isatty>:

int _isatty(int file)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f004 fe52 	bl	8006344 <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	220c      	movs	r2, #12
 80016a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <_sbrk+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20003000 	.word	0x20003000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	200002e4 	.word	0x200002e4
 80016d4:	20000438 	.word	0x20000438

080016d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <SystemInit+0x20>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <SystemInit+0x20>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
                                                    ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001734 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001700:	f7ff ffea 	bl	80016d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001704:	480c      	ldr	r0, [pc, #48]	; (8001738 <LoopForever+0x6>)
  ldr r1, =_edata
 8001706:	490d      	ldr	r1, [pc, #52]	; (800173c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001708:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <LoopForever+0xe>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <LoopForever+0x12>)
  ldr r4, =_ebss
 800171c:	4c0a      	ldr	r4, [pc, #40]	; (8001748 <LoopForever+0x16>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800172a:	f004 fe11 	bl	8006350 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800172e:	f7ff fb67 	bl	8000e00 <main>

08001732 <LoopForever>:

LoopForever:
    b LoopForever
 8001732:	e7fe      	b.n	8001732 <LoopForever>
                                                    ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001734:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001740:	080088cc 	.word	0x080088cc
  ldr r2, =_sbss
 8001744:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001748:	20000438 	.word	0x20000438

0800174c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC1_2_IRQHandler>
	...

08001750 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_Init+0x28>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <HAL_Init+0x28>)
 800175a:	f043 0310 	orr.w	r3, r3, #16
 800175e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f000 f94f 	bl	8001a04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001766:	2000      	movs	r0, #0
 8001768:	f000 f808 	bl	800177c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800176c:	f7ff fe06 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40022000 	.word	0x40022000

0800177c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_InitTick+0x54>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x58>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	fbb3 f3f1 	udiv	r3, r3, r1
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f967 	bl	8001a6e <HAL_SYSTICK_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00e      	b.n	80017c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d80a      	bhi.n	80017c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f000 f92f 	bl	8001a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <HAL_InitTick+0x5c>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000004 	.word	0x20000004

080017dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x20>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x24>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <HAL_IncTick+0x24>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000008 	.word	0x20000008
 8001800:	200002e8 	.word	0x200002e8

08001804 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;  
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_GetTick+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	200002e8 	.word	0x200002e8

0800181c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff ffee 	bl	8001804 <HAL_GetTick>
 8001828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001834:	d005      	beq.n	8001842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_Delay+0x44>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001842:	bf00      	nop
 8001844:	f7ff ffde 	bl	8001804 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	d8f7      	bhi.n	8001844 <HAL_Delay+0x28>
  {
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000008 	.word	0x20000008

08001864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001880:	4013      	ands	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <__NVIC_GetPriorityGrouping+0x18>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 0307 	and.w	r3, r3, #7
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db0b      	blt.n	80018f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	4907      	ldr	r1, [pc, #28]	; (8001900 <__NVIC_EnableIRQ+0x38>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	2001      	movs	r0, #1
 80018ea:	fa00 f202 	lsl.w	r2, r0, r2
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db0a      	blt.n	800192e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	; (8001950 <__NVIC_SetPriority+0x4c>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800192c:	e00a      	b.n	8001944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4908      	ldr	r1, [pc, #32]	; (8001954 <__NVIC_SetPriority+0x50>)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3b04      	subs	r3, #4
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	440b      	add	r3, r1
 8001942:	761a      	strb	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f1c3 0307 	rsb	r3, r3, #7
 8001972:	2b04      	cmp	r3, #4
 8001974:	bf28      	it	cs
 8001976:	2304      	movcs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3304      	adds	r3, #4
 800197e:	2b06      	cmp	r3, #6
 8001980:	d902      	bls.n	8001988 <NVIC_EncodePriority+0x30>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3b03      	subs	r3, #3
 8001986:	e000      	b.n	800198a <NVIC_EncodePriority+0x32>
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	401a      	ands	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	4313      	orrs	r3, r2
         );
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d0:	d301      	bcc.n	80019d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00f      	b.n	80019f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <SysTick_Config+0x40>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019de:	210f      	movs	r1, #15
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f7ff ff8e 	bl	8001904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <SysTick_Config+0x40>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <SysTick_Config+0x40>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	e000e010 	.word	0xe000e010

08001a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff29 	bl	8001864 <__NVIC_SetPriorityGrouping>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2c:	f7ff ff3e 	bl	80018ac <__NVIC_GetPriorityGrouping>
 8001a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	f7ff ff8e 	bl	8001958 <NVIC_EncodePriority>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff5d 	bl	8001904 <__NVIC_SetPriority>
}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff31 	bl	80018c8 <__NVIC_EnableIRQ>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ffa2 	bl	80019c0 <SysTick_Config>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e02e      	b.n	8001af6 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d008      	beq.n	8001ab4 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e020      	b.n	8001af6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 020e 	bic.w	r2, r2, #14
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d005      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
 8001b22:	e027      	b.n	8001b74 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 020e 	bic.w	r2, r2, #14
 8001b32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0201 	bic.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b52:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	4798      	blx	r3
    }
  }
  return status;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8e:	e14e      	b.n	8001e2e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8140 	beq.w	8001e28 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d005      	beq.n	8001bc0 <HAL_GPIO_Init+0x40>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d130      	bne.n	8001c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 0201 	and.w	r2, r3, #1
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d017      	beq.n	8001c5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d123      	bne.n	8001cb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	08da      	lsrs	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3208      	adds	r2, #8
 8001cac:	6939      	ldr	r1, [r7, #16]
 8001cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0203 	and.w	r2, r3, #3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 809a 	beq.w	8001e28 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf4:	4b55      	ldr	r3, [pc, #340]	; (8001e4c <HAL_GPIO_Init+0x2cc>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a54      	ldr	r2, [pc, #336]	; (8001e4c <HAL_GPIO_Init+0x2cc>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b52      	ldr	r3, [pc, #328]	; (8001e4c <HAL_GPIO_Init+0x2cc>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d0c:	4a50      	ldr	r2, [pc, #320]	; (8001e50 <HAL_GPIO_Init+0x2d0>)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3302      	adds	r3, #2
 8001d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	220f      	movs	r2, #15
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d36:	d013      	beq.n	8001d60 <HAL_GPIO_Init+0x1e0>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a46      	ldr	r2, [pc, #280]	; (8001e54 <HAL_GPIO_Init+0x2d4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d00d      	beq.n	8001d5c <HAL_GPIO_Init+0x1dc>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a45      	ldr	r2, [pc, #276]	; (8001e58 <HAL_GPIO_Init+0x2d8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d007      	beq.n	8001d58 <HAL_GPIO_Init+0x1d8>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a44      	ldr	r2, [pc, #272]	; (8001e5c <HAL_GPIO_Init+0x2dc>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d101      	bne.n	8001d54 <HAL_GPIO_Init+0x1d4>
 8001d50:	2303      	movs	r3, #3
 8001d52:	e006      	b.n	8001d62 <HAL_GPIO_Init+0x1e2>
 8001d54:	2305      	movs	r3, #5
 8001d56:	e004      	b.n	8001d62 <HAL_GPIO_Init+0x1e2>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e002      	b.n	8001d62 <HAL_GPIO_Init+0x1e2>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <HAL_GPIO_Init+0x1e2>
 8001d60:	2300      	movs	r3, #0
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	f002 0203 	and.w	r2, r2, #3
 8001d68:	0092      	lsls	r2, r2, #2
 8001d6a:	4093      	lsls	r3, r2
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d72:	4937      	ldr	r1, [pc, #220]	; (8001e50 <HAL_GPIO_Init+0x2d0>)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	3302      	adds	r3, #2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d80:	4b37      	ldr	r3, [pc, #220]	; (8001e60 <HAL_GPIO_Init+0x2e0>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001da4:	4a2e      	ldr	r2, [pc, #184]	; (8001e60 <HAL_GPIO_Init+0x2e0>)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001daa:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <HAL_GPIO_Init+0x2e0>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dce:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <HAL_GPIO_Init+0x2e0>)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <HAL_GPIO_Init+0x2e0>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001df8:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <HAL_GPIO_Init+0x2e0>)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_GPIO_Init+0x2e0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e22:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <HAL_GPIO_Init+0x2e0>)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f47f aea9 	bne.w	8001b90 <HAL_GPIO_Init+0x10>
  }
}
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010000 	.word	0x40010000
 8001e54:	48000400 	.word	0x48000400
 8001e58:	48000800 	.word	0x48000800
 8001e5c:	48000c00 	.word	0x48000c00
 8001e60:	40010400 	.word	0x40010400

08001e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e08d      	b.n	8001f92 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fa9a 	bl	80013c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2224      	movs	r2, #36	; 0x24
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ec4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d107      	bne.n	8001ede <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	e006      	b.n	8001eec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001eea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d108      	bne.n	8001f06 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	e007      	b.n	8001f16 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69d9      	ldr	r1, [r3, #28]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1a      	ldr	r2, [r3, #32]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	460b      	mov	r3, r1
 8001faa:	817b      	strh	r3, [r7, #10]
 8001fac:	4613      	mov	r3, r2
 8001fae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	f040 80fd 	bne.w	80021b8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_I2C_Master_Transmit+0x30>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e0f6      	b.n	80021ba <HAL_I2C_Master_Transmit+0x21e>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fd4:	f7ff fc16 	bl	8001804 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2319      	movs	r3, #25
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 faf6 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0e1      	b.n	80021ba <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2221      	movs	r2, #33	; 0x21
 8001ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2210      	movs	r2, #16
 8002002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	893a      	ldrh	r2, [r7, #8]
 8002016:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002022:	b29b      	uxth	r3, r3
 8002024:	2bff      	cmp	r3, #255	; 0xff
 8002026:	d906      	bls.n	8002036 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	22ff      	movs	r2, #255	; 0xff
 800202c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800202e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	e007      	b.n	8002046 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002040:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002044:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204a:	2b00      	cmp	r3, #0
 800204c:	d024      	beq.n	8002098 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	781a      	ldrb	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002068:	b29b      	uxth	r3, r3
 800206a:	3b01      	subs	r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	b2db      	uxtb	r3, r3
 8002084:	3301      	adds	r3, #1
 8002086:	b2da      	uxtb	r2, r3
 8002088:	8979      	ldrh	r1, [r7, #10]
 800208a:	4b4e      	ldr	r3, [pc, #312]	; (80021c4 <HAL_I2C_Master_Transmit+0x228>)
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 fcf1 	bl	8002a78 <I2C_TransferConfig>
 8002096:	e066      	b.n	8002166 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	b2da      	uxtb	r2, r3
 800209e:	8979      	ldrh	r1, [r7, #10]
 80020a0:	4b48      	ldr	r3, [pc, #288]	; (80021c4 <HAL_I2C_Master_Transmit+0x228>)
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fce6 	bl	8002a78 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80020ac:	e05b      	b.n	8002166 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	6a39      	ldr	r1, [r7, #32]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fae9 	bl	800268a <I2C_WaitOnTXISFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e07b      	b.n	80021ba <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d034      	beq.n	8002166 <HAL_I2C_Master_Transmit+0x1ca>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	d130      	bne.n	8002166 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	2200      	movs	r2, #0
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fa62 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e04d      	b.n	80021ba <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002122:	b29b      	uxth	r3, r3
 8002124:	2bff      	cmp	r3, #255	; 0xff
 8002126:	d90e      	bls.n	8002146 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	22ff      	movs	r2, #255	; 0xff
 800212c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002132:	b2da      	uxtb	r2, r3
 8002134:	8979      	ldrh	r1, [r7, #10]
 8002136:	2300      	movs	r3, #0
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fc9a 	bl	8002a78 <I2C_TransferConfig>
 8002144:	e00f      	b.n	8002166 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002154:	b2da      	uxtb	r2, r3
 8002156:	8979      	ldrh	r1, [r7, #10]
 8002158:	2300      	movs	r3, #0
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fc89 	bl	8002a78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d19e      	bne.n	80020ae <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	6a39      	ldr	r1, [r7, #32]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 facf 	bl	8002718 <I2C_WaitOnSTOPFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e01a      	b.n	80021ba <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2220      	movs	r2, #32
 800218a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6859      	ldr	r1, [r3, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <HAL_I2C_Master_Transmit+0x22c>)
 8002198:	400b      	ands	r3, r1
 800219a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e000      	b.n	80021ba <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80021b8:	2302      	movs	r3, #2
  }
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	80002000 	.word	0x80002000
 80021c8:	fe00e800 	.word	0xfe00e800

080021cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	461a      	mov	r2, r3
 80021d8:	460b      	mov	r3, r1
 80021da:	817b      	strh	r3, [r7, #10]
 80021dc:	4613      	mov	r3, r2
 80021de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	f040 80db 	bne.w	80023a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_I2C_Master_Receive+0x30>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e0d4      	b.n	80023a6 <HAL_I2C_Master_Receive+0x1da>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002204:	f7ff fafe 	bl	8001804 <HAL_GetTick>
 8002208:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2319      	movs	r3, #25
 8002210:	2201      	movs	r2, #1
 8002212:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f9de 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0bf      	b.n	80023a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2222      	movs	r2, #34	; 0x22
 800222a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2210      	movs	r2, #16
 8002232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	893a      	ldrh	r2, [r7, #8]
 8002246:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	2bff      	cmp	r3, #255	; 0xff
 8002256:	d90e      	bls.n	8002276 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2201      	movs	r2, #1
 800225c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	b2da      	uxtb	r2, r3
 8002264:	8979      	ldrh	r1, [r7, #10]
 8002266:	4b52      	ldr	r3, [pc, #328]	; (80023b0 <HAL_I2C_Master_Receive+0x1e4>)
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fc02 	bl	8002a78 <I2C_TransferConfig>
 8002274:	e06d      	b.n	8002352 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002284:	b2da      	uxtb	r2, r3
 8002286:	8979      	ldrh	r1, [r7, #10]
 8002288:	4b49      	ldr	r3, [pc, #292]	; (80023b0 <HAL_I2C_Master_Receive+0x1e4>)
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 fbf1 	bl	8002a78 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002296:	e05c      	b.n	8002352 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	6a39      	ldr	r1, [r7, #32]
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 fa7f 	bl	80027a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e07c      	b.n	80023a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d034      	beq.n	8002352 <HAL_I2C_Master_Receive+0x186>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d130      	bne.n	8002352 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	2200      	movs	r2, #0
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f96c 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e04d      	b.n	80023a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	2bff      	cmp	r3, #255	; 0xff
 8002312:	d90e      	bls.n	8002332 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	22ff      	movs	r2, #255	; 0xff
 8002318:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	b2da      	uxtb	r2, r3
 8002320:	8979      	ldrh	r1, [r7, #10]
 8002322:	2300      	movs	r3, #0
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 fba4 	bl	8002a78 <I2C_TransferConfig>
 8002330:	e00f      	b.n	8002352 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002340:	b2da      	uxtb	r2, r3
 8002342:	8979      	ldrh	r1, [r7, #10]
 8002344:	2300      	movs	r3, #0
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 fb93 	bl	8002a78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d19d      	bne.n	8002298 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	6a39      	ldr	r1, [r7, #32]
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f9d9 	bl	8002718 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e01a      	b.n	80023a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2220      	movs	r2, #32
 8002376:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6859      	ldr	r1, [r3, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <HAL_I2C_Master_Receive+0x1e8>)
 8002384:	400b      	ands	r3, r1
 8002386:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	e000      	b.n	80023a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80023a4:	2302      	movs	r3, #2
  }
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	80002400 	.word	0x80002400
 80023b4:	fe00e800 	.word	0xfe00e800

080023b8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af02      	add	r7, sp, #8
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	460b      	mov	r3, r1
 80023c6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	f040 80d6 	bne.w	8002586 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023e8:	d101      	bne.n	80023ee <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80023ea:	2302      	movs	r3, #2
 80023ec:	e0cc      	b.n	8002588 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_I2C_IsDeviceReady+0x44>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e0c5      	b.n	8002588 <HAL_I2C_IsDeviceReady+0x1d0>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2224      	movs	r2, #36	; 0x24
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_I2C_IsDeviceReady+0x72>
 800241a:	897b      	ldrh	r3, [r7, #10]
 800241c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002424:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002428:	e006      	b.n	8002438 <HAL_I2C_IsDeviceReady+0x80>
 800242a:	897b      	ldrh	r3, [r7, #10]
 800242c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002430:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002434:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800243e:	f7ff f9e1 	bl	8001804 <HAL_GetTick>
 8002442:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b20      	cmp	r3, #32
 8002450:	bf0c      	ite	eq
 8002452:	2301      	moveq	r3, #1
 8002454:	2300      	movne	r3, #0
 8002456:	b2db      	uxtb	r3, r3
 8002458:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b10      	cmp	r3, #16
 8002466:	bf0c      	ite	eq
 8002468:	2301      	moveq	r3, #1
 800246a:	2300      	movne	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002470:	e034      	b.n	80024dc <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d01a      	beq.n	80024b0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800247a:	f7ff f9c3 	bl	8001804 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d302      	bcc.n	8002490 <HAL_I2C_IsDeviceReady+0xd8>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10f      	bne.n	80024b0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249c:	f043 0220 	orr.w	r2, r3, #32
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e06b      	b.n	8002588 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b20      	cmp	r3, #32
 80024bc:	bf0c      	ite	eq
 80024be:	2301      	moveq	r3, #1
 80024c0:	2300      	movne	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80024dc:	7ffb      	ldrb	r3, [r7, #31]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <HAL_I2C_IsDeviceReady+0x130>
 80024e2:	7fbb      	ldrb	r3, [r7, #30]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0c4      	beq.n	8002472 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	2b10      	cmp	r3, #16
 80024f4:	d01a      	beq.n	800252c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2120      	movs	r1, #32
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f869 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e03b      	b.n	8002588 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2220      	movs	r2, #32
 8002516:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	e02d      	b.n	8002588 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2200      	movs	r2, #0
 8002534:	2120      	movs	r1, #32
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f84e 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e020      	b.n	8002588 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2210      	movs	r2, #16
 800254c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2220      	movs	r2, #32
 8002554:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	3301      	adds	r3, #1
 800255a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	429a      	cmp	r2, r3
 8002562:	f63f af56 	bhi.w	8002412 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f043 0220 	orr.w	r2, r3, #32
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002586:	2302      	movs	r3, #2
  }
}
 8002588:	4618      	mov	r0, r3
 800258a:	3720      	adds	r7, #32
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d103      	bne.n	80025ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2200      	movs	r2, #0
 80025ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d007      	beq.n	80025cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	619a      	str	r2, [r3, #24]
  }
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025e8:	e03b      	b.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f962 	bl	80028b8 <I2C_IsErrorOccurred>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e041      	b.n	8002682 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002604:	d02d      	beq.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002606:	f7ff f8fd 	bl	8001804 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d302      	bcc.n	800261c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d122      	bne.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4013      	ands	r3, r2
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	429a      	cmp	r2, r3
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	429a      	cmp	r2, r3
 8002638:	d113      	bne.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f043 0220 	orr.w	r2, r3, #32
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e00f      	b.n	8002682 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4013      	ands	r3, r2
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	bf0c      	ite	eq
 8002672:	2301      	moveq	r3, #1
 8002674:	2300      	movne	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	429a      	cmp	r2, r3
 800267e:	d0b4      	beq.n	80025ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002696:	e033      	b.n	8002700 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f90b 	bl	80028b8 <I2C_IsErrorOccurred>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e031      	b.n	8002710 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b2:	d025      	beq.n	8002700 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b4:	f7ff f8a6 	bl	8001804 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d302      	bcc.n	80026ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d11a      	bne.n	8002700 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d013      	beq.n	8002700 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026dc:	f043 0220 	orr.w	r2, r3, #32
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e007      	b.n	8002710 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b02      	cmp	r3, #2
 800270c:	d1c4      	bne.n	8002698 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002724:	e02f      	b.n	8002786 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 f8c4 	bl	80028b8 <I2C_IsErrorOccurred>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e02d      	b.n	8002796 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273a:	f7ff f863 	bl	8001804 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	429a      	cmp	r2, r3
 8002748:	d302      	bcc.n	8002750 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d11a      	bne.n	8002786 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b20      	cmp	r3, #32
 800275c:	d013      	beq.n	8002786 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	f043 0220 	orr.w	r2, r3, #32
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e007      	b.n	8002796 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b20      	cmp	r3, #32
 8002792:	d1c8      	bne.n	8002726 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80027b0:	e071      	b.n	8002896 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f87e 	bl	80028b8 <I2C_IsErrorOccurred>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d13b      	bne.n	800284c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d138      	bne.n	800284c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d105      	bne.n	80027f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	2b10      	cmp	r3, #16
 8002800:	d121      	bne.n	8002846 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2210      	movs	r2, #16
 8002808:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2204      	movs	r2, #4
 800280e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2220      	movs	r2, #32
 8002816:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6859      	ldr	r1, [r3, #4]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002824:	400b      	ands	r3, r1
 8002826:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	75fb      	strb	r3, [r7, #23]
 8002844:	e002      	b.n	800284c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800284c:	f7fe ffda 	bl	8001804 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	429a      	cmp	r2, r3
 800285a:	d302      	bcc.n	8002862 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d119      	bne.n	8002896 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002862:	7dfb      	ldrb	r3, [r7, #23]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d116      	bne.n	8002896 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b04      	cmp	r3, #4
 8002874:	d00f      	beq.n	8002896 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f043 0220 	orr.w	r2, r3, #32
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d002      	beq.n	80028aa <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d083      	beq.n	80027b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	fe00e800 	.word	0xfe00e800

080028b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d068      	beq.n	80029b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2210      	movs	r2, #16
 80028ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028ec:	e049      	b.n	8002982 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f4:	d045      	beq.n	8002982 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028f6:	f7fe ff85 	bl	8001804 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	429a      	cmp	r2, r3
 8002904:	d302      	bcc.n	800290c <I2C_IsErrorOccurred+0x54>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d13a      	bne.n	8002982 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002916:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800291e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800292a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800292e:	d121      	bne.n	8002974 <I2C_IsErrorOccurred+0xbc>
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002936:	d01d      	beq.n	8002974 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002938:	7cfb      	ldrb	r3, [r7, #19]
 800293a:	2b20      	cmp	r3, #32
 800293c:	d01a      	beq.n	8002974 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800294c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800294e:	f7fe ff59 	bl	8001804 <HAL_GetTick>
 8002952:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002954:	e00e      	b.n	8002974 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002956:	f7fe ff55 	bl	8001804 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b19      	cmp	r3, #25
 8002962:	d907      	bls.n	8002974 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	f043 0320 	orr.w	r3, r3, #32
 800296a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002972:	e006      	b.n	8002982 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b20      	cmp	r3, #32
 8002980:	d1e9      	bne.n	8002956 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b20      	cmp	r3, #32
 800298e:	d003      	beq.n	8002998 <I2C_IsErrorOccurred+0xe0>
 8002990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0aa      	beq.n	80028ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2220      	movs	r2, #32
 80029a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	f043 0304 	orr.w	r3, r3, #4
 80029ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00b      	beq.n	80029e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	f043 0308 	orr.w	r3, r3, #8
 80029f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00b      	beq.n	8002a24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	f043 0302 	orr.w	r3, r3, #2
 8002a12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d01c      	beq.n	8002a66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f7ff fdaf 	bl	8002590 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <I2C_IsErrorOccurred+0x1bc>)
 8002a3e:	400b      	ands	r3, r1
 8002a40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002a66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3728      	adds	r7, #40	; 0x28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	fe00e800 	.word	0xfe00e800

08002a78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	817b      	strh	r3, [r7, #10]
 8002a86:	4613      	mov	r3, r2
 8002a88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a8a:	897b      	ldrh	r3, [r7, #10]
 8002a8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a90:	7a7b      	ldrb	r3, [r7, #9]
 8002a92:	041b      	lsls	r3, r3, #16
 8002a94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002aa6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	0d5b      	lsrs	r3, r3, #21
 8002ab2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <I2C_TransferConfig+0x60>)
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	43db      	mvns	r3, r3
 8002abc:	ea02 0103 	and.w	r1, r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	03ff63ff 	.word	0x03ff63ff

08002adc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	d138      	bne.n	8002b64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e032      	b.n	8002b66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2224      	movs	r2, #36	; 0x24
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6819      	ldr	r1, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e000      	b.n	8002b66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b085      	sub	sp, #20
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d139      	bne.n	8002bfc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e033      	b.n	8002bfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2224      	movs	r2, #36	; 0x24
 8002ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0201 	bic.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bc4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e000      	b.n	8002bfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
  }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c1c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f001 b823 	b.w	8003c78 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 817d 	beq.w	8002f42 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c48:	4bbc      	ldr	r3, [pc, #752]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d00c      	beq.n	8002c6e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c54:	4bb9      	ldr	r3, [pc, #740]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d15c      	bne.n	8002d1a <HAL_RCC_OscConfig+0x10e>
 8002c60:	4bb6      	ldr	r3, [pc, #728]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6c:	d155      	bne.n	8002d1a <HAL_RCC_OscConfig+0x10e>
 8002c6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c72:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c86:	fab3 f383 	clz	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d102      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x94>
 8002c9a:	4ba8      	ldr	r3, [pc, #672]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	e015      	b.n	8002ccc <HAL_RCC_OscConfig+0xc0>
 8002ca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002cbc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002cc8:	4b9c      	ldr	r3, [pc, #624]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cd0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002cd4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002cd8:	fa92 f2a2 	rbit	r2, r2
 8002cdc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002ce0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002ce4:	fab2 f282 	clz	r2, r2
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	f042 0220 	orr.w	r2, r2, #32
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	f002 021f 	and.w	r2, r2, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 811f 	beq.w	8002f40 <HAL_RCC_OscConfig+0x334>
 8002d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f040 8116 	bne.w	8002f40 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f000 bfaf 	b.w	8003c78 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x12e>
 8002d2c:	4b83      	ldr	r3, [pc, #524]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a82      	ldr	r2, [pc, #520]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	e036      	b.n	8002da8 <HAL_RCC_OscConfig+0x19c>
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x158>
 8002d4a:	4b7c      	ldr	r3, [pc, #496]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a7b      	ldr	r2, [pc, #492]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b79      	ldr	r3, [pc, #484]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a78      	ldr	r2, [pc, #480]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e021      	b.n	8002da8 <HAL_RCC_OscConfig+0x19c>
 8002d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x184>
 8002d76:	4b71      	ldr	r3, [pc, #452]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a70      	ldr	r2, [pc, #448]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	4b6e      	ldr	r3, [pc, #440]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a6d      	ldr	r2, [pc, #436]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e00b      	b.n	8002da8 <HAL_RCC_OscConfig+0x19c>
 8002d90:	4b6a      	ldr	r3, [pc, #424]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a69      	ldr	r2, [pc, #420]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	4b67      	ldr	r3, [pc, #412]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a66      	ldr	r2, [pc, #408]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002da8:	4b64      	ldr	r3, [pc, #400]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	f023 020f 	bic.w	r2, r3, #15
 8002db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	495f      	ldr	r1, [pc, #380]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d059      	beq.n	8002e86 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7fe fd17 	bl	8001804 <HAL_GetTick>
 8002dd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fd12 	bl	8001804 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b64      	cmp	r3, #100	; 0x64
 8002dea:	d902      	bls.n	8002df2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	f000 bf43 	b.w	8003c78 <HAL_RCC_OscConfig+0x106c>
 8002df2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002df6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002e06:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d102      	bne.n	8002e24 <HAL_RCC_OscConfig+0x218>
 8002e1e:	4b47      	ldr	r3, [pc, #284]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	e015      	b.n	8002e50 <HAL_RCC_OscConfig+0x244>
 8002e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e28:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002e30:	fa93 f3a3 	rbit	r3, r3
 8002e34:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e3c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002e40:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002e4c:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e54:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002e58:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002e5c:	fa92 f2a2 	rbit	r2, r2
 8002e60:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002e64:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002e68:	fab2 f282 	clz	r2, r2
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	f042 0220 	orr.w	r2, r2, #32
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	f002 021f 	and.w	r2, r2, #31
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ab      	beq.n	8002ddc <HAL_RCC_OscConfig+0x1d0>
 8002e84:	e05d      	b.n	8002f42 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fe fcbd 	bl	8001804 <HAL_GetTick>
 8002e8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e90:	f7fe fcb8 	bl	8001804 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b64      	cmp	r3, #100	; 0x64
 8002e9e:	d902      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	f000 bee9 	b.w	8003c78 <HAL_RCC_OscConfig+0x106c>
 8002ea6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eaa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002eba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d102      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x2cc>
 8002ed2:	4b1a      	ldr	r3, [pc, #104]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	e015      	b.n	8002f04 <HAL_RCC_OscConfig+0x2f8>
 8002ed8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002edc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ef0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ef4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002f00:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f08:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002f0c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f10:	fa92 f2a2 	rbit	r2, r2
 8002f14:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002f18:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002f1c:	fab2 f282 	clz	r2, r2
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	f042 0220 	orr.w	r2, r2, #32
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	f002 021f 	and.w	r2, r2, #31
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ab      	bne.n	8002e90 <HAL_RCC_OscConfig+0x284>
 8002f38:	e003      	b.n	8002f42 <HAL_RCC_OscConfig+0x336>
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 817d 	beq.w	8003252 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f58:	4ba6      	ldr	r3, [pc, #664]	; (80031f4 <HAL_RCC_OscConfig+0x5e8>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 030c 	and.w	r3, r3, #12
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00b      	beq.n	8002f7c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f64:	4ba3      	ldr	r3, [pc, #652]	; (80031f4 <HAL_RCC_OscConfig+0x5e8>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d172      	bne.n	8003056 <HAL_RCC_OscConfig+0x44a>
 8002f70:	4ba0      	ldr	r3, [pc, #640]	; (80031f4 <HAL_RCC_OscConfig+0x5e8>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d16c      	bne.n	8003056 <HAL_RCC_OscConfig+0x44a>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002f8e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d102      	bne.n	8002fac <HAL_RCC_OscConfig+0x3a0>
 8002fa6:	4b93      	ldr	r3, [pc, #588]	; (80031f4 <HAL_RCC_OscConfig+0x5e8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	e013      	b.n	8002fd4 <HAL_RCC_OscConfig+0x3c8>
 8002fac:	2302      	movs	r3, #2
 8002fae:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002fc4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002fd0:	4b88      	ldr	r3, [pc, #544]	; (80031f4 <HAL_RCC_OscConfig+0x5e8>)
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002fda:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002fde:	fa92 f2a2 	rbit	r2, r2
 8002fe2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002fe6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002fea:	fab2 f282 	clz	r2, r2
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	f042 0220 	orr.w	r2, r2, #32
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	f002 021f 	and.w	r2, r2, #31
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8003000:	4013      	ands	r3, r2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_RCC_OscConfig+0x410>
 8003006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d002      	beq.n	800301c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	f000 be2e 	b.w	8003c78 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301c:	4b75      	ldr	r3, [pc, #468]	; (80031f4 <HAL_RCC_OscConfig+0x5e8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003028:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	21f8      	movs	r1, #248	; 0xf8
 8003032:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800303a:	fa91 f1a1 	rbit	r1, r1
 800303e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003042:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003046:	fab1 f181 	clz	r1, r1
 800304a:	b2c9      	uxtb	r1, r1
 800304c:	408b      	lsls	r3, r1
 800304e:	4969      	ldr	r1, [pc, #420]	; (80031f4 <HAL_RCC_OscConfig+0x5e8>)
 8003050:	4313      	orrs	r3, r2
 8003052:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003054:	e0fd      	b.n	8003252 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8088 	beq.w	8003178 <HAL_RCC_OscConfig+0x56c>
 8003068:	2301      	movs	r3, #1
 800306a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800307a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003088:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	461a      	mov	r2, r3
 8003090:	2301      	movs	r3, #1
 8003092:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7fe fbb6 	bl	8001804 <HAL_GetTick>
 8003098:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800309e:	f7fe fbb1 	bl	8001804 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d902      	bls.n	80030b4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	f000 bde2 	b.w	8003c78 <HAL_RCC_OscConfig+0x106c>
 80030b4:	2302      	movs	r3, #2
 80030b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80030c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d102      	bne.n	80030e4 <HAL_RCC_OscConfig+0x4d8>
 80030de:	4b45      	ldr	r3, [pc, #276]	; (80031f4 <HAL_RCC_OscConfig+0x5e8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	e013      	b.n	800310c <HAL_RCC_OscConfig+0x500>
 80030e4:	2302      	movs	r3, #2
 80030e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80030f6:	2302      	movs	r3, #2
 80030f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80030fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003108:	4b3a      	ldr	r3, [pc, #232]	; (80031f4 <HAL_RCC_OscConfig+0x5e8>)
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	2202      	movs	r2, #2
 800310e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003112:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003116:	fa92 f2a2 	rbit	r2, r2
 800311a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800311e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003122:	fab2 f282 	clz	r2, r2
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	f042 0220 	orr.w	r2, r2, #32
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	f002 021f 	and.w	r2, r2, #31
 8003132:	2101      	movs	r1, #1
 8003134:	fa01 f202 	lsl.w	r2, r1, r2
 8003138:	4013      	ands	r3, r2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0af      	beq.n	800309e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313e:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <HAL_RCC_OscConfig+0x5e8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	21f8      	movs	r1, #248	; 0xf8
 8003154:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800315c:	fa91 f1a1 	rbit	r1, r1
 8003160:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003164:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003168:	fab1 f181 	clz	r1, r1
 800316c:	b2c9      	uxtb	r1, r1
 800316e:	408b      	lsls	r3, r1
 8003170:	4920      	ldr	r1, [pc, #128]	; (80031f4 <HAL_RCC_OscConfig+0x5e8>)
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]
 8003176:	e06c      	b.n	8003252 <HAL_RCC_OscConfig+0x646>
 8003178:	2301      	movs	r3, #1
 800317a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003182:	fa93 f3a3 	rbit	r3, r3
 8003186:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800318a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003198:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	461a      	mov	r2, r3
 80031a0:	2300      	movs	r3, #0
 80031a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fe fb2e 	bl	8001804 <HAL_GetTick>
 80031a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ac:	e00a      	b.n	80031c4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ae:	f7fe fb29 	bl	8001804 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d902      	bls.n	80031c4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	f000 bd5a 	b.w	8003c78 <HAL_RCC_OscConfig+0x106c>
 80031c4:	2302      	movs	r3, #2
 80031c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80031d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	095b      	lsrs	r3, r3, #5
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d104      	bne.n	80031f8 <HAL_RCC_OscConfig+0x5ec>
 80031ee:	4b01      	ldr	r3, [pc, #4]	; (80031f4 <HAL_RCC_OscConfig+0x5e8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	e015      	b.n	8003220 <HAL_RCC_OscConfig+0x614>
 80031f4:	40021000 	.word	0x40021000
 80031f8:	2302      	movs	r3, #2
 80031fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800320a:	2302      	movs	r3, #2
 800320c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003210:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003214:	fa93 f3a3 	rbit	r3, r3
 8003218:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800321c:	4bc8      	ldr	r3, [pc, #800]	; (8003540 <HAL_RCC_OscConfig+0x934>)
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2202      	movs	r2, #2
 8003222:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003226:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800322a:	fa92 f2a2 	rbit	r2, r2
 800322e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003232:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003236:	fab2 f282 	clz	r2, r2
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	f042 0220 	orr.w	r2, r2, #32
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	f002 021f 	and.w	r2, r2, #31
 8003246:	2101      	movs	r1, #1
 8003248:	fa01 f202 	lsl.w	r2, r1, r2
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1ad      	bne.n	80031ae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003256:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 8110 	beq.w	8003488 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d079      	beq.n	800336c <HAL_RCC_OscConfig+0x760>
 8003278:	2301      	movs	r3, #1
 800327a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800328a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328e:	fab3 f383 	clz	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	4bab      	ldr	r3, [pc, #684]	; (8003544 <HAL_RCC_OscConfig+0x938>)
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	461a      	mov	r2, r3
 800329e:	2301      	movs	r3, #1
 80032a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a2:	f7fe faaf 	bl	8001804 <HAL_GetTick>
 80032a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ac:	f7fe faaa 	bl	8001804 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d902      	bls.n	80032c2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	f000 bcdb 	b.w	8003c78 <HAL_RCC_OscConfig+0x106c>
 80032c2:	2302      	movs	r3, #2
 80032c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80032dc:	2202      	movs	r2, #2
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	fa93 f2a3 	rbit	r2, r3
 80032ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003300:	2202      	movs	r2, #2
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	fa93 f2a3 	rbit	r2, r3
 8003312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003316:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800331a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331c:	4b88      	ldr	r3, [pc, #544]	; (8003540 <HAL_RCC_OscConfig+0x934>)
 800331e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003324:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003328:	2102      	movs	r1, #2
 800332a:	6019      	str	r1, [r3, #0]
 800332c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003330:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	fa93 f1a3 	rbit	r1, r3
 800333a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003342:	6019      	str	r1, [r3, #0]
  return result;
 8003344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003348:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	2101      	movs	r1, #1
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0a0      	beq.n	80032ac <HAL_RCC_OscConfig+0x6a0>
 800336a:	e08d      	b.n	8003488 <HAL_RCC_OscConfig+0x87c>
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	fa93 f2a3 	rbit	r2, r3
 8003386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800338e:	601a      	str	r2, [r3, #0]
  return result;
 8003390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003394:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003398:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b68      	ldr	r3, [pc, #416]	; (8003544 <HAL_RCC_OscConfig+0x938>)
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	461a      	mov	r2, r3
 80033aa:	2300      	movs	r3, #0
 80033ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fe fa29 	bl	8001804 <HAL_GetTick>
 80033b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b8:	f7fe fa24 	bl	8001804 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d902      	bls.n	80033ce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	f000 bc55 	b.w	8003c78 <HAL_RCC_OscConfig+0x106c>
 80033ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80033d6:	2202      	movs	r2, #2
 80033d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	fa93 f2a3 	rbit	r2, r3
 80033e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80033fa:	2202      	movs	r2, #2
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003402:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	fa93 f2a3 	rbit	r2, r3
 800340c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003410:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800341e:	2202      	movs	r2, #2
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	fa93 f2a3 	rbit	r2, r3
 8003430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003434:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003438:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343a:	4b41      	ldr	r3, [pc, #260]	; (8003540 <HAL_RCC_OscConfig+0x934>)
 800343c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800343e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003442:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003446:	2102      	movs	r1, #2
 8003448:	6019      	str	r1, [r3, #0]
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	fa93 f1a3 	rbit	r1, r3
 8003458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003460:	6019      	str	r1, [r3, #0]
  return result;
 8003462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003466:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	fab3 f383 	clz	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	2101      	movs	r1, #1
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	4013      	ands	r3, r2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d197      	bne.n	80033b8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 81a1 	beq.w	80037e0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349e:	2300      	movs	r3, #0
 80034a0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a4:	4b26      	ldr	r3, [pc, #152]	; (8003540 <HAL_RCC_OscConfig+0x934>)
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d116      	bne.n	80034de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b0:	4b23      	ldr	r3, [pc, #140]	; (8003540 <HAL_RCC_OscConfig+0x934>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4a22      	ldr	r2, [pc, #136]	; (8003540 <HAL_RCC_OscConfig+0x934>)
 80034b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ba:	61d3      	str	r3, [r2, #28]
 80034bc:	4b20      	ldr	r3, [pc, #128]	; (8003540 <HAL_RCC_OscConfig+0x934>)
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80034c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80034d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034de:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <HAL_RCC_OscConfig+0x93c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d11a      	bne.n	8003520 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ea:	4b17      	ldr	r3, [pc, #92]	; (8003548 <HAL_RCC_OscConfig+0x93c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a16      	ldr	r2, [pc, #88]	; (8003548 <HAL_RCC_OscConfig+0x93c>)
 80034f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f6:	f7fe f985 	bl	8001804 <HAL_GetTick>
 80034fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fe:	e009      	b.n	8003514 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003500:	f7fe f980 	bl	8001804 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b64      	cmp	r3, #100	; 0x64
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e3b1      	b.n	8003c78 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <HAL_RCC_OscConfig+0x93c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ef      	beq.n	8003500 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003524:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d10d      	bne.n	800354c <HAL_RCC_OscConfig+0x940>
 8003530:	4b03      	ldr	r3, [pc, #12]	; (8003540 <HAL_RCC_OscConfig+0x934>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4a02      	ldr	r2, [pc, #8]	; (8003540 <HAL_RCC_OscConfig+0x934>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6213      	str	r3, [r2, #32]
 800353c:	e03c      	b.n	80035b8 <HAL_RCC_OscConfig+0x9ac>
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
 8003544:	10908120 	.word	0x10908120
 8003548:	40007000 	.word	0x40007000
 800354c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003550:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10c      	bne.n	8003576 <HAL_RCC_OscConfig+0x96a>
 800355c:	4bc1      	ldr	r3, [pc, #772]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4ac0      	ldr	r2, [pc, #768]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	6213      	str	r3, [r2, #32]
 8003568:	4bbe      	ldr	r3, [pc, #760]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	4abd      	ldr	r2, [pc, #756]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 800356e:	f023 0304 	bic.w	r3, r3, #4
 8003572:	6213      	str	r3, [r2, #32]
 8003574:	e020      	b.n	80035b8 <HAL_RCC_OscConfig+0x9ac>
 8003576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b05      	cmp	r3, #5
 8003584:	d10c      	bne.n	80035a0 <HAL_RCC_OscConfig+0x994>
 8003586:	4bb7      	ldr	r3, [pc, #732]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4ab6      	ldr	r2, [pc, #728]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 800358c:	f043 0304 	orr.w	r3, r3, #4
 8003590:	6213      	str	r3, [r2, #32]
 8003592:	4bb4      	ldr	r3, [pc, #720]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	4ab3      	ldr	r2, [pc, #716]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	6213      	str	r3, [r2, #32]
 800359e:	e00b      	b.n	80035b8 <HAL_RCC_OscConfig+0x9ac>
 80035a0:	4bb0      	ldr	r3, [pc, #704]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	4aaf      	ldr	r2, [pc, #700]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 80035a6:	f023 0301 	bic.w	r3, r3, #1
 80035aa:	6213      	str	r3, [r2, #32]
 80035ac:	4bad      	ldr	r3, [pc, #692]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	4aac      	ldr	r2, [pc, #688]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 80035b2:	f023 0304 	bic.w	r3, r3, #4
 80035b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8081 	beq.w	80036cc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ca:	f7fe f91b 	bl	8001804 <HAL_GetTick>
 80035ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d2:	e00b      	b.n	80035ec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fe f916 	bl	8001804 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e345      	b.n	8003c78 <HAL_RCC_OscConfig+0x106c>
 80035ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80035f4:	2202      	movs	r2, #2
 80035f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	fa93 f2a3 	rbit	r2, r3
 8003606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003614:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003618:	2202      	movs	r2, #2
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003620:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	fa93 f2a3 	rbit	r2, r3
 800362a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003632:	601a      	str	r2, [r3, #0]
  return result;
 8003634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003638:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800363c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	b2db      	uxtb	r3, r3
 8003648:	f043 0302 	orr.w	r3, r3, #2
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d102      	bne.n	8003658 <HAL_RCC_OscConfig+0xa4c>
 8003652:	4b84      	ldr	r3, [pc, #528]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	e013      	b.n	8003680 <HAL_RCC_OscConfig+0xa74>
 8003658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003660:	2202      	movs	r2, #2
 8003662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003668:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	fa93 f2a3 	rbit	r2, r3
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	4b79      	ldr	r3, [pc, #484]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003684:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003688:	2102      	movs	r1, #2
 800368a:	6011      	str	r1, [r2, #0]
 800368c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003690:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	fa92 f1a2 	rbit	r1, r2
 800369a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800369e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80036a2:	6011      	str	r1, [r2, #0]
  return result;
 80036a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036a8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80036ac:	6812      	ldr	r2, [r2, #0]
 80036ae:	fab2 f282 	clz	r2, r2
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	f002 021f 	and.w	r2, r2, #31
 80036be:	2101      	movs	r1, #1
 80036c0:	fa01 f202 	lsl.w	r2, r1, r2
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d084      	beq.n	80035d4 <HAL_RCC_OscConfig+0x9c8>
 80036ca:	e07f      	b.n	80037cc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036cc:	f7fe f89a 	bl	8001804 <HAL_GetTick>
 80036d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d4:	e00b      	b.n	80036ee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	f7fe f895 	bl	8001804 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e2c4      	b.n	8003c78 <HAL_RCC_OscConfig+0x106c>
 80036ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80036f6:	2202      	movs	r2, #2
 80036f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	fa93 f2a3 	rbit	r2, r3
 8003708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003716:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800371a:	2202      	movs	r2, #2
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003722:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	fa93 f2a3 	rbit	r2, r3
 800372c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003730:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003734:	601a      	str	r2, [r3, #0]
  return result;
 8003736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800373e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003740:	fab3 f383 	clz	r3, r3
 8003744:	b2db      	uxtb	r3, r3
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f043 0302 	orr.w	r3, r3, #2
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d102      	bne.n	800375a <HAL_RCC_OscConfig+0xb4e>
 8003754:	4b43      	ldr	r3, [pc, #268]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	e013      	b.n	8003782 <HAL_RCC_OscConfig+0xb76>
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003762:	2202      	movs	r2, #2
 8003764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	fa93 f2a3 	rbit	r2, r3
 8003774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003778:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	4b39      	ldr	r3, [pc, #228]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003786:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800378a:	2102      	movs	r1, #2
 800378c:	6011      	str	r1, [r2, #0]
 800378e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003792:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003796:	6812      	ldr	r2, [r2, #0]
 8003798:	fa92 f1a2 	rbit	r1, r2
 800379c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037a0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80037a4:	6011      	str	r1, [r2, #0]
  return result;
 80037a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037aa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	fab2 f282 	clz	r2, r2
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	f002 021f 	and.w	r2, r2, #31
 80037c0:	2101      	movs	r1, #1
 80037c2:	fa01 f202 	lsl.w	r2, r1, r2
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d184      	bne.n	80036d6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d105      	bne.n	80037e0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d4:	4b23      	ldr	r3, [pc, #140]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	4a22      	ldr	r2, [pc, #136]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 80037da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8242 	beq.w	8003c76 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f2:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <HAL_RCC_OscConfig+0xc58>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	f000 8213 	beq.w	8003c26 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003804:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	2b02      	cmp	r3, #2
 800380e:	f040 8162 	bne.w	8003ad6 <HAL_RCC_OscConfig+0xeca>
 8003812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003816:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800381a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800381e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003824:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	fa93 f2a3 	rbit	r2, r3
 800382e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003832:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003836:	601a      	str	r2, [r3, #0]
  return result;
 8003838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003840:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800384c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	461a      	mov	r2, r3
 8003854:	2300      	movs	r3, #0
 8003856:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fd ffd4 	bl	8001804 <HAL_GetTick>
 800385c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003860:	e00c      	b.n	800387c <HAL_RCC_OscConfig+0xc70>
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003868:	f7fd ffcc 	bl	8001804 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e1fd      	b.n	8003c78 <HAL_RCC_OscConfig+0x106c>
 800387c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003880:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003884:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	fa93 f2a3 	rbit	r2, r3
 8003898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80038a0:	601a      	str	r2, [r3, #0]
  return result;
 80038a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80038aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d102      	bne.n	80038c6 <HAL_RCC_OscConfig+0xcba>
 80038c0:	4bb0      	ldr	r3, [pc, #704]	; (8003b84 <HAL_RCC_OscConfig+0xf78>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	e027      	b.n	8003916 <HAL_RCC_OscConfig+0xd0a>
 80038c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	fa93 f2a3 	rbit	r2, r3
 80038e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80038f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	fa93 f2a3 	rbit	r2, r3
 8003908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	4b9c      	ldr	r3, [pc, #624]	; (8003b84 <HAL_RCC_OscConfig+0xf78>)
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800391a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800391e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003922:	6011      	str	r1, [r2, #0]
 8003924:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003928:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	fa92 f1a2 	rbit	r1, r2
 8003932:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003936:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800393a:	6011      	str	r1, [r2, #0]
  return result;
 800393c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003940:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	fab2 f282 	clz	r2, r2
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f042 0220 	orr.w	r2, r2, #32
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f002 021f 	and.w	r2, r2, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f202 	lsl.w	r2, r1, r2
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d182      	bne.n	8003868 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003962:	4b88      	ldr	r3, [pc, #544]	; (8003b84 <HAL_RCC_OscConfig+0xf78>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800396a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	430b      	orrs	r3, r1
 8003984:	497f      	ldr	r1, [pc, #508]	; (8003b84 <HAL_RCC_OscConfig+0xf78>)
 8003986:	4313      	orrs	r3, r2
 8003988:	604b      	str	r3, [r1, #4]
 800398a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003992:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	fa93 f2a3 	rbit	r2, r3
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80039ae:	601a      	str	r2, [r3, #0]
  return result;
 80039b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80039b8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	461a      	mov	r2, r3
 80039cc:	2301      	movs	r3, #1
 80039ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d0:	f7fd ff18 	bl	8001804 <HAL_GetTick>
 80039d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039d8:	e009      	b.n	80039ee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039da:	f7fd ff13 	bl	8001804 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e144      	b.n	8003c78 <HAL_RCC_OscConfig+0x106c>
 80039ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80039f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a00:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	fa93 f2a3 	rbit	r2, r3
 8003a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a0e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a12:	601a      	str	r2, [r3, #0]
  return result;
 8003a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a18:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a1e:	fab3 f383 	clz	r3, r3
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d102      	bne.n	8003a38 <HAL_RCC_OscConfig+0xe2c>
 8003a32:	4b54      	ldr	r3, [pc, #336]	; (8003b84 <HAL_RCC_OscConfig+0xf78>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	e027      	b.n	8003a88 <HAL_RCC_OscConfig+0xe7c>
 8003a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	fa93 f2a3 	rbit	r2, r3
 8003a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a58:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a62:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a70:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	fa93 f2a3 	rbit	r2, r3
 8003a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	4b3f      	ldr	r3, [pc, #252]	; (8003b84 <HAL_RCC_OscConfig+0xf78>)
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a8c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003a90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a94:	6011      	str	r1, [r2, #0]
 8003a96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a9a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	fa92 f1a2 	rbit	r1, r2
 8003aa4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aa8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003aac:	6011      	str	r1, [r2, #0]
  return result;
 8003aae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ab2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	fab2 f282 	clz	r2, r2
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	f042 0220 	orr.w	r2, r2, #32
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	f002 021f 	and.w	r2, r2, #31
 8003ac8:	2101      	movs	r1, #1
 8003aca:	fa01 f202 	lsl.w	r2, r1, r2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d082      	beq.n	80039da <HAL_RCC_OscConfig+0xdce>
 8003ad4:	e0cf      	b.n	8003c76 <HAL_RCC_OscConfig+0x106a>
 8003ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ada:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003ade:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	fa93 f2a3 	rbit	r2, r3
 8003af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003afa:	601a      	str	r2, [r3, #0]
  return result;
 8003afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003b04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b06:	fab3 f383 	clz	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	461a      	mov	r2, r3
 8003b18:	2300      	movs	r3, #0
 8003b1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fd fe72 	bl	8001804 <HAL_GetTick>
 8003b20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b24:	e009      	b.n	8003b3a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b26:	f7fd fe6d 	bl	8001804 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e09e      	b.n	8003c78 <HAL_RCC_OscConfig+0x106c>
 8003b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	fa93 f2a3 	rbit	r2, r3
 8003b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b5e:	601a      	str	r2, [r3, #0]
  return result;
 8003b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b64:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b6a:	fab3 f383 	clz	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d104      	bne.n	8003b88 <HAL_RCC_OscConfig+0xf7c>
 8003b7e:	4b01      	ldr	r3, [pc, #4]	; (8003b84 <HAL_RCC_OscConfig+0xf78>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	e029      	b.n	8003bd8 <HAL_RCC_OscConfig+0xfcc>
 8003b84:	40021000 	.word	0x40021000
 8003b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	fa93 f2a3 	rbit	r2, r3
 8003ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003bb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	fa93 f2a3 	rbit	r2, r3
 8003bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	4b2b      	ldr	r3, [pc, #172]	; (8003c84 <HAL_RCC_OscConfig+0x1078>)
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bdc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003be0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003be4:	6011      	str	r1, [r2, #0]
 8003be6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bea:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	fa92 f1a2 	rbit	r1, r2
 8003bf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bf8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003bfc:	6011      	str	r1, [r2, #0]
  return result;
 8003bfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c02:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	fab2 f282 	clz	r2, r2
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	f042 0220 	orr.w	r2, r2, #32
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	f002 021f 	and.w	r2, r2, #31
 8003c18:	2101      	movs	r1, #1
 8003c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d180      	bne.n	8003b26 <HAL_RCC_OscConfig+0xf1a>
 8003c24:	e027      	b.n	8003c76 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e01e      	b.n	8003c78 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <HAL_RCC_OscConfig+0x1078>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c46:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d10b      	bne.n	8003c72 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003c5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d001      	beq.n	8003c76 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40021000 	.word	0x40021000

08003c88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b09e      	sub	sp, #120	; 0x78
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e162      	b.n	8003f66 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b90      	ldr	r3, [pc, #576]	; (8003ee4 <HAL_RCC_ClockConfig+0x25c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d910      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b8d      	ldr	r3, [pc, #564]	; (8003ee4 <HAL_RCC_ClockConfig+0x25c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 0207 	bic.w	r2, r3, #7
 8003cb6:	498b      	ldr	r1, [pc, #556]	; (8003ee4 <HAL_RCC_ClockConfig+0x25c>)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b89      	ldr	r3, [pc, #548]	; (8003ee4 <HAL_RCC_ClockConfig+0x25c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e14a      	b.n	8003f66 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cdc:	4b82      	ldr	r3, [pc, #520]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	497f      	ldr	r1, [pc, #508]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 80dc 	beq.w	8003eb4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d13c      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xf6>
 8003d04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d08:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d0c:	fa93 f3a3 	rbit	r3, r3
 8003d10:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d14:	fab3 f383 	clz	r3, r3
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d102      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xa6>
 8003d28:	4b6f      	ldr	r3, [pc, #444]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	e00f      	b.n	8003d4e <HAL_RCC_ClockConfig+0xc6>
 8003d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d36:	fa93 f3a3 	rbit	r3, r3
 8003d3a:	667b      	str	r3, [r7, #100]	; 0x64
 8003d3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d40:	663b      	str	r3, [r7, #96]	; 0x60
 8003d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d44:	fa93 f3a3 	rbit	r3, r3
 8003d48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d4a:	4b67      	ldr	r3, [pc, #412]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d52:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d56:	fa92 f2a2 	rbit	r2, r2
 8003d5a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003d5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d5e:	fab2 f282 	clz	r2, r2
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	f042 0220 	orr.w	r2, r2, #32
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	f002 021f 	and.w	r2, r2, #31
 8003d6e:	2101      	movs	r1, #1
 8003d70:	fa01 f202 	lsl.w	r2, r1, r2
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d17b      	bne.n	8003e72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e0f3      	b.n	8003f66 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d13c      	bne.n	8003e00 <HAL_RCC_ClockConfig+0x178>
 8003d86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d96:	fab3 f383 	clz	r3, r3
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d102      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x128>
 8003daa:	4b4f      	ldr	r3, [pc, #316]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	e00f      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x148>
 8003db0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003db4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db8:	fa93 f3a3 	rbit	r3, r3
 8003dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8003dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dc2:	643b      	str	r3, [r7, #64]	; 0x40
 8003dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dcc:	4b46      	ldr	r3, [pc, #280]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dd4:	63ba      	str	r2, [r7, #56]	; 0x38
 8003dd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dd8:	fa92 f2a2 	rbit	r2, r2
 8003ddc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003de0:	fab2 f282 	clz	r2, r2
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	f042 0220 	orr.w	r2, r2, #32
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	f002 021f 	and.w	r2, r2, #31
 8003df0:	2101      	movs	r1, #1
 8003df2:	fa01 f202 	lsl.w	r2, r1, r2
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d13a      	bne.n	8003e72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0b2      	b.n	8003f66 <HAL_RCC_ClockConfig+0x2de>
 8003e00:	2302      	movs	r3, #2
 8003e02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	fa93 f3a3 	rbit	r3, r3
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d102      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x1a0>
 8003e22:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	e00d      	b.n	8003e44 <HAL_RCC_ClockConfig+0x1bc>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2e:	fa93 f3a3 	rbit	r3, r3
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
 8003e34:	2302      	movs	r3, #2
 8003e36:	623b      	str	r3, [r7, #32]
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	2202      	movs	r2, #2
 8003e46:	61ba      	str	r2, [r7, #24]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	fa92 f2a2 	rbit	r2, r2
 8003e4e:	617a      	str	r2, [r7, #20]
  return result;
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	fab2 f282 	clz	r2, r2
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	f042 0220 	orr.w	r2, r2, #32
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	f002 021f 	and.w	r2, r2, #31
 8003e62:	2101      	movs	r1, #1
 8003e64:	fa01 f202 	lsl.w	r2, r1, r2
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e079      	b.n	8003f66 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e72:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f023 0203 	bic.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	491a      	ldr	r1, [pc, #104]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e84:	f7fd fcbe 	bl	8001804 <HAL_GetTick>
 8003e88:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8c:	f7fd fcba 	bl	8001804 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e061      	b.n	8003f66 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f003 020c 	and.w	r2, r3, #12
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d1eb      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_RCC_ClockConfig+0x25c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d214      	bcs.n	8003eec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <HAL_RCC_ClockConfig+0x25c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 0207 	bic.w	r2, r3, #7
 8003eca:	4906      	ldr	r1, [pc, #24]	; (8003ee4 <HAL_RCC_ClockConfig+0x25c>)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <HAL_RCC_ClockConfig+0x25c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d005      	beq.n	8003eec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e040      	b.n	8003f66 <HAL_RCC_ClockConfig+0x2de>
 8003ee4:	40022000 	.word	0x40022000
 8003ee8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_RCC_ClockConfig+0x2e8>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	491a      	ldr	r1, [pc, #104]	; (8003f70 <HAL_RCC_ClockConfig+0x2e8>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f16:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <HAL_RCC_ClockConfig+0x2e8>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4912      	ldr	r1, [pc, #72]	; (8003f70 <HAL_RCC_ClockConfig+0x2e8>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f2a:	f000 f829 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8003f2e:	4601      	mov	r1, r0
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <HAL_RCC_ClockConfig+0x2e8>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f38:	22f0      	movs	r2, #240	; 0xf0
 8003f3a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	fa92 f2a2 	rbit	r2, r2
 8003f42:	60fa      	str	r2, [r7, #12]
  return result;
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	fab2 f282 	clz	r2, r2
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	40d3      	lsrs	r3, r2
 8003f4e:	4a09      	ldr	r2, [pc, #36]	; (8003f74 <HAL_RCC_ClockConfig+0x2ec>)
 8003f50:	5cd3      	ldrb	r3, [r2, r3]
 8003f52:	fa21 f303 	lsr.w	r3, r1, r3
 8003f56:	4a08      	ldr	r2, [pc, #32]	; (8003f78 <HAL_RCC_ClockConfig+0x2f0>)
 8003f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f5a:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <HAL_RCC_ClockConfig+0x2f4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fd fc0c 	bl	800177c <HAL_InitTick>
  
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3778      	adds	r7, #120	; 0x78
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40021000 	.word	0x40021000
 8003f74:	0800851c 	.word	0x0800851c
 8003f78:	20000000 	.word	0x20000000
 8003f7c:	20000004 	.word	0x20000004

08003f80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	2300      	movs	r3, #0
 8003f94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d002      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x30>
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d003      	beq.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x36>
 8003fae:	e026      	b.n	8003ffe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fb0:	4b19      	ldr	r3, [pc, #100]	; (8004018 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fb2:	613b      	str	r3, [r7, #16]
      break;
 8003fb4:	e026      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	0c9b      	lsrs	r3, r3, #18
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	4a17      	ldr	r2, [pc, #92]	; (800401c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fc0:	5cd3      	ldrb	r3, [r2, r3]
 8003fc2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003fc4:	4b13      	ldr	r3, [pc, #76]	; (8004014 <HAL_RCC_GetSysClockFreq+0x94>)
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	4a14      	ldr	r2, [pc, #80]	; (8004020 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fce:	5cd3      	ldrb	r3, [r2, r3]
 8003fd0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003fdc:	4a0e      	ldr	r2, [pc, #56]	; (8004018 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	fb02 f303 	mul.w	r3, r2, r3
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	e004      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a0c      	ldr	r2, [pc, #48]	; (8004024 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ff2:	fb02 f303 	mul.w	r3, r2, r3
 8003ff6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	613b      	str	r3, [r7, #16]
      break;
 8003ffc:	e002      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_RCC_GetSysClockFreq+0x98>)
 8004000:	613b      	str	r3, [r7, #16]
      break;
 8004002:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004004:	693b      	ldr	r3, [r7, #16]
}
 8004006:	4618      	mov	r0, r3
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000
 8004018:	007a1200 	.word	0x007a1200
 800401c:	08008534 	.word	0x08008534
 8004020:	08008544 	.word	0x08008544
 8004024:	003d0900 	.word	0x003d0900

08004028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <HAL_RCC_GetHCLKFreq+0x14>)
 800402e:	681b      	ldr	r3, [r3, #0]
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000000 	.word	0x20000000

08004040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004046:	f7ff ffef 	bl	8004028 <HAL_RCC_GetHCLKFreq>
 800404a:	4601      	mov	r1, r0
 800404c:	4b0b      	ldr	r3, [pc, #44]	; (800407c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004054:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004058:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	fa92 f2a2 	rbit	r2, r2
 8004060:	603a      	str	r2, [r7, #0]
  return result;
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	fab2 f282 	clz	r2, r2
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	40d3      	lsrs	r3, r2
 800406c:	4a04      	ldr	r2, [pc, #16]	; (8004080 <HAL_RCC_GetPCLK1Freq+0x40>)
 800406e:	5cd3      	ldrb	r3, [r2, r3]
 8004070:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40021000 	.word	0x40021000
 8004080:	0800852c 	.word	0x0800852c

08004084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800408a:	f7ff ffcd 	bl	8004028 <HAL_RCC_GetHCLKFreq>
 800408e:	4601      	mov	r1, r0
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004098:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800409c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	fa92 f2a2 	rbit	r2, r2
 80040a4:	603a      	str	r2, [r7, #0]
  return result;
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	fab2 f282 	clz	r2, r2
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	40d3      	lsrs	r3, r2
 80040b0:	4a04      	ldr	r2, [pc, #16]	; (80040c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80040b2:	5cd3      	ldrb	r3, [r2, r3]
 80040b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021000 	.word	0x40021000
 80040c4:	0800852c 	.word	0x0800852c

080040c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b092      	sub	sp, #72	; 0x48
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80040d8:	2300      	movs	r3, #0
 80040da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 80cd 	beq.w	8004286 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ec:	4b86      	ldr	r3, [pc, #536]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10e      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f8:	4b83      	ldr	r3, [pc, #524]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	4a82      	ldr	r2, [pc, #520]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004102:	61d3      	str	r3, [r2, #28]
 8004104:	4b80      	ldr	r3, [pc, #512]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004116:	4b7d      	ldr	r3, [pc, #500]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411e:	2b00      	cmp	r3, #0
 8004120:	d118      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004122:	4b7a      	ldr	r3, [pc, #488]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a79      	ldr	r2, [pc, #484]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800412e:	f7fd fb69 	bl	8001804 <HAL_GetTick>
 8004132:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004134:	e008      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004136:	f7fd fb65 	bl	8001804 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b64      	cmp	r3, #100	; 0x64
 8004142:	d901      	bls.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e0db      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004148:	4b70      	ldr	r3, [pc, #448]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004154:	4b6c      	ldr	r3, [pc, #432]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800415c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d07d      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800416e:	429a      	cmp	r2, r3
 8004170:	d076      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004172:	4b65      	ldr	r3, [pc, #404]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800417c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004180:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	fa93 f3a3 	rbit	r3, r3
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800418c:	fab3 f383 	clz	r3, r3
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	4b5e      	ldr	r3, [pc, #376]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	461a      	mov	r2, r3
 800419c:	2301      	movs	r3, #1
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	fa93 f3a3 	rbit	r3, r3
 80041ac:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041b0:	fab3 f383 	clz	r3, r3
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b55      	ldr	r3, [pc, #340]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	461a      	mov	r2, r3
 80041c0:	2300      	movs	r3, #0
 80041c2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041c4:	4a50      	ldr	r2, [pc, #320]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d045      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fd fb16 	bl	8001804 <HAL_GetTick>
 80041d8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041da:	e00a      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041dc:	f7fd fb12 	bl	8001804 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e086      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80041f2:	2302      	movs	r3, #2
 80041f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
 80041fe:	2302      	movs	r3, #2
 8004200:	623b      	str	r3, [r7, #32]
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	fa93 f3a3 	rbit	r3, r3
 8004208:	61fb      	str	r3, [r7, #28]
  return result;
 800420a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420c:	fab3 f383 	clz	r3, r3
 8004210:	b2db      	uxtb	r3, r3
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	b2db      	uxtb	r3, r3
 8004216:	f043 0302 	orr.w	r3, r3, #2
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d102      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004220:	4b39      	ldr	r3, [pc, #228]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	e007      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004226:	2302      	movs	r3, #2
 8004228:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	fa93 f3a3 	rbit	r3, r3
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	4b35      	ldr	r3, [pc, #212]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	2202      	movs	r2, #2
 8004238:	613a      	str	r2, [r7, #16]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	fa92 f2a2 	rbit	r2, r2
 8004240:	60fa      	str	r2, [r7, #12]
  return result;
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	fab2 f282 	clz	r2, r2
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	f002 021f 	and.w	r2, r2, #31
 8004254:	2101      	movs	r1, #1
 8004256:	fa01 f202 	lsl.w	r2, r1, r2
 800425a:	4013      	ands	r3, r2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0bd      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004260:	4b29      	ldr	r3, [pc, #164]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4926      	ldr	r1, [pc, #152]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800426e:	4313      	orrs	r3, r2
 8004270:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004272:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004276:	2b01      	cmp	r3, #1
 8004278:	d105      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427a:	4b23      	ldr	r3, [pc, #140]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	4a22      	ldr	r2, [pc, #136]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004284:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004292:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	f023 0203 	bic.w	r2, r3, #3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	491a      	ldr	r1, [pc, #104]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042b0:	4b15      	ldr	r3, [pc, #84]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	f023 0210 	bic.w	r2, r3, #16
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4912      	ldr	r1, [pc, #72]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d008      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042ce:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	490b      	ldr	r1, [pc, #44]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	4903      	ldr	r1, [pc, #12]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3748      	adds	r7, #72	; 0x48
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40021000 	.word	0x40021000
 800430c:	40007000 	.word	0x40007000
 8004310:	10908100 	.word	0x10908100

08004314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e040      	b.n	80043a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fd f888 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2224      	movs	r2, #36	; 0x24
 8004340:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0201 	bic.w	r2, r2, #1
 8004350:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fd32 	bl	8004dc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fbf9 	bl	8004b58 <UART_SetConfig>
 8004366:	4603      	mov	r3, r0
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e01b      	b.n	80043a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800437e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800438e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0201 	orr.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fdb1 	bl	8004f08 <UART_CheckIdleState>
 80043a6:	4603      	mov	r3, r0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	4613      	mov	r3, r2
 80043be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d178      	bne.n	80044ba <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <HAL_UART_Transmit+0x24>
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e071      	b.n	80044bc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2221      	movs	r2, #33	; 0x21
 80043e4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043e6:	f7fd fa0d 	bl	8001804 <HAL_GetTick>
 80043ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	88fa      	ldrh	r2, [r7, #6]
 80043f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004404:	d108      	bne.n	8004418 <HAL_UART_Transmit+0x68>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d104      	bne.n	8004418 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	e003      	b.n	8004420 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800441c:	2300      	movs	r3, #0
 800441e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004420:	e030      	b.n	8004484 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2200      	movs	r2, #0
 800442a:	2180      	movs	r1, #128	; 0x80
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 fe13 	bl	8005058 <UART_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e03c      	b.n	80044bc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10b      	bne.n	8004460 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	881a      	ldrh	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004454:	b292      	uxth	r2, r2
 8004456:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	3302      	adds	r3, #2
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	e008      	b.n	8004472 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	781a      	ldrb	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	b292      	uxth	r2, r2
 800446a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	3301      	adds	r3, #1
 8004470:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1c8      	bne.n	8004422 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	2200      	movs	r2, #0
 8004498:	2140      	movs	r1, #64	; 0x40
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 fddc 	bl	8005058 <UART_WaitOnFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d004      	beq.n	80044b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e005      	b.n	80044bc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e000      	b.n	80044bc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
  }
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3720      	adds	r7, #32
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	; 0x28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d132      	bne.n	8004542 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_UART_Receive_IT+0x24>
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e02b      	b.n	8004544 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d018      	beq.n	8004532 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	613b      	str	r3, [r7, #16]
   return(result);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	623b      	str	r3, [r7, #32]
 8004520:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	69f9      	ldr	r1, [r7, #28]
 8004524:	6a3a      	ldr	r2, [r7, #32]
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	61bb      	str	r3, [r7, #24]
   return(result);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e6      	bne.n	8004500 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	461a      	mov	r2, r3
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 fdfb 	bl	8005134 <UART_Start_Receive_IT>
 800453e:	4603      	mov	r3, r0
 8004540:	e000      	b.n	8004544 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3728      	adds	r7, #40	; 0x28
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b0ba      	sub	sp, #232	; 0xe8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004572:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004576:	f640 030f 	movw	r3, #2063	; 0x80f
 800457a:	4013      	ands	r3, r2
 800457c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d115      	bne.n	80045b4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00f      	beq.n	80045b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d009      	beq.n	80045b4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 82ab 	beq.w	8004b00 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	4798      	blx	r3
      }
      return;
 80045b2:	e2a5      	b.n	8004b00 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8117 	beq.w	80047ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80045ce:	4b85      	ldr	r3, [pc, #532]	; (80047e4 <HAL_UART_IRQHandler+0x298>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 810a 	beq.w	80047ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d011      	beq.n	8004608 <HAL_UART_IRQHandler+0xbc>
 80045e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00b      	beq.n	8004608 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2201      	movs	r2, #1
 80045f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fe:	f043 0201 	orr.w	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d011      	beq.n	8004638 <HAL_UART_IRQHandler+0xec>
 8004614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00b      	beq.n	8004638 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2202      	movs	r2, #2
 8004626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800462e:	f043 0204 	orr.w	r2, r3, #4
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d011      	beq.n	8004668 <HAL_UART_IRQHandler+0x11c>
 8004644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00b      	beq.n	8004668 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2204      	movs	r2, #4
 8004656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465e:	f043 0202 	orr.w	r2, r3, #2
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d017      	beq.n	80046a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d105      	bne.n	800468c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004684:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00b      	beq.n	80046a4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2208      	movs	r2, #8
 8004692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800469a:	f043 0208 	orr.w	r2, r3, #8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d012      	beq.n	80046d6 <HAL_UART_IRQHandler+0x18a>
 80046b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00c      	beq.n	80046d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046cc:	f043 0220 	orr.w	r2, r3, #32
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8211 	beq.w	8004b04 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00d      	beq.n	800470a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004710:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471e:	2b40      	cmp	r3, #64	; 0x40
 8004720:	d005      	beq.n	800472e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004726:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800472a:	2b00      	cmp	r3, #0
 800472c:	d04f      	beq.n	80047ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fdc6 	bl	80052c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473e:	2b40      	cmp	r3, #64	; 0x40
 8004740:	d141      	bne.n	80047c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3308      	adds	r3, #8
 8004748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800475c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3308      	adds	r3, #8
 800476a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800476e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800477a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1d9      	bne.n	8004742 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004792:	2b00      	cmp	r3, #0
 8004794:	d013      	beq.n	80047be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800479a:	4a13      	ldr	r2, [pc, #76]	; (80047e8 <HAL_UART_IRQHandler+0x29c>)
 800479c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fd f9ad 	bl	8001b02 <HAL_DMA_Abort_IT>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d017      	beq.n	80047de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047b8:	4610      	mov	r0, r2
 80047ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047bc:	e00f      	b.n	80047de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f9b4 	bl	8004b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c4:	e00b      	b.n	80047de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f9b0 	bl	8004b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047cc:	e007      	b.n	80047de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f9ac 	bl	8004b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80047dc:	e192      	b.n	8004b04 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047de:	bf00      	nop
    return;
 80047e0:	e190      	b.n	8004b04 <HAL_UART_IRQHandler+0x5b8>
 80047e2:	bf00      	nop
 80047e4:	04000120 	.word	0x04000120
 80047e8:	08005389 	.word	0x08005389

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	f040 814b 	bne.w	8004a8c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 8144 	beq.w	8004a8c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 813d 	beq.w	8004a8c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2210      	movs	r2, #16
 8004818:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004824:	2b40      	cmp	r3, #64	; 0x40
 8004826:	f040 80b5 	bne.w	8004994 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004836:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 8164 	beq.w	8004b08 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800484a:	429a      	cmp	r2, r3
 800484c:	f080 815c 	bcs.w	8004b08 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004856:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b20      	cmp	r3, #32
 8004862:	f000 8086 	beq.w	8004972 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800487a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800487e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004882:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004894:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004898:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800489c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1da      	bne.n	8004866 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3308      	adds	r3, #8
 80048b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3308      	adds	r3, #8
 80048d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048d4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e1      	bne.n	80048b0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3308      	adds	r3, #8
 80048f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004902:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3308      	adds	r3, #8
 800490c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004910:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004912:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004916:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800491e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e3      	bne.n	80048ec <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004942:	f023 0310 	bic.w	r3, r3, #16
 8004946:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004954:	65bb      	str	r3, [r7, #88]	; 0x58
 8004956:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800495a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800495c:	e841 2300 	strex	r3, r2, [r1]
 8004960:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e4      	bne.n	8004932 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496c:	4618      	mov	r0, r3
 800496e:	f7fd f88a 	bl	8001a86 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004984:	b29b      	uxth	r3, r3
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	b29b      	uxth	r3, r3
 800498a:	4619      	mov	r1, r3
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f8d7 	bl	8004b40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004992:	e0b9      	b.n	8004b08 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80ab 	beq.w	8004b0c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80049b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 80a6 	beq.w	8004b0c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049e2:	647b      	str	r3, [r7, #68]	; 0x44
 80049e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e4      	bne.n	80049c0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3308      	adds	r3, #8
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	623b      	str	r3, [r7, #32]
   return(result);
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	f023 0301 	bic.w	r3, r3, #1
 8004a0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3308      	adds	r3, #8
 8004a16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a1a:	633a      	str	r2, [r7, #48]	; 0x30
 8004a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e3      	bne.n	80049f6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0310 	bic.w	r3, r3, #16
 8004a56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	69b9      	ldr	r1, [r7, #24]
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	617b      	str	r3, [r7, #20]
   return(result);
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e4      	bne.n	8004a42 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a82:	4619      	mov	r1, r3
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f85b 	bl	8004b40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a8a:	e03f      	b.n	8004b0c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00e      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x56a>
 8004a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004aac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fe52 	bl	8005758 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ab4:	e02d      	b.n	8004b12 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00e      	beq.n	8004ae0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d01c      	beq.n	8004b10 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	4798      	blx	r3
    }
    return;
 8004ade:	e017      	b.n	8004b10 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d012      	beq.n	8004b12 <HAL_UART_IRQHandler+0x5c6>
 8004aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00c      	beq.n	8004b12 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fc5b 	bl	80053b4 <UART_EndTransmit_IT>
    return;
 8004afe:	e008      	b.n	8004b12 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004b00:	bf00      	nop
 8004b02:	e006      	b.n	8004b12 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004b04:	bf00      	nop
 8004b06:	e004      	b.n	8004b12 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004b08:	bf00      	nop
 8004b0a:	e002      	b.n	8004b12 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004b0c:	bf00      	nop
 8004b0e:	e000      	b.n	8004b12 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004b10:	bf00      	nop
  }

}
 8004b12:	37e8      	adds	r7, #232	; 0xe8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b8a      	ldr	r3, [pc, #552]	; (8004dac <UART_SetConfig+0x254>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	6979      	ldr	r1, [r7, #20]
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a78      	ldr	r2, [pc, #480]	; (8004db0 <UART_SetConfig+0x258>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d120      	bne.n	8004c16 <UART_SetConfig+0xbe>
 8004bd4:	4b77      	ldr	r3, [pc, #476]	; (8004db4 <UART_SetConfig+0x25c>)
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d817      	bhi.n	8004c10 <UART_SetConfig+0xb8>
 8004be0:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <UART_SetConfig+0x90>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004bf9 	.word	0x08004bf9
 8004bec:	08004c05 	.word	0x08004c05
 8004bf0:	08004c0b 	.word	0x08004c0b
 8004bf4:	08004bff 	.word	0x08004bff
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e01d      	b.n	8004c3a <UART_SetConfig+0xe2>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	77fb      	strb	r3, [r7, #31]
 8004c02:	e01a      	b.n	8004c3a <UART_SetConfig+0xe2>
 8004c04:	2304      	movs	r3, #4
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	e017      	b.n	8004c3a <UART_SetConfig+0xe2>
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	77fb      	strb	r3, [r7, #31]
 8004c0e:	e014      	b.n	8004c3a <UART_SetConfig+0xe2>
 8004c10:	2310      	movs	r3, #16
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e011      	b.n	8004c3a <UART_SetConfig+0xe2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a67      	ldr	r2, [pc, #412]	; (8004db8 <UART_SetConfig+0x260>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d102      	bne.n	8004c26 <UART_SetConfig+0xce>
 8004c20:	2300      	movs	r3, #0
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e009      	b.n	8004c3a <UART_SetConfig+0xe2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a64      	ldr	r2, [pc, #400]	; (8004dbc <UART_SetConfig+0x264>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d102      	bne.n	8004c36 <UART_SetConfig+0xde>
 8004c30:	2300      	movs	r3, #0
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e001      	b.n	8004c3a <UART_SetConfig+0xe2>
 8004c36:	2310      	movs	r3, #16
 8004c38:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c42:	d15a      	bne.n	8004cfa <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004c44:	7ffb      	ldrb	r3, [r7, #31]
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d827      	bhi.n	8004c9a <UART_SetConfig+0x142>
 8004c4a:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <UART_SetConfig+0xf8>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004c75 	.word	0x08004c75
 8004c54:	08004c7d 	.word	0x08004c7d
 8004c58:	08004c85 	.word	0x08004c85
 8004c5c:	08004c9b 	.word	0x08004c9b
 8004c60:	08004c8b 	.word	0x08004c8b
 8004c64:	08004c9b 	.word	0x08004c9b
 8004c68:	08004c9b 	.word	0x08004c9b
 8004c6c:	08004c9b 	.word	0x08004c9b
 8004c70:	08004c93 	.word	0x08004c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c74:	f7ff f9e4 	bl	8004040 <HAL_RCC_GetPCLK1Freq>
 8004c78:	61b8      	str	r0, [r7, #24]
        break;
 8004c7a:	e013      	b.n	8004ca4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c7c:	f7ff fa02 	bl	8004084 <HAL_RCC_GetPCLK2Freq>
 8004c80:	61b8      	str	r0, [r7, #24]
        break;
 8004c82:	e00f      	b.n	8004ca4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c84:	4b4e      	ldr	r3, [pc, #312]	; (8004dc0 <UART_SetConfig+0x268>)
 8004c86:	61bb      	str	r3, [r7, #24]
        break;
 8004c88:	e00c      	b.n	8004ca4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c8a:	f7ff f979 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8004c8e:	61b8      	str	r0, [r7, #24]
        break;
 8004c90:	e008      	b.n	8004ca4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c96:	61bb      	str	r3, [r7, #24]
        break;
 8004c98:	e004      	b.n	8004ca4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	77bb      	strb	r3, [r7, #30]
        break;
 8004ca2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d074      	beq.n	8004d94 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	005a      	lsls	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	085b      	lsrs	r3, r3, #1
 8004cb4:	441a      	add	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b0f      	cmp	r3, #15
 8004cc4:	d916      	bls.n	8004cf4 <UART_SetConfig+0x19c>
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ccc:	d212      	bcs.n	8004cf4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f023 030f 	bic.w	r3, r3, #15
 8004cd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	085b      	lsrs	r3, r3, #1
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	89fb      	ldrh	r3, [r7, #14]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	89fa      	ldrh	r2, [r7, #14]
 8004cf0:	60da      	str	r2, [r3, #12]
 8004cf2:	e04f      	b.n	8004d94 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	77bb      	strb	r3, [r7, #30]
 8004cf8:	e04c      	b.n	8004d94 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cfa:	7ffb      	ldrb	r3, [r7, #31]
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d828      	bhi.n	8004d52 <UART_SetConfig+0x1fa>
 8004d00:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <UART_SetConfig+0x1b0>)
 8004d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d06:	bf00      	nop
 8004d08:	08004d2d 	.word	0x08004d2d
 8004d0c:	08004d35 	.word	0x08004d35
 8004d10:	08004d3d 	.word	0x08004d3d
 8004d14:	08004d53 	.word	0x08004d53
 8004d18:	08004d43 	.word	0x08004d43
 8004d1c:	08004d53 	.word	0x08004d53
 8004d20:	08004d53 	.word	0x08004d53
 8004d24:	08004d53 	.word	0x08004d53
 8004d28:	08004d4b 	.word	0x08004d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d2c:	f7ff f988 	bl	8004040 <HAL_RCC_GetPCLK1Freq>
 8004d30:	61b8      	str	r0, [r7, #24]
        break;
 8004d32:	e013      	b.n	8004d5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d34:	f7ff f9a6 	bl	8004084 <HAL_RCC_GetPCLK2Freq>
 8004d38:	61b8      	str	r0, [r7, #24]
        break;
 8004d3a:	e00f      	b.n	8004d5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d3c:	4b20      	ldr	r3, [pc, #128]	; (8004dc0 <UART_SetConfig+0x268>)
 8004d3e:	61bb      	str	r3, [r7, #24]
        break;
 8004d40:	e00c      	b.n	8004d5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d42:	f7ff f91d 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8004d46:	61b8      	str	r0, [r7, #24]
        break;
 8004d48:	e008      	b.n	8004d5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d4e:	61bb      	str	r3, [r7, #24]
        break;
 8004d50:	e004      	b.n	8004d5c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	77bb      	strb	r3, [r7, #30]
        break;
 8004d5a:	bf00      	nop
    }

    if (pclk != 0U)
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d018      	beq.n	8004d94 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	085a      	lsrs	r2, r3, #1
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	441a      	add	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b0f      	cmp	r3, #15
 8004d7a:	d909      	bls.n	8004d90 <UART_SetConfig+0x238>
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d82:	d205      	bcs.n	8004d90 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60da      	str	r2, [r3, #12]
 8004d8e:	e001      	b.n	8004d94 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004da0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3720      	adds	r7, #32
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	efff69f3 	.word	0xefff69f3
 8004db0:	40013800 	.word	0x40013800
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40004400 	.word	0x40004400
 8004dbc:	40004800 	.word	0x40004800
 8004dc0:	007a1200 	.word	0x007a1200

08004dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d01a      	beq.n	8004eda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec2:	d10a      	bne.n	8004eda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
  }
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b098      	sub	sp, #96	; 0x60
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f18:	f7fc fc74 	bl	8001804 <HAL_GetTick>
 8004f1c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d12e      	bne.n	8004f8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f34:	2200      	movs	r2, #0
 8004f36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f88c 	bl	8005058 <UART_WaitOnFlagUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d021      	beq.n	8004f8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4e:	e853 3f00 	ldrex	r3, [r3]
 8004f52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f64:	647b      	str	r3, [r7, #68]	; 0x44
 8004f66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f6c:	e841 2300 	strex	r3, r2, [r1]
 8004f70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e6      	bne.n	8004f46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e062      	b.n	8005050 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d149      	bne.n	800502c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f856 	bl	8005058 <UART_WaitOnFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d03c      	beq.n	800502c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	623b      	str	r3, [r7, #32]
   return(result);
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8004fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e6      	bne.n	8004fb2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3308      	adds	r3, #8
 8004fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	e853 3f00 	ldrex	r3, [r3]
 8004ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0301 	bic.w	r3, r3, #1
 8004ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3308      	adds	r3, #8
 8005002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005004:	61fa      	str	r2, [r7, #28]
 8005006:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005008:	69b9      	ldr	r1, [r7, #24]
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	e841 2300 	strex	r3, r2, [r1]
 8005010:	617b      	str	r3, [r7, #20]
   return(result);
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1e5      	bne.n	8004fe4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e011      	b.n	8005050 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3758      	adds	r7, #88	; 0x58
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	4613      	mov	r3, r2
 8005066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005068:	e04f      	b.n	800510a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005070:	d04b      	beq.n	800510a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005072:	f7fc fbc7 	bl	8001804 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	429a      	cmp	r2, r3
 8005080:	d302      	bcc.n	8005088 <UART_WaitOnFlagUntilTimeout+0x30>
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e04e      	b.n	800512a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	2b00      	cmp	r3, #0
 8005098:	d037      	beq.n	800510a <UART_WaitOnFlagUntilTimeout+0xb2>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b80      	cmp	r3, #128	; 0x80
 800509e:	d034      	beq.n	800510a <UART_WaitOnFlagUntilTimeout+0xb2>
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d031      	beq.n	800510a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d110      	bne.n	80050d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2208      	movs	r2, #8
 80050ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f8ff 	bl	80052c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2208      	movs	r2, #8
 80050c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e029      	b.n	800512a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e4:	d111      	bne.n	800510a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 f8e5 	bl	80052c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e00f      	b.n	800512a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4013      	ands	r3, r2
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	429a      	cmp	r2, r3
 8005118:	bf0c      	ite	eq
 800511a:	2301      	moveq	r3, #1
 800511c:	2300      	movne	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	429a      	cmp	r2, r3
 8005126:	d0a0      	beq.n	800506a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005134:	b480      	push	{r7}
 8005136:	b097      	sub	sp, #92	; 0x5c
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	4613      	mov	r3, r2
 8005140:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	88fa      	ldrh	r2, [r7, #6]
 800514c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	88fa      	ldrh	r2, [r7, #6]
 8005154:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005166:	d10e      	bne.n	8005186 <UART_Start_Receive_IT+0x52>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d105      	bne.n	800517c <UART_Start_Receive_IT+0x48>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005176:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800517a:	e02d      	b.n	80051d8 <UART_Start_Receive_IT+0xa4>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	22ff      	movs	r2, #255	; 0xff
 8005180:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005184:	e028      	b.n	80051d8 <UART_Start_Receive_IT+0xa4>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10d      	bne.n	80051aa <UART_Start_Receive_IT+0x76>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d104      	bne.n	80051a0 <UART_Start_Receive_IT+0x6c>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	22ff      	movs	r2, #255	; 0xff
 800519a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800519e:	e01b      	b.n	80051d8 <UART_Start_Receive_IT+0xa4>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	227f      	movs	r2, #127	; 0x7f
 80051a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051a8:	e016      	b.n	80051d8 <UART_Start_Receive_IT+0xa4>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051b2:	d10d      	bne.n	80051d0 <UART_Start_Receive_IT+0x9c>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d104      	bne.n	80051c6 <UART_Start_Receive_IT+0x92>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	227f      	movs	r2, #127	; 0x7f
 80051c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051c4:	e008      	b.n	80051d8 <UART_Start_Receive_IT+0xa4>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	223f      	movs	r2, #63	; 0x3f
 80051ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051ce:	e003      	b.n	80051d8 <UART_Start_Receive_IT+0xa4>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2222      	movs	r2, #34	; 0x22
 80051e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3308      	adds	r3, #8
 80051ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fa:	f043 0301 	orr.w	r3, r3, #1
 80051fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3308      	adds	r3, #8
 8005206:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005208:	64ba      	str	r2, [r7, #72]	; 0x48
 800520a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800520e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e5      	bne.n	80051e8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005224:	d107      	bne.n	8005236 <UART_Start_Receive_IT+0x102>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d103      	bne.n	8005236 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4a21      	ldr	r2, [pc, #132]	; (80052b8 <UART_Start_Receive_IT+0x184>)
 8005232:	669a      	str	r2, [r3, #104]	; 0x68
 8005234:	e002      	b.n	800523c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4a20      	ldr	r2, [pc, #128]	; (80052bc <UART_Start_Receive_IT+0x188>)
 800523a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d019      	beq.n	8005278 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005258:	64fb      	str	r3, [r7, #76]	; 0x4c
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005262:	637b      	str	r3, [r7, #52]	; 0x34
 8005264:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e6      	bne.n	8005244 <UART_Start_Receive_IT+0x110>
 8005276:	e018      	b.n	80052aa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	613b      	str	r3, [r7, #16]
   return(result);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f043 0320 	orr.w	r3, r3, #32
 800528c:	653b      	str	r3, [r7, #80]	; 0x50
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005296:	623b      	str	r3, [r7, #32]
 8005298:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	69f9      	ldr	r1, [r7, #28]
 800529c:	6a3a      	ldr	r2, [r7, #32]
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e6      	bne.n	8005278 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	375c      	adds	r7, #92	; 0x5c
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	080055b1 	.word	0x080055b1
 80052bc:	08005409 	.word	0x08005409

080052c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b095      	sub	sp, #84	; 0x54
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e6:	643b      	str	r3, [r7, #64]	; 0x40
 80052e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e6      	bne.n	80052c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3308      	adds	r3, #8
 8005300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	61fb      	str	r3, [r7, #28]
   return(result);
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	64bb      	str	r3, [r7, #72]	; 0x48
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3308      	adds	r3, #8
 8005318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800531a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800531c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e5      	bne.n	80052fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005332:	2b01      	cmp	r3, #1
 8005334:	d118      	bne.n	8005368 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	60bb      	str	r3, [r7, #8]
   return(result);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f023 0310 	bic.w	r3, r3, #16
 800534a:	647b      	str	r3, [r7, #68]	; 0x44
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6979      	ldr	r1, [r7, #20]
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	613b      	str	r3, [r7, #16]
   return(result);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e6      	bne.n	8005336 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800537c:	bf00      	nop
 800537e:	3754      	adds	r7, #84	; 0x54
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7ff fbc0 	bl	8004b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	61bb      	str	r3, [r7, #24]
 80053dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	6979      	ldr	r1, [r7, #20]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	613b      	str	r3, [r7, #16]
   return(result);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e6      	bne.n	80053bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7ff fb8c 	bl	8004b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005400:	bf00      	nop
 8005402:	3720      	adds	r7, #32
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b09c      	sub	sp, #112	; 0x70
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005416:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005420:	2b22      	cmp	r3, #34	; 0x22
 8005422:	f040 80b9 	bne.w	8005598 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800542c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005430:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005434:	b2d9      	uxtb	r1, r3
 8005436:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800543a:	b2da      	uxtb	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005440:	400a      	ands	r2, r1
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005456:	b29b      	uxth	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	f040 809c 	bne.w	80055a8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800547e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005480:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005484:	66bb      	str	r3, [r7, #104]	; 0x68
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800548e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005490:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005494:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800549c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e6      	bne.n	8005470 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3308      	adds	r3, #8
 80054a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b4:	f023 0301 	bic.w	r3, r3, #1
 80054b8:	667b      	str	r3, [r7, #100]	; 0x64
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3308      	adds	r3, #8
 80054c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054c2:	647a      	str	r2, [r7, #68]	; 0x44
 80054c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e5      	bne.n	80054a2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d018      	beq.n	800552a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	623b      	str	r3, [r7, #32]
   return(result);
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800550c:	663b      	str	r3, [r7, #96]	; 0x60
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005516:	633b      	str	r3, [r7, #48]	; 0x30
 8005518:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800551c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e6      	bne.n	80054f8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800552e:	2b01      	cmp	r3, #1
 8005530:	d12e      	bne.n	8005590 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	60fb      	str	r3, [r7, #12]
   return(result);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f023 0310 	bic.w	r3, r3, #16
 800554c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005556:	61fb      	str	r3, [r7, #28]
 8005558:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	69b9      	ldr	r1, [r7, #24]
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	617b      	str	r3, [r7, #20]
   return(result);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e6      	bne.n	8005538 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b10      	cmp	r3, #16
 8005576:	d103      	bne.n	8005580 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2210      	movs	r2, #16
 800557e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005586:	4619      	mov	r1, r3
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff fad9 	bl	8004b40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800558e:	e00b      	b.n	80055a8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7fb fdc1 	bl	8001118 <HAL_UART_RxCpltCallback>
}
 8005596:	e007      	b.n	80055a8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0208 	orr.w	r2, r2, #8
 80055a6:	619a      	str	r2, [r3, #24]
}
 80055a8:	bf00      	nop
 80055aa:	3770      	adds	r7, #112	; 0x70
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b09c      	sub	sp, #112	; 0x70
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c8:	2b22      	cmp	r3, #34	; 0x22
 80055ca:	f040 80b9 	bne.w	8005740 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80055d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055dc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80055de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80055e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80055e6:	4013      	ands	r3, r2
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f2:	1c9a      	adds	r2, r3, #2
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	f040 809c 	bne.w	8005750 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005628:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800562c:	667b      	str	r3, [r7, #100]	; 0x64
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005636:	657b      	str	r3, [r7, #84]	; 0x54
 8005638:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800563c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e6      	bne.n	8005618 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3308      	adds	r3, #8
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	f023 0301 	bic.w	r3, r3, #1
 8005660:	663b      	str	r3, [r7, #96]	; 0x60
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3308      	adds	r3, #8
 8005668:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800566a:	643a      	str	r2, [r7, #64]	; 0x40
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e5      	bne.n	800564a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d018      	beq.n	80056d2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e6      	bne.n	80056a0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d12e      	bne.n	8005738 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f023 0310 	bic.w	r3, r3, #16
 80056f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056fe:	61bb      	str	r3, [r7, #24]
 8005700:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6979      	ldr	r1, [r7, #20]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	613b      	str	r3, [r7, #16]
   return(result);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e6      	bne.n	80056e0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f003 0310 	and.w	r3, r3, #16
 800571c:	2b10      	cmp	r3, #16
 800571e:	d103      	bne.n	8005728 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2210      	movs	r2, #16
 8005726:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800572e:	4619      	mov	r1, r3
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff fa05 	bl	8004b40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005736:	e00b      	b.n	8005750 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7fb fced 	bl	8001118 <HAL_UART_RxCpltCallback>
}
 800573e:	e007      	b.n	8005750 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0208 	orr.w	r2, r2, #8
 800574e:	619a      	str	r2, [r3, #24]
}
 8005750:	bf00      	nop
 8005752:	3770      	adds	r7, #112	; 0x70
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <__cvt>:
 800576c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005770:	ec55 4b10 	vmov	r4, r5, d0
 8005774:	2d00      	cmp	r5, #0
 8005776:	460e      	mov	r6, r1
 8005778:	4619      	mov	r1, r3
 800577a:	462b      	mov	r3, r5
 800577c:	bfbb      	ittet	lt
 800577e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005782:	461d      	movlt	r5, r3
 8005784:	2300      	movge	r3, #0
 8005786:	232d      	movlt	r3, #45	; 0x2d
 8005788:	700b      	strb	r3, [r1, #0]
 800578a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800578c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005790:	4691      	mov	r9, r2
 8005792:	f023 0820 	bic.w	r8, r3, #32
 8005796:	bfbc      	itt	lt
 8005798:	4622      	movlt	r2, r4
 800579a:	4614      	movlt	r4, r2
 800579c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057a0:	d005      	beq.n	80057ae <__cvt+0x42>
 80057a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057a6:	d100      	bne.n	80057aa <__cvt+0x3e>
 80057a8:	3601      	adds	r6, #1
 80057aa:	2102      	movs	r1, #2
 80057ac:	e000      	b.n	80057b0 <__cvt+0x44>
 80057ae:	2103      	movs	r1, #3
 80057b0:	ab03      	add	r3, sp, #12
 80057b2:	9301      	str	r3, [sp, #4]
 80057b4:	ab02      	add	r3, sp, #8
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	ec45 4b10 	vmov	d0, r4, r5
 80057bc:	4653      	mov	r3, sl
 80057be:	4632      	mov	r2, r6
 80057c0:	f000 fe76 	bl	80064b0 <_dtoa_r>
 80057c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057c8:	4607      	mov	r7, r0
 80057ca:	d102      	bne.n	80057d2 <__cvt+0x66>
 80057cc:	f019 0f01 	tst.w	r9, #1
 80057d0:	d022      	beq.n	8005818 <__cvt+0xac>
 80057d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057d6:	eb07 0906 	add.w	r9, r7, r6
 80057da:	d110      	bne.n	80057fe <__cvt+0x92>
 80057dc:	783b      	ldrb	r3, [r7, #0]
 80057de:	2b30      	cmp	r3, #48	; 0x30
 80057e0:	d10a      	bne.n	80057f8 <__cvt+0x8c>
 80057e2:	2200      	movs	r2, #0
 80057e4:	2300      	movs	r3, #0
 80057e6:	4620      	mov	r0, r4
 80057e8:	4629      	mov	r1, r5
 80057ea:	f7fb f97d 	bl	8000ae8 <__aeabi_dcmpeq>
 80057ee:	b918      	cbnz	r0, 80057f8 <__cvt+0x8c>
 80057f0:	f1c6 0601 	rsb	r6, r6, #1
 80057f4:	f8ca 6000 	str.w	r6, [sl]
 80057f8:	f8da 3000 	ldr.w	r3, [sl]
 80057fc:	4499      	add	r9, r3
 80057fe:	2200      	movs	r2, #0
 8005800:	2300      	movs	r3, #0
 8005802:	4620      	mov	r0, r4
 8005804:	4629      	mov	r1, r5
 8005806:	f7fb f96f 	bl	8000ae8 <__aeabi_dcmpeq>
 800580a:	b108      	cbz	r0, 8005810 <__cvt+0xa4>
 800580c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005810:	2230      	movs	r2, #48	; 0x30
 8005812:	9b03      	ldr	r3, [sp, #12]
 8005814:	454b      	cmp	r3, r9
 8005816:	d307      	bcc.n	8005828 <__cvt+0xbc>
 8005818:	9b03      	ldr	r3, [sp, #12]
 800581a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800581c:	1bdb      	subs	r3, r3, r7
 800581e:	4638      	mov	r0, r7
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	b004      	add	sp, #16
 8005824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005828:	1c59      	adds	r1, r3, #1
 800582a:	9103      	str	r1, [sp, #12]
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	e7f0      	b.n	8005812 <__cvt+0xa6>

08005830 <__exponent>:
 8005830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005832:	4603      	mov	r3, r0
 8005834:	2900      	cmp	r1, #0
 8005836:	bfb8      	it	lt
 8005838:	4249      	neglt	r1, r1
 800583a:	f803 2b02 	strb.w	r2, [r3], #2
 800583e:	bfb4      	ite	lt
 8005840:	222d      	movlt	r2, #45	; 0x2d
 8005842:	222b      	movge	r2, #43	; 0x2b
 8005844:	2909      	cmp	r1, #9
 8005846:	7042      	strb	r2, [r0, #1]
 8005848:	dd2a      	ble.n	80058a0 <__exponent+0x70>
 800584a:	f10d 0207 	add.w	r2, sp, #7
 800584e:	4617      	mov	r7, r2
 8005850:	260a      	movs	r6, #10
 8005852:	4694      	mov	ip, r2
 8005854:	fb91 f5f6 	sdiv	r5, r1, r6
 8005858:	fb06 1415 	mls	r4, r6, r5, r1
 800585c:	3430      	adds	r4, #48	; 0x30
 800585e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005862:	460c      	mov	r4, r1
 8005864:	2c63      	cmp	r4, #99	; 0x63
 8005866:	f102 32ff 	add.w	r2, r2, #4294967295
 800586a:	4629      	mov	r1, r5
 800586c:	dcf1      	bgt.n	8005852 <__exponent+0x22>
 800586e:	3130      	adds	r1, #48	; 0x30
 8005870:	f1ac 0402 	sub.w	r4, ip, #2
 8005874:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005878:	1c41      	adds	r1, r0, #1
 800587a:	4622      	mov	r2, r4
 800587c:	42ba      	cmp	r2, r7
 800587e:	d30a      	bcc.n	8005896 <__exponent+0x66>
 8005880:	f10d 0209 	add.w	r2, sp, #9
 8005884:	eba2 020c 	sub.w	r2, r2, ip
 8005888:	42bc      	cmp	r4, r7
 800588a:	bf88      	it	hi
 800588c:	2200      	movhi	r2, #0
 800588e:	4413      	add	r3, r2
 8005890:	1a18      	subs	r0, r3, r0
 8005892:	b003      	add	sp, #12
 8005894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005896:	f812 5b01 	ldrb.w	r5, [r2], #1
 800589a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800589e:	e7ed      	b.n	800587c <__exponent+0x4c>
 80058a0:	2330      	movs	r3, #48	; 0x30
 80058a2:	3130      	adds	r1, #48	; 0x30
 80058a4:	7083      	strb	r3, [r0, #2]
 80058a6:	70c1      	strb	r1, [r0, #3]
 80058a8:	1d03      	adds	r3, r0, #4
 80058aa:	e7f1      	b.n	8005890 <__exponent+0x60>

080058ac <_printf_float>:
 80058ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b0:	ed2d 8b02 	vpush	{d8}
 80058b4:	b08d      	sub	sp, #52	; 0x34
 80058b6:	460c      	mov	r4, r1
 80058b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80058bc:	4616      	mov	r6, r2
 80058be:	461f      	mov	r7, r3
 80058c0:	4605      	mov	r5, r0
 80058c2:	f000 fcf5 	bl	80062b0 <_localeconv_r>
 80058c6:	f8d0 a000 	ldr.w	sl, [r0]
 80058ca:	4650      	mov	r0, sl
 80058cc:	f7fa fce0 	bl	8000290 <strlen>
 80058d0:	2300      	movs	r3, #0
 80058d2:	930a      	str	r3, [sp, #40]	; 0x28
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	9305      	str	r3, [sp, #20]
 80058d8:	f8d8 3000 	ldr.w	r3, [r8]
 80058dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80058e0:	3307      	adds	r3, #7
 80058e2:	f023 0307 	bic.w	r3, r3, #7
 80058e6:	f103 0208 	add.w	r2, r3, #8
 80058ea:	f8c8 2000 	str.w	r2, [r8]
 80058ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058f6:	9307      	str	r3, [sp, #28]
 80058f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80058fc:	ee08 0a10 	vmov	s16, r0
 8005900:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005904:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005908:	4b9e      	ldr	r3, [pc, #632]	; (8005b84 <_printf_float+0x2d8>)
 800590a:	f04f 32ff 	mov.w	r2, #4294967295
 800590e:	f7fb f91d 	bl	8000b4c <__aeabi_dcmpun>
 8005912:	bb88      	cbnz	r0, 8005978 <_printf_float+0xcc>
 8005914:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005918:	4b9a      	ldr	r3, [pc, #616]	; (8005b84 <_printf_float+0x2d8>)
 800591a:	f04f 32ff 	mov.w	r2, #4294967295
 800591e:	f7fb f8f7 	bl	8000b10 <__aeabi_dcmple>
 8005922:	bb48      	cbnz	r0, 8005978 <_printf_float+0xcc>
 8005924:	2200      	movs	r2, #0
 8005926:	2300      	movs	r3, #0
 8005928:	4640      	mov	r0, r8
 800592a:	4649      	mov	r1, r9
 800592c:	f7fb f8e6 	bl	8000afc <__aeabi_dcmplt>
 8005930:	b110      	cbz	r0, 8005938 <_printf_float+0x8c>
 8005932:	232d      	movs	r3, #45	; 0x2d
 8005934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005938:	4a93      	ldr	r2, [pc, #588]	; (8005b88 <_printf_float+0x2dc>)
 800593a:	4b94      	ldr	r3, [pc, #592]	; (8005b8c <_printf_float+0x2e0>)
 800593c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005940:	bf94      	ite	ls
 8005942:	4690      	movls	r8, r2
 8005944:	4698      	movhi	r8, r3
 8005946:	2303      	movs	r3, #3
 8005948:	6123      	str	r3, [r4, #16]
 800594a:	9b05      	ldr	r3, [sp, #20]
 800594c:	f023 0304 	bic.w	r3, r3, #4
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	f04f 0900 	mov.w	r9, #0
 8005956:	9700      	str	r7, [sp, #0]
 8005958:	4633      	mov	r3, r6
 800595a:	aa0b      	add	r2, sp, #44	; 0x2c
 800595c:	4621      	mov	r1, r4
 800595e:	4628      	mov	r0, r5
 8005960:	f000 f9da 	bl	8005d18 <_printf_common>
 8005964:	3001      	adds	r0, #1
 8005966:	f040 8090 	bne.w	8005a8a <_printf_float+0x1de>
 800596a:	f04f 30ff 	mov.w	r0, #4294967295
 800596e:	b00d      	add	sp, #52	; 0x34
 8005970:	ecbd 8b02 	vpop	{d8}
 8005974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005978:	4642      	mov	r2, r8
 800597a:	464b      	mov	r3, r9
 800597c:	4640      	mov	r0, r8
 800597e:	4649      	mov	r1, r9
 8005980:	f7fb f8e4 	bl	8000b4c <__aeabi_dcmpun>
 8005984:	b140      	cbz	r0, 8005998 <_printf_float+0xec>
 8005986:	464b      	mov	r3, r9
 8005988:	2b00      	cmp	r3, #0
 800598a:	bfbc      	itt	lt
 800598c:	232d      	movlt	r3, #45	; 0x2d
 800598e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005992:	4a7f      	ldr	r2, [pc, #508]	; (8005b90 <_printf_float+0x2e4>)
 8005994:	4b7f      	ldr	r3, [pc, #508]	; (8005b94 <_printf_float+0x2e8>)
 8005996:	e7d1      	b.n	800593c <_printf_float+0x90>
 8005998:	6863      	ldr	r3, [r4, #4]
 800599a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800599e:	9206      	str	r2, [sp, #24]
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	d13f      	bne.n	8005a24 <_printf_float+0x178>
 80059a4:	2306      	movs	r3, #6
 80059a6:	6063      	str	r3, [r4, #4]
 80059a8:	9b05      	ldr	r3, [sp, #20]
 80059aa:	6861      	ldr	r1, [r4, #4]
 80059ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80059b0:	2300      	movs	r3, #0
 80059b2:	9303      	str	r3, [sp, #12]
 80059b4:	ab0a      	add	r3, sp, #40	; 0x28
 80059b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80059ba:	ab09      	add	r3, sp, #36	; 0x24
 80059bc:	ec49 8b10 	vmov	d0, r8, r9
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	6022      	str	r2, [r4, #0]
 80059c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80059c8:	4628      	mov	r0, r5
 80059ca:	f7ff fecf 	bl	800576c <__cvt>
 80059ce:	9b06      	ldr	r3, [sp, #24]
 80059d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059d2:	2b47      	cmp	r3, #71	; 0x47
 80059d4:	4680      	mov	r8, r0
 80059d6:	d108      	bne.n	80059ea <_printf_float+0x13e>
 80059d8:	1cc8      	adds	r0, r1, #3
 80059da:	db02      	blt.n	80059e2 <_printf_float+0x136>
 80059dc:	6863      	ldr	r3, [r4, #4]
 80059de:	4299      	cmp	r1, r3
 80059e0:	dd41      	ble.n	8005a66 <_printf_float+0x1ba>
 80059e2:	f1ab 0302 	sub.w	r3, fp, #2
 80059e6:	fa5f fb83 	uxtb.w	fp, r3
 80059ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059ee:	d820      	bhi.n	8005a32 <_printf_float+0x186>
 80059f0:	3901      	subs	r1, #1
 80059f2:	465a      	mov	r2, fp
 80059f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059f8:	9109      	str	r1, [sp, #36]	; 0x24
 80059fa:	f7ff ff19 	bl	8005830 <__exponent>
 80059fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a00:	1813      	adds	r3, r2, r0
 8005a02:	2a01      	cmp	r2, #1
 8005a04:	4681      	mov	r9, r0
 8005a06:	6123      	str	r3, [r4, #16]
 8005a08:	dc02      	bgt.n	8005a10 <_printf_float+0x164>
 8005a0a:	6822      	ldr	r2, [r4, #0]
 8005a0c:	07d2      	lsls	r2, r2, #31
 8005a0e:	d501      	bpl.n	8005a14 <_printf_float+0x168>
 8005a10:	3301      	adds	r3, #1
 8005a12:	6123      	str	r3, [r4, #16]
 8005a14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d09c      	beq.n	8005956 <_printf_float+0xaa>
 8005a1c:	232d      	movs	r3, #45	; 0x2d
 8005a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a22:	e798      	b.n	8005956 <_printf_float+0xaa>
 8005a24:	9a06      	ldr	r2, [sp, #24]
 8005a26:	2a47      	cmp	r2, #71	; 0x47
 8005a28:	d1be      	bne.n	80059a8 <_printf_float+0xfc>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1bc      	bne.n	80059a8 <_printf_float+0xfc>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e7b9      	b.n	80059a6 <_printf_float+0xfa>
 8005a32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a36:	d118      	bne.n	8005a6a <_printf_float+0x1be>
 8005a38:	2900      	cmp	r1, #0
 8005a3a:	6863      	ldr	r3, [r4, #4]
 8005a3c:	dd0b      	ble.n	8005a56 <_printf_float+0x1aa>
 8005a3e:	6121      	str	r1, [r4, #16]
 8005a40:	b913      	cbnz	r3, 8005a48 <_printf_float+0x19c>
 8005a42:	6822      	ldr	r2, [r4, #0]
 8005a44:	07d0      	lsls	r0, r2, #31
 8005a46:	d502      	bpl.n	8005a4e <_printf_float+0x1a2>
 8005a48:	3301      	adds	r3, #1
 8005a4a:	440b      	add	r3, r1
 8005a4c:	6123      	str	r3, [r4, #16]
 8005a4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a50:	f04f 0900 	mov.w	r9, #0
 8005a54:	e7de      	b.n	8005a14 <_printf_float+0x168>
 8005a56:	b913      	cbnz	r3, 8005a5e <_printf_float+0x1b2>
 8005a58:	6822      	ldr	r2, [r4, #0]
 8005a5a:	07d2      	lsls	r2, r2, #31
 8005a5c:	d501      	bpl.n	8005a62 <_printf_float+0x1b6>
 8005a5e:	3302      	adds	r3, #2
 8005a60:	e7f4      	b.n	8005a4c <_printf_float+0x1a0>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e7f2      	b.n	8005a4c <_printf_float+0x1a0>
 8005a66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	db05      	blt.n	8005a7c <_printf_float+0x1d0>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	6121      	str	r1, [r4, #16]
 8005a74:	07d8      	lsls	r0, r3, #31
 8005a76:	d5ea      	bpl.n	8005a4e <_printf_float+0x1a2>
 8005a78:	1c4b      	adds	r3, r1, #1
 8005a7a:	e7e7      	b.n	8005a4c <_printf_float+0x1a0>
 8005a7c:	2900      	cmp	r1, #0
 8005a7e:	bfd4      	ite	le
 8005a80:	f1c1 0202 	rsble	r2, r1, #2
 8005a84:	2201      	movgt	r2, #1
 8005a86:	4413      	add	r3, r2
 8005a88:	e7e0      	b.n	8005a4c <_printf_float+0x1a0>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	055a      	lsls	r2, r3, #21
 8005a8e:	d407      	bmi.n	8005aa0 <_printf_float+0x1f4>
 8005a90:	6923      	ldr	r3, [r4, #16]
 8005a92:	4642      	mov	r2, r8
 8005a94:	4631      	mov	r1, r6
 8005a96:	4628      	mov	r0, r5
 8005a98:	47b8      	blx	r7
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d12c      	bne.n	8005af8 <_printf_float+0x24c>
 8005a9e:	e764      	b.n	800596a <_printf_float+0xbe>
 8005aa0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005aa4:	f240 80e0 	bls.w	8005c68 <_printf_float+0x3bc>
 8005aa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005aac:	2200      	movs	r2, #0
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f7fb f81a 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d034      	beq.n	8005b22 <_printf_float+0x276>
 8005ab8:	4a37      	ldr	r2, [pc, #220]	; (8005b98 <_printf_float+0x2ec>)
 8005aba:	2301      	movs	r3, #1
 8005abc:	4631      	mov	r1, r6
 8005abe:	4628      	mov	r0, r5
 8005ac0:	47b8      	blx	r7
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	f43f af51 	beq.w	800596a <_printf_float+0xbe>
 8005ac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005acc:	429a      	cmp	r2, r3
 8005ace:	db02      	blt.n	8005ad6 <_printf_float+0x22a>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	07d8      	lsls	r0, r3, #31
 8005ad4:	d510      	bpl.n	8005af8 <_printf_float+0x24c>
 8005ad6:	ee18 3a10 	vmov	r3, s16
 8005ada:	4652      	mov	r2, sl
 8005adc:	4631      	mov	r1, r6
 8005ade:	4628      	mov	r0, r5
 8005ae0:	47b8      	blx	r7
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	f43f af41 	beq.w	800596a <_printf_float+0xbe>
 8005ae8:	f04f 0800 	mov.w	r8, #0
 8005aec:	f104 091a 	add.w	r9, r4, #26
 8005af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af2:	3b01      	subs	r3, #1
 8005af4:	4543      	cmp	r3, r8
 8005af6:	dc09      	bgt.n	8005b0c <_printf_float+0x260>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	079b      	lsls	r3, r3, #30
 8005afc:	f100 8107 	bmi.w	8005d0e <_printf_float+0x462>
 8005b00:	68e0      	ldr	r0, [r4, #12]
 8005b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b04:	4298      	cmp	r0, r3
 8005b06:	bfb8      	it	lt
 8005b08:	4618      	movlt	r0, r3
 8005b0a:	e730      	b.n	800596e <_printf_float+0xc2>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	464a      	mov	r2, r9
 8005b10:	4631      	mov	r1, r6
 8005b12:	4628      	mov	r0, r5
 8005b14:	47b8      	blx	r7
 8005b16:	3001      	adds	r0, #1
 8005b18:	f43f af27 	beq.w	800596a <_printf_float+0xbe>
 8005b1c:	f108 0801 	add.w	r8, r8, #1
 8005b20:	e7e6      	b.n	8005af0 <_printf_float+0x244>
 8005b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	dc39      	bgt.n	8005b9c <_printf_float+0x2f0>
 8005b28:	4a1b      	ldr	r2, [pc, #108]	; (8005b98 <_printf_float+0x2ec>)
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	4628      	mov	r0, r5
 8005b30:	47b8      	blx	r7
 8005b32:	3001      	adds	r0, #1
 8005b34:	f43f af19 	beq.w	800596a <_printf_float+0xbe>
 8005b38:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	d102      	bne.n	8005b46 <_printf_float+0x29a>
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	07d9      	lsls	r1, r3, #31
 8005b44:	d5d8      	bpl.n	8005af8 <_printf_float+0x24c>
 8005b46:	ee18 3a10 	vmov	r3, s16
 8005b4a:	4652      	mov	r2, sl
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	4628      	mov	r0, r5
 8005b50:	47b8      	blx	r7
 8005b52:	3001      	adds	r0, #1
 8005b54:	f43f af09 	beq.w	800596a <_printf_float+0xbe>
 8005b58:	f04f 0900 	mov.w	r9, #0
 8005b5c:	f104 0a1a 	add.w	sl, r4, #26
 8005b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b62:	425b      	negs	r3, r3
 8005b64:	454b      	cmp	r3, r9
 8005b66:	dc01      	bgt.n	8005b6c <_printf_float+0x2c0>
 8005b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b6a:	e792      	b.n	8005a92 <_printf_float+0x1e6>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	4652      	mov	r2, sl
 8005b70:	4631      	mov	r1, r6
 8005b72:	4628      	mov	r0, r5
 8005b74:	47b8      	blx	r7
 8005b76:	3001      	adds	r0, #1
 8005b78:	f43f aef7 	beq.w	800596a <_printf_float+0xbe>
 8005b7c:	f109 0901 	add.w	r9, r9, #1
 8005b80:	e7ee      	b.n	8005b60 <_printf_float+0x2b4>
 8005b82:	bf00      	nop
 8005b84:	7fefffff 	.word	0x7fefffff
 8005b88:	08008554 	.word	0x08008554
 8005b8c:	08008558 	.word	0x08008558
 8005b90:	0800855c 	.word	0x0800855c
 8005b94:	08008560 	.word	0x08008560
 8005b98:	08008564 	.word	0x08008564
 8005b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	bfa8      	it	ge
 8005ba4:	461a      	movge	r2, r3
 8005ba6:	2a00      	cmp	r2, #0
 8005ba8:	4691      	mov	r9, r2
 8005baa:	dc37      	bgt.n	8005c1c <_printf_float+0x370>
 8005bac:	f04f 0b00 	mov.w	fp, #0
 8005bb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bb4:	f104 021a 	add.w	r2, r4, #26
 8005bb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bba:	9305      	str	r3, [sp, #20]
 8005bbc:	eba3 0309 	sub.w	r3, r3, r9
 8005bc0:	455b      	cmp	r3, fp
 8005bc2:	dc33      	bgt.n	8005c2c <_printf_float+0x380>
 8005bc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	db3b      	blt.n	8005c44 <_printf_float+0x398>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	07da      	lsls	r2, r3, #31
 8005bd0:	d438      	bmi.n	8005c44 <_printf_float+0x398>
 8005bd2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005bd6:	eba2 0903 	sub.w	r9, r2, r3
 8005bda:	9b05      	ldr	r3, [sp, #20]
 8005bdc:	1ad2      	subs	r2, r2, r3
 8005bde:	4591      	cmp	r9, r2
 8005be0:	bfa8      	it	ge
 8005be2:	4691      	movge	r9, r2
 8005be4:	f1b9 0f00 	cmp.w	r9, #0
 8005be8:	dc35      	bgt.n	8005c56 <_printf_float+0x3aa>
 8005bea:	f04f 0800 	mov.w	r8, #0
 8005bee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bf2:	f104 0a1a 	add.w	sl, r4, #26
 8005bf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bfa:	1a9b      	subs	r3, r3, r2
 8005bfc:	eba3 0309 	sub.w	r3, r3, r9
 8005c00:	4543      	cmp	r3, r8
 8005c02:	f77f af79 	ble.w	8005af8 <_printf_float+0x24c>
 8005c06:	2301      	movs	r3, #1
 8005c08:	4652      	mov	r2, sl
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	47b8      	blx	r7
 8005c10:	3001      	adds	r0, #1
 8005c12:	f43f aeaa 	beq.w	800596a <_printf_float+0xbe>
 8005c16:	f108 0801 	add.w	r8, r8, #1
 8005c1a:	e7ec      	b.n	8005bf6 <_printf_float+0x34a>
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4642      	mov	r2, r8
 8005c22:	4628      	mov	r0, r5
 8005c24:	47b8      	blx	r7
 8005c26:	3001      	adds	r0, #1
 8005c28:	d1c0      	bne.n	8005bac <_printf_float+0x300>
 8005c2a:	e69e      	b.n	800596a <_printf_float+0xbe>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	4631      	mov	r1, r6
 8005c30:	4628      	mov	r0, r5
 8005c32:	9205      	str	r2, [sp, #20]
 8005c34:	47b8      	blx	r7
 8005c36:	3001      	adds	r0, #1
 8005c38:	f43f ae97 	beq.w	800596a <_printf_float+0xbe>
 8005c3c:	9a05      	ldr	r2, [sp, #20]
 8005c3e:	f10b 0b01 	add.w	fp, fp, #1
 8005c42:	e7b9      	b.n	8005bb8 <_printf_float+0x30c>
 8005c44:	ee18 3a10 	vmov	r3, s16
 8005c48:	4652      	mov	r2, sl
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	47b8      	blx	r7
 8005c50:	3001      	adds	r0, #1
 8005c52:	d1be      	bne.n	8005bd2 <_printf_float+0x326>
 8005c54:	e689      	b.n	800596a <_printf_float+0xbe>
 8005c56:	9a05      	ldr	r2, [sp, #20]
 8005c58:	464b      	mov	r3, r9
 8005c5a:	4442      	add	r2, r8
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4628      	mov	r0, r5
 8005c60:	47b8      	blx	r7
 8005c62:	3001      	adds	r0, #1
 8005c64:	d1c1      	bne.n	8005bea <_printf_float+0x33e>
 8005c66:	e680      	b.n	800596a <_printf_float+0xbe>
 8005c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c6a:	2a01      	cmp	r2, #1
 8005c6c:	dc01      	bgt.n	8005c72 <_printf_float+0x3c6>
 8005c6e:	07db      	lsls	r3, r3, #31
 8005c70:	d53a      	bpl.n	8005ce8 <_printf_float+0x43c>
 8005c72:	2301      	movs	r3, #1
 8005c74:	4642      	mov	r2, r8
 8005c76:	4631      	mov	r1, r6
 8005c78:	4628      	mov	r0, r5
 8005c7a:	47b8      	blx	r7
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	f43f ae74 	beq.w	800596a <_printf_float+0xbe>
 8005c82:	ee18 3a10 	vmov	r3, s16
 8005c86:	4652      	mov	r2, sl
 8005c88:	4631      	mov	r1, r6
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	47b8      	blx	r7
 8005c8e:	3001      	adds	r0, #1
 8005c90:	f43f ae6b 	beq.w	800596a <_printf_float+0xbe>
 8005c94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005ca0:	f7fa ff22 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ca4:	b9d8      	cbnz	r0, 8005cde <_printf_float+0x432>
 8005ca6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005caa:	f108 0201 	add.w	r2, r8, #1
 8005cae:	4631      	mov	r1, r6
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	47b8      	blx	r7
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d10e      	bne.n	8005cd6 <_printf_float+0x42a>
 8005cb8:	e657      	b.n	800596a <_printf_float+0xbe>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	4652      	mov	r2, sl
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	47b8      	blx	r7
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	f43f ae50 	beq.w	800596a <_printf_float+0xbe>
 8005cca:	f108 0801 	add.w	r8, r8, #1
 8005cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	4543      	cmp	r3, r8
 8005cd4:	dcf1      	bgt.n	8005cba <_printf_float+0x40e>
 8005cd6:	464b      	mov	r3, r9
 8005cd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005cdc:	e6da      	b.n	8005a94 <_printf_float+0x1e8>
 8005cde:	f04f 0800 	mov.w	r8, #0
 8005ce2:	f104 0a1a 	add.w	sl, r4, #26
 8005ce6:	e7f2      	b.n	8005cce <_printf_float+0x422>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	4642      	mov	r2, r8
 8005cec:	e7df      	b.n	8005cae <_printf_float+0x402>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	464a      	mov	r2, r9
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	47b8      	blx	r7
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	f43f ae36 	beq.w	800596a <_printf_float+0xbe>
 8005cfe:	f108 0801 	add.w	r8, r8, #1
 8005d02:	68e3      	ldr	r3, [r4, #12]
 8005d04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d06:	1a5b      	subs	r3, r3, r1
 8005d08:	4543      	cmp	r3, r8
 8005d0a:	dcf0      	bgt.n	8005cee <_printf_float+0x442>
 8005d0c:	e6f8      	b.n	8005b00 <_printf_float+0x254>
 8005d0e:	f04f 0800 	mov.w	r8, #0
 8005d12:	f104 0919 	add.w	r9, r4, #25
 8005d16:	e7f4      	b.n	8005d02 <_printf_float+0x456>

08005d18 <_printf_common>:
 8005d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d1c:	4616      	mov	r6, r2
 8005d1e:	4699      	mov	r9, r3
 8005d20:	688a      	ldr	r2, [r1, #8]
 8005d22:	690b      	ldr	r3, [r1, #16]
 8005d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	bfb8      	it	lt
 8005d2c:	4613      	movlt	r3, r2
 8005d2e:	6033      	str	r3, [r6, #0]
 8005d30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d34:	4607      	mov	r7, r0
 8005d36:	460c      	mov	r4, r1
 8005d38:	b10a      	cbz	r2, 8005d3e <_printf_common+0x26>
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	6033      	str	r3, [r6, #0]
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	0699      	lsls	r1, r3, #26
 8005d42:	bf42      	ittt	mi
 8005d44:	6833      	ldrmi	r3, [r6, #0]
 8005d46:	3302      	addmi	r3, #2
 8005d48:	6033      	strmi	r3, [r6, #0]
 8005d4a:	6825      	ldr	r5, [r4, #0]
 8005d4c:	f015 0506 	ands.w	r5, r5, #6
 8005d50:	d106      	bne.n	8005d60 <_printf_common+0x48>
 8005d52:	f104 0a19 	add.w	sl, r4, #25
 8005d56:	68e3      	ldr	r3, [r4, #12]
 8005d58:	6832      	ldr	r2, [r6, #0]
 8005d5a:	1a9b      	subs	r3, r3, r2
 8005d5c:	42ab      	cmp	r3, r5
 8005d5e:	dc26      	bgt.n	8005dae <_printf_common+0x96>
 8005d60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d64:	1e13      	subs	r3, r2, #0
 8005d66:	6822      	ldr	r2, [r4, #0]
 8005d68:	bf18      	it	ne
 8005d6a:	2301      	movne	r3, #1
 8005d6c:	0692      	lsls	r2, r2, #26
 8005d6e:	d42b      	bmi.n	8005dc8 <_printf_common+0xb0>
 8005d70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d74:	4649      	mov	r1, r9
 8005d76:	4638      	mov	r0, r7
 8005d78:	47c0      	blx	r8
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	d01e      	beq.n	8005dbc <_printf_common+0xa4>
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	6922      	ldr	r2, [r4, #16]
 8005d82:	f003 0306 	and.w	r3, r3, #6
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	bf02      	ittt	eq
 8005d8a:	68e5      	ldreq	r5, [r4, #12]
 8005d8c:	6833      	ldreq	r3, [r6, #0]
 8005d8e:	1aed      	subeq	r5, r5, r3
 8005d90:	68a3      	ldr	r3, [r4, #8]
 8005d92:	bf0c      	ite	eq
 8005d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d98:	2500      	movne	r5, #0
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	bfc4      	itt	gt
 8005d9e:	1a9b      	subgt	r3, r3, r2
 8005da0:	18ed      	addgt	r5, r5, r3
 8005da2:	2600      	movs	r6, #0
 8005da4:	341a      	adds	r4, #26
 8005da6:	42b5      	cmp	r5, r6
 8005da8:	d11a      	bne.n	8005de0 <_printf_common+0xc8>
 8005daa:	2000      	movs	r0, #0
 8005dac:	e008      	b.n	8005dc0 <_printf_common+0xa8>
 8005dae:	2301      	movs	r3, #1
 8005db0:	4652      	mov	r2, sl
 8005db2:	4649      	mov	r1, r9
 8005db4:	4638      	mov	r0, r7
 8005db6:	47c0      	blx	r8
 8005db8:	3001      	adds	r0, #1
 8005dba:	d103      	bne.n	8005dc4 <_printf_common+0xac>
 8005dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc4:	3501      	adds	r5, #1
 8005dc6:	e7c6      	b.n	8005d56 <_printf_common+0x3e>
 8005dc8:	18e1      	adds	r1, r4, r3
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	2030      	movs	r0, #48	; 0x30
 8005dce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dd2:	4422      	add	r2, r4
 8005dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ddc:	3302      	adds	r3, #2
 8005dde:	e7c7      	b.n	8005d70 <_printf_common+0x58>
 8005de0:	2301      	movs	r3, #1
 8005de2:	4622      	mov	r2, r4
 8005de4:	4649      	mov	r1, r9
 8005de6:	4638      	mov	r0, r7
 8005de8:	47c0      	blx	r8
 8005dea:	3001      	adds	r0, #1
 8005dec:	d0e6      	beq.n	8005dbc <_printf_common+0xa4>
 8005dee:	3601      	adds	r6, #1
 8005df0:	e7d9      	b.n	8005da6 <_printf_common+0x8e>
	...

08005df4 <_printf_i>:
 8005df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005df8:	7e0f      	ldrb	r7, [r1, #24]
 8005dfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005dfc:	2f78      	cmp	r7, #120	; 0x78
 8005dfe:	4691      	mov	r9, r2
 8005e00:	4680      	mov	r8, r0
 8005e02:	460c      	mov	r4, r1
 8005e04:	469a      	mov	sl, r3
 8005e06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e0a:	d807      	bhi.n	8005e1c <_printf_i+0x28>
 8005e0c:	2f62      	cmp	r7, #98	; 0x62
 8005e0e:	d80a      	bhi.n	8005e26 <_printf_i+0x32>
 8005e10:	2f00      	cmp	r7, #0
 8005e12:	f000 80d4 	beq.w	8005fbe <_printf_i+0x1ca>
 8005e16:	2f58      	cmp	r7, #88	; 0x58
 8005e18:	f000 80c0 	beq.w	8005f9c <_printf_i+0x1a8>
 8005e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e24:	e03a      	b.n	8005e9c <_printf_i+0xa8>
 8005e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e2a:	2b15      	cmp	r3, #21
 8005e2c:	d8f6      	bhi.n	8005e1c <_printf_i+0x28>
 8005e2e:	a101      	add	r1, pc, #4	; (adr r1, 8005e34 <_printf_i+0x40>)
 8005e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e34:	08005e8d 	.word	0x08005e8d
 8005e38:	08005ea1 	.word	0x08005ea1
 8005e3c:	08005e1d 	.word	0x08005e1d
 8005e40:	08005e1d 	.word	0x08005e1d
 8005e44:	08005e1d 	.word	0x08005e1d
 8005e48:	08005e1d 	.word	0x08005e1d
 8005e4c:	08005ea1 	.word	0x08005ea1
 8005e50:	08005e1d 	.word	0x08005e1d
 8005e54:	08005e1d 	.word	0x08005e1d
 8005e58:	08005e1d 	.word	0x08005e1d
 8005e5c:	08005e1d 	.word	0x08005e1d
 8005e60:	08005fa5 	.word	0x08005fa5
 8005e64:	08005ecd 	.word	0x08005ecd
 8005e68:	08005f5f 	.word	0x08005f5f
 8005e6c:	08005e1d 	.word	0x08005e1d
 8005e70:	08005e1d 	.word	0x08005e1d
 8005e74:	08005fc7 	.word	0x08005fc7
 8005e78:	08005e1d 	.word	0x08005e1d
 8005e7c:	08005ecd 	.word	0x08005ecd
 8005e80:	08005e1d 	.word	0x08005e1d
 8005e84:	08005e1d 	.word	0x08005e1d
 8005e88:	08005f67 	.word	0x08005f67
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	1d1a      	adds	r2, r3, #4
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	602a      	str	r2, [r5, #0]
 8005e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e09f      	b.n	8005fe0 <_printf_i+0x1ec>
 8005ea0:	6820      	ldr	r0, [r4, #0]
 8005ea2:	682b      	ldr	r3, [r5, #0]
 8005ea4:	0607      	lsls	r7, r0, #24
 8005ea6:	f103 0104 	add.w	r1, r3, #4
 8005eaa:	6029      	str	r1, [r5, #0]
 8005eac:	d501      	bpl.n	8005eb2 <_printf_i+0xbe>
 8005eae:	681e      	ldr	r6, [r3, #0]
 8005eb0:	e003      	b.n	8005eba <_printf_i+0xc6>
 8005eb2:	0646      	lsls	r6, r0, #25
 8005eb4:	d5fb      	bpl.n	8005eae <_printf_i+0xba>
 8005eb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005eba:	2e00      	cmp	r6, #0
 8005ebc:	da03      	bge.n	8005ec6 <_printf_i+0xd2>
 8005ebe:	232d      	movs	r3, #45	; 0x2d
 8005ec0:	4276      	negs	r6, r6
 8005ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ec6:	485a      	ldr	r0, [pc, #360]	; (8006030 <_printf_i+0x23c>)
 8005ec8:	230a      	movs	r3, #10
 8005eca:	e012      	b.n	8005ef2 <_printf_i+0xfe>
 8005ecc:	682b      	ldr	r3, [r5, #0]
 8005ece:	6820      	ldr	r0, [r4, #0]
 8005ed0:	1d19      	adds	r1, r3, #4
 8005ed2:	6029      	str	r1, [r5, #0]
 8005ed4:	0605      	lsls	r5, r0, #24
 8005ed6:	d501      	bpl.n	8005edc <_printf_i+0xe8>
 8005ed8:	681e      	ldr	r6, [r3, #0]
 8005eda:	e002      	b.n	8005ee2 <_printf_i+0xee>
 8005edc:	0641      	lsls	r1, r0, #25
 8005ede:	d5fb      	bpl.n	8005ed8 <_printf_i+0xe4>
 8005ee0:	881e      	ldrh	r6, [r3, #0]
 8005ee2:	4853      	ldr	r0, [pc, #332]	; (8006030 <_printf_i+0x23c>)
 8005ee4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ee6:	bf0c      	ite	eq
 8005ee8:	2308      	moveq	r3, #8
 8005eea:	230a      	movne	r3, #10
 8005eec:	2100      	movs	r1, #0
 8005eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ef2:	6865      	ldr	r5, [r4, #4]
 8005ef4:	60a5      	str	r5, [r4, #8]
 8005ef6:	2d00      	cmp	r5, #0
 8005ef8:	bfa2      	ittt	ge
 8005efa:	6821      	ldrge	r1, [r4, #0]
 8005efc:	f021 0104 	bicge.w	r1, r1, #4
 8005f00:	6021      	strge	r1, [r4, #0]
 8005f02:	b90e      	cbnz	r6, 8005f08 <_printf_i+0x114>
 8005f04:	2d00      	cmp	r5, #0
 8005f06:	d04b      	beq.n	8005fa0 <_printf_i+0x1ac>
 8005f08:	4615      	mov	r5, r2
 8005f0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f0e:	fb03 6711 	mls	r7, r3, r1, r6
 8005f12:	5dc7      	ldrb	r7, [r0, r7]
 8005f14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f18:	4637      	mov	r7, r6
 8005f1a:	42bb      	cmp	r3, r7
 8005f1c:	460e      	mov	r6, r1
 8005f1e:	d9f4      	bls.n	8005f0a <_printf_i+0x116>
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d10b      	bne.n	8005f3c <_printf_i+0x148>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	07de      	lsls	r6, r3, #31
 8005f28:	d508      	bpl.n	8005f3c <_printf_i+0x148>
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	6861      	ldr	r1, [r4, #4]
 8005f2e:	4299      	cmp	r1, r3
 8005f30:	bfde      	ittt	le
 8005f32:	2330      	movle	r3, #48	; 0x30
 8005f34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f3c:	1b52      	subs	r2, r2, r5
 8005f3e:	6122      	str	r2, [r4, #16]
 8005f40:	f8cd a000 	str.w	sl, [sp]
 8005f44:	464b      	mov	r3, r9
 8005f46:	aa03      	add	r2, sp, #12
 8005f48:	4621      	mov	r1, r4
 8005f4a:	4640      	mov	r0, r8
 8005f4c:	f7ff fee4 	bl	8005d18 <_printf_common>
 8005f50:	3001      	adds	r0, #1
 8005f52:	d14a      	bne.n	8005fea <_printf_i+0x1f6>
 8005f54:	f04f 30ff 	mov.w	r0, #4294967295
 8005f58:	b004      	add	sp, #16
 8005f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	f043 0320 	orr.w	r3, r3, #32
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	4833      	ldr	r0, [pc, #204]	; (8006034 <_printf_i+0x240>)
 8005f68:	2778      	movs	r7, #120	; 0x78
 8005f6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	6829      	ldr	r1, [r5, #0]
 8005f72:	061f      	lsls	r7, r3, #24
 8005f74:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f78:	d402      	bmi.n	8005f80 <_printf_i+0x18c>
 8005f7a:	065f      	lsls	r7, r3, #25
 8005f7c:	bf48      	it	mi
 8005f7e:	b2b6      	uxthmi	r6, r6
 8005f80:	07df      	lsls	r7, r3, #31
 8005f82:	bf48      	it	mi
 8005f84:	f043 0320 	orrmi.w	r3, r3, #32
 8005f88:	6029      	str	r1, [r5, #0]
 8005f8a:	bf48      	it	mi
 8005f8c:	6023      	strmi	r3, [r4, #0]
 8005f8e:	b91e      	cbnz	r6, 8005f98 <_printf_i+0x1a4>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	f023 0320 	bic.w	r3, r3, #32
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	2310      	movs	r3, #16
 8005f9a:	e7a7      	b.n	8005eec <_printf_i+0xf8>
 8005f9c:	4824      	ldr	r0, [pc, #144]	; (8006030 <_printf_i+0x23c>)
 8005f9e:	e7e4      	b.n	8005f6a <_printf_i+0x176>
 8005fa0:	4615      	mov	r5, r2
 8005fa2:	e7bd      	b.n	8005f20 <_printf_i+0x12c>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	6826      	ldr	r6, [r4, #0]
 8005fa8:	6961      	ldr	r1, [r4, #20]
 8005faa:	1d18      	adds	r0, r3, #4
 8005fac:	6028      	str	r0, [r5, #0]
 8005fae:	0635      	lsls	r5, r6, #24
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	d501      	bpl.n	8005fb8 <_printf_i+0x1c4>
 8005fb4:	6019      	str	r1, [r3, #0]
 8005fb6:	e002      	b.n	8005fbe <_printf_i+0x1ca>
 8005fb8:	0670      	lsls	r0, r6, #25
 8005fba:	d5fb      	bpl.n	8005fb4 <_printf_i+0x1c0>
 8005fbc:	8019      	strh	r1, [r3, #0]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	6123      	str	r3, [r4, #16]
 8005fc2:	4615      	mov	r5, r2
 8005fc4:	e7bc      	b.n	8005f40 <_printf_i+0x14c>
 8005fc6:	682b      	ldr	r3, [r5, #0]
 8005fc8:	1d1a      	adds	r2, r3, #4
 8005fca:	602a      	str	r2, [r5, #0]
 8005fcc:	681d      	ldr	r5, [r3, #0]
 8005fce:	6862      	ldr	r2, [r4, #4]
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f7fa f90c 	bl	80001f0 <memchr>
 8005fd8:	b108      	cbz	r0, 8005fde <_printf_i+0x1ea>
 8005fda:	1b40      	subs	r0, r0, r5
 8005fdc:	6060      	str	r0, [r4, #4]
 8005fde:	6863      	ldr	r3, [r4, #4]
 8005fe0:	6123      	str	r3, [r4, #16]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fe8:	e7aa      	b.n	8005f40 <_printf_i+0x14c>
 8005fea:	6923      	ldr	r3, [r4, #16]
 8005fec:	462a      	mov	r2, r5
 8005fee:	4649      	mov	r1, r9
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	47d0      	blx	sl
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d0ad      	beq.n	8005f54 <_printf_i+0x160>
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	079b      	lsls	r3, r3, #30
 8005ffc:	d413      	bmi.n	8006026 <_printf_i+0x232>
 8005ffe:	68e0      	ldr	r0, [r4, #12]
 8006000:	9b03      	ldr	r3, [sp, #12]
 8006002:	4298      	cmp	r0, r3
 8006004:	bfb8      	it	lt
 8006006:	4618      	movlt	r0, r3
 8006008:	e7a6      	b.n	8005f58 <_printf_i+0x164>
 800600a:	2301      	movs	r3, #1
 800600c:	4632      	mov	r2, r6
 800600e:	4649      	mov	r1, r9
 8006010:	4640      	mov	r0, r8
 8006012:	47d0      	blx	sl
 8006014:	3001      	adds	r0, #1
 8006016:	d09d      	beq.n	8005f54 <_printf_i+0x160>
 8006018:	3501      	adds	r5, #1
 800601a:	68e3      	ldr	r3, [r4, #12]
 800601c:	9903      	ldr	r1, [sp, #12]
 800601e:	1a5b      	subs	r3, r3, r1
 8006020:	42ab      	cmp	r3, r5
 8006022:	dcf2      	bgt.n	800600a <_printf_i+0x216>
 8006024:	e7eb      	b.n	8005ffe <_printf_i+0x20a>
 8006026:	2500      	movs	r5, #0
 8006028:	f104 0619 	add.w	r6, r4, #25
 800602c:	e7f5      	b.n	800601a <_printf_i+0x226>
 800602e:	bf00      	nop
 8006030:	08008566 	.word	0x08008566
 8006034:	08008577 	.word	0x08008577

08006038 <std>:
 8006038:	2300      	movs	r3, #0
 800603a:	b510      	push	{r4, lr}
 800603c:	4604      	mov	r4, r0
 800603e:	e9c0 3300 	strd	r3, r3, [r0]
 8006042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006046:	6083      	str	r3, [r0, #8]
 8006048:	8181      	strh	r1, [r0, #12]
 800604a:	6643      	str	r3, [r0, #100]	; 0x64
 800604c:	81c2      	strh	r2, [r0, #14]
 800604e:	6183      	str	r3, [r0, #24]
 8006050:	4619      	mov	r1, r3
 8006052:	2208      	movs	r2, #8
 8006054:	305c      	adds	r0, #92	; 0x5c
 8006056:	f000 f914 	bl	8006282 <memset>
 800605a:	4b0d      	ldr	r3, [pc, #52]	; (8006090 <std+0x58>)
 800605c:	6263      	str	r3, [r4, #36]	; 0x24
 800605e:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <std+0x5c>)
 8006060:	62a3      	str	r3, [r4, #40]	; 0x28
 8006062:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <std+0x60>)
 8006064:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006066:	4b0d      	ldr	r3, [pc, #52]	; (800609c <std+0x64>)
 8006068:	6323      	str	r3, [r4, #48]	; 0x30
 800606a:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <std+0x68>)
 800606c:	6224      	str	r4, [r4, #32]
 800606e:	429c      	cmp	r4, r3
 8006070:	d006      	beq.n	8006080 <std+0x48>
 8006072:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006076:	4294      	cmp	r4, r2
 8006078:	d002      	beq.n	8006080 <std+0x48>
 800607a:	33d0      	adds	r3, #208	; 0xd0
 800607c:	429c      	cmp	r4, r3
 800607e:	d105      	bne.n	800608c <std+0x54>
 8006080:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006088:	f000 b986 	b.w	8006398 <__retarget_lock_init_recursive>
 800608c:	bd10      	pop	{r4, pc}
 800608e:	bf00      	nop
 8006090:	080061fd 	.word	0x080061fd
 8006094:	0800621f 	.word	0x0800621f
 8006098:	08006257 	.word	0x08006257
 800609c:	0800627b 	.word	0x0800627b
 80060a0:	200002ec 	.word	0x200002ec

080060a4 <stdio_exit_handler>:
 80060a4:	4a02      	ldr	r2, [pc, #8]	; (80060b0 <stdio_exit_handler+0xc>)
 80060a6:	4903      	ldr	r1, [pc, #12]	; (80060b4 <stdio_exit_handler+0x10>)
 80060a8:	4803      	ldr	r0, [pc, #12]	; (80060b8 <stdio_exit_handler+0x14>)
 80060aa:	f000 b869 	b.w	8006180 <_fwalk_sglue>
 80060ae:	bf00      	nop
 80060b0:	2000000c 	.word	0x2000000c
 80060b4:	08007d49 	.word	0x08007d49
 80060b8:	20000018 	.word	0x20000018

080060bc <cleanup_stdio>:
 80060bc:	6841      	ldr	r1, [r0, #4]
 80060be:	4b0c      	ldr	r3, [pc, #48]	; (80060f0 <cleanup_stdio+0x34>)
 80060c0:	4299      	cmp	r1, r3
 80060c2:	b510      	push	{r4, lr}
 80060c4:	4604      	mov	r4, r0
 80060c6:	d001      	beq.n	80060cc <cleanup_stdio+0x10>
 80060c8:	f001 fe3e 	bl	8007d48 <_fflush_r>
 80060cc:	68a1      	ldr	r1, [r4, #8]
 80060ce:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <cleanup_stdio+0x38>)
 80060d0:	4299      	cmp	r1, r3
 80060d2:	d002      	beq.n	80060da <cleanup_stdio+0x1e>
 80060d4:	4620      	mov	r0, r4
 80060d6:	f001 fe37 	bl	8007d48 <_fflush_r>
 80060da:	68e1      	ldr	r1, [r4, #12]
 80060dc:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <cleanup_stdio+0x3c>)
 80060de:	4299      	cmp	r1, r3
 80060e0:	d004      	beq.n	80060ec <cleanup_stdio+0x30>
 80060e2:	4620      	mov	r0, r4
 80060e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e8:	f001 be2e 	b.w	8007d48 <_fflush_r>
 80060ec:	bd10      	pop	{r4, pc}
 80060ee:	bf00      	nop
 80060f0:	200002ec 	.word	0x200002ec
 80060f4:	20000354 	.word	0x20000354
 80060f8:	200003bc 	.word	0x200003bc

080060fc <global_stdio_init.part.0>:
 80060fc:	b510      	push	{r4, lr}
 80060fe:	4b0b      	ldr	r3, [pc, #44]	; (800612c <global_stdio_init.part.0+0x30>)
 8006100:	4c0b      	ldr	r4, [pc, #44]	; (8006130 <global_stdio_init.part.0+0x34>)
 8006102:	4a0c      	ldr	r2, [pc, #48]	; (8006134 <global_stdio_init.part.0+0x38>)
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	4620      	mov	r0, r4
 8006108:	2200      	movs	r2, #0
 800610a:	2104      	movs	r1, #4
 800610c:	f7ff ff94 	bl	8006038 <std>
 8006110:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006114:	2201      	movs	r2, #1
 8006116:	2109      	movs	r1, #9
 8006118:	f7ff ff8e 	bl	8006038 <std>
 800611c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006120:	2202      	movs	r2, #2
 8006122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006126:	2112      	movs	r1, #18
 8006128:	f7ff bf86 	b.w	8006038 <std>
 800612c:	20000424 	.word	0x20000424
 8006130:	200002ec 	.word	0x200002ec
 8006134:	080060a5 	.word	0x080060a5

08006138 <__sfp_lock_acquire>:
 8006138:	4801      	ldr	r0, [pc, #4]	; (8006140 <__sfp_lock_acquire+0x8>)
 800613a:	f000 b92e 	b.w	800639a <__retarget_lock_acquire_recursive>
 800613e:	bf00      	nop
 8006140:	2000042d 	.word	0x2000042d

08006144 <__sfp_lock_release>:
 8006144:	4801      	ldr	r0, [pc, #4]	; (800614c <__sfp_lock_release+0x8>)
 8006146:	f000 b929 	b.w	800639c <__retarget_lock_release_recursive>
 800614a:	bf00      	nop
 800614c:	2000042d 	.word	0x2000042d

08006150 <__sinit>:
 8006150:	b510      	push	{r4, lr}
 8006152:	4604      	mov	r4, r0
 8006154:	f7ff fff0 	bl	8006138 <__sfp_lock_acquire>
 8006158:	6a23      	ldr	r3, [r4, #32]
 800615a:	b11b      	cbz	r3, 8006164 <__sinit+0x14>
 800615c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006160:	f7ff bff0 	b.w	8006144 <__sfp_lock_release>
 8006164:	4b04      	ldr	r3, [pc, #16]	; (8006178 <__sinit+0x28>)
 8006166:	6223      	str	r3, [r4, #32]
 8006168:	4b04      	ldr	r3, [pc, #16]	; (800617c <__sinit+0x2c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1f5      	bne.n	800615c <__sinit+0xc>
 8006170:	f7ff ffc4 	bl	80060fc <global_stdio_init.part.0>
 8006174:	e7f2      	b.n	800615c <__sinit+0xc>
 8006176:	bf00      	nop
 8006178:	080060bd 	.word	0x080060bd
 800617c:	20000424 	.word	0x20000424

08006180 <_fwalk_sglue>:
 8006180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006184:	4607      	mov	r7, r0
 8006186:	4688      	mov	r8, r1
 8006188:	4614      	mov	r4, r2
 800618a:	2600      	movs	r6, #0
 800618c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006190:	f1b9 0901 	subs.w	r9, r9, #1
 8006194:	d505      	bpl.n	80061a2 <_fwalk_sglue+0x22>
 8006196:	6824      	ldr	r4, [r4, #0]
 8006198:	2c00      	cmp	r4, #0
 800619a:	d1f7      	bne.n	800618c <_fwalk_sglue+0xc>
 800619c:	4630      	mov	r0, r6
 800619e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061a2:	89ab      	ldrh	r3, [r5, #12]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d907      	bls.n	80061b8 <_fwalk_sglue+0x38>
 80061a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061ac:	3301      	adds	r3, #1
 80061ae:	d003      	beq.n	80061b8 <_fwalk_sglue+0x38>
 80061b0:	4629      	mov	r1, r5
 80061b2:	4638      	mov	r0, r7
 80061b4:	47c0      	blx	r8
 80061b6:	4306      	orrs	r6, r0
 80061b8:	3568      	adds	r5, #104	; 0x68
 80061ba:	e7e9      	b.n	8006190 <_fwalk_sglue+0x10>

080061bc <siprintf>:
 80061bc:	b40e      	push	{r1, r2, r3}
 80061be:	b500      	push	{lr}
 80061c0:	b09c      	sub	sp, #112	; 0x70
 80061c2:	ab1d      	add	r3, sp, #116	; 0x74
 80061c4:	9002      	str	r0, [sp, #8]
 80061c6:	9006      	str	r0, [sp, #24]
 80061c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061cc:	4809      	ldr	r0, [pc, #36]	; (80061f4 <siprintf+0x38>)
 80061ce:	9107      	str	r1, [sp, #28]
 80061d0:	9104      	str	r1, [sp, #16]
 80061d2:	4909      	ldr	r1, [pc, #36]	; (80061f8 <siprintf+0x3c>)
 80061d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80061d8:	9105      	str	r1, [sp, #20]
 80061da:	6800      	ldr	r0, [r0, #0]
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	a902      	add	r1, sp, #8
 80061e0:	f001 fc2e 	bl	8007a40 <_svfiprintf_r>
 80061e4:	9b02      	ldr	r3, [sp, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	b01c      	add	sp, #112	; 0x70
 80061ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80061f0:	b003      	add	sp, #12
 80061f2:	4770      	bx	lr
 80061f4:	20000064 	.word	0x20000064
 80061f8:	ffff0208 	.word	0xffff0208

080061fc <__sread>:
 80061fc:	b510      	push	{r4, lr}
 80061fe:	460c      	mov	r4, r1
 8006200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006204:	f000 f87a 	bl	80062fc <_read_r>
 8006208:	2800      	cmp	r0, #0
 800620a:	bfab      	itete	ge
 800620c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800620e:	89a3      	ldrhlt	r3, [r4, #12]
 8006210:	181b      	addge	r3, r3, r0
 8006212:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006216:	bfac      	ite	ge
 8006218:	6563      	strge	r3, [r4, #84]	; 0x54
 800621a:	81a3      	strhlt	r3, [r4, #12]
 800621c:	bd10      	pop	{r4, pc}

0800621e <__swrite>:
 800621e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006222:	461f      	mov	r7, r3
 8006224:	898b      	ldrh	r3, [r1, #12]
 8006226:	05db      	lsls	r3, r3, #23
 8006228:	4605      	mov	r5, r0
 800622a:	460c      	mov	r4, r1
 800622c:	4616      	mov	r6, r2
 800622e:	d505      	bpl.n	800623c <__swrite+0x1e>
 8006230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006234:	2302      	movs	r3, #2
 8006236:	2200      	movs	r2, #0
 8006238:	f000 f84e 	bl	80062d8 <_lseek_r>
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006246:	81a3      	strh	r3, [r4, #12]
 8006248:	4632      	mov	r2, r6
 800624a:	463b      	mov	r3, r7
 800624c:	4628      	mov	r0, r5
 800624e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006252:	f000 b865 	b.w	8006320 <_write_r>

08006256 <__sseek>:
 8006256:	b510      	push	{r4, lr}
 8006258:	460c      	mov	r4, r1
 800625a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800625e:	f000 f83b 	bl	80062d8 <_lseek_r>
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	bf15      	itete	ne
 8006268:	6560      	strne	r0, [r4, #84]	; 0x54
 800626a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800626e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006272:	81a3      	strheq	r3, [r4, #12]
 8006274:	bf18      	it	ne
 8006276:	81a3      	strhne	r3, [r4, #12]
 8006278:	bd10      	pop	{r4, pc}

0800627a <__sclose>:
 800627a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800627e:	f000 b81b 	b.w	80062b8 <_close_r>

08006282 <memset>:
 8006282:	4402      	add	r2, r0
 8006284:	4603      	mov	r3, r0
 8006286:	4293      	cmp	r3, r2
 8006288:	d100      	bne.n	800628c <memset+0xa>
 800628a:	4770      	bx	lr
 800628c:	f803 1b01 	strb.w	r1, [r3], #1
 8006290:	e7f9      	b.n	8006286 <memset+0x4>

08006292 <strcat>:
 8006292:	b510      	push	{r4, lr}
 8006294:	4602      	mov	r2, r0
 8006296:	7814      	ldrb	r4, [r2, #0]
 8006298:	4613      	mov	r3, r2
 800629a:	3201      	adds	r2, #1
 800629c:	2c00      	cmp	r4, #0
 800629e:	d1fa      	bne.n	8006296 <strcat+0x4>
 80062a0:	3b01      	subs	r3, #1
 80062a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062aa:	2a00      	cmp	r2, #0
 80062ac:	d1f9      	bne.n	80062a2 <strcat+0x10>
 80062ae:	bd10      	pop	{r4, pc}

080062b0 <_localeconv_r>:
 80062b0:	4800      	ldr	r0, [pc, #0]	; (80062b4 <_localeconv_r+0x4>)
 80062b2:	4770      	bx	lr
 80062b4:	20000158 	.word	0x20000158

080062b8 <_close_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4d06      	ldr	r5, [pc, #24]	; (80062d4 <_close_r+0x1c>)
 80062bc:	2300      	movs	r3, #0
 80062be:	4604      	mov	r4, r0
 80062c0:	4608      	mov	r0, r1
 80062c2:	602b      	str	r3, [r5, #0]
 80062c4:	f7fb f99d 	bl	8001602 <_close>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d102      	bne.n	80062d2 <_close_r+0x1a>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	b103      	cbz	r3, 80062d2 <_close_r+0x1a>
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	20000428 	.word	0x20000428

080062d8 <_lseek_r>:
 80062d8:	b538      	push	{r3, r4, r5, lr}
 80062da:	4d07      	ldr	r5, [pc, #28]	; (80062f8 <_lseek_r+0x20>)
 80062dc:	4604      	mov	r4, r0
 80062de:	4608      	mov	r0, r1
 80062e0:	4611      	mov	r1, r2
 80062e2:	2200      	movs	r2, #0
 80062e4:	602a      	str	r2, [r5, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	f7fb f9b2 	bl	8001650 <_lseek>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_lseek_r+0x1e>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_lseek_r+0x1e>
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	20000428 	.word	0x20000428

080062fc <_read_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4d07      	ldr	r5, [pc, #28]	; (800631c <_read_r+0x20>)
 8006300:	4604      	mov	r4, r0
 8006302:	4608      	mov	r0, r1
 8006304:	4611      	mov	r1, r2
 8006306:	2200      	movs	r2, #0
 8006308:	602a      	str	r2, [r5, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	f7fb f940 	bl	8001590 <_read>
 8006310:	1c43      	adds	r3, r0, #1
 8006312:	d102      	bne.n	800631a <_read_r+0x1e>
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	b103      	cbz	r3, 800631a <_read_r+0x1e>
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	bd38      	pop	{r3, r4, r5, pc}
 800631c:	20000428 	.word	0x20000428

08006320 <_write_r>:
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	4d07      	ldr	r5, [pc, #28]	; (8006340 <_write_r+0x20>)
 8006324:	4604      	mov	r4, r0
 8006326:	4608      	mov	r0, r1
 8006328:	4611      	mov	r1, r2
 800632a:	2200      	movs	r2, #0
 800632c:	602a      	str	r2, [r5, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	f7fb f94b 	bl	80015ca <_write>
 8006334:	1c43      	adds	r3, r0, #1
 8006336:	d102      	bne.n	800633e <_write_r+0x1e>
 8006338:	682b      	ldr	r3, [r5, #0]
 800633a:	b103      	cbz	r3, 800633e <_write_r+0x1e>
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	bd38      	pop	{r3, r4, r5, pc}
 8006340:	20000428 	.word	0x20000428

08006344 <__errno>:
 8006344:	4b01      	ldr	r3, [pc, #4]	; (800634c <__errno+0x8>)
 8006346:	6818      	ldr	r0, [r3, #0]
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	20000064 	.word	0x20000064

08006350 <__libc_init_array>:
 8006350:	b570      	push	{r4, r5, r6, lr}
 8006352:	4d0d      	ldr	r5, [pc, #52]	; (8006388 <__libc_init_array+0x38>)
 8006354:	4c0d      	ldr	r4, [pc, #52]	; (800638c <__libc_init_array+0x3c>)
 8006356:	1b64      	subs	r4, r4, r5
 8006358:	10a4      	asrs	r4, r4, #2
 800635a:	2600      	movs	r6, #0
 800635c:	42a6      	cmp	r6, r4
 800635e:	d109      	bne.n	8006374 <__libc_init_array+0x24>
 8006360:	4d0b      	ldr	r5, [pc, #44]	; (8006390 <__libc_init_array+0x40>)
 8006362:	4c0c      	ldr	r4, [pc, #48]	; (8006394 <__libc_init_array+0x44>)
 8006364:	f002 f894 	bl	8008490 <_init>
 8006368:	1b64      	subs	r4, r4, r5
 800636a:	10a4      	asrs	r4, r4, #2
 800636c:	2600      	movs	r6, #0
 800636e:	42a6      	cmp	r6, r4
 8006370:	d105      	bne.n	800637e <__libc_init_array+0x2e>
 8006372:	bd70      	pop	{r4, r5, r6, pc}
 8006374:	f855 3b04 	ldr.w	r3, [r5], #4
 8006378:	4798      	blx	r3
 800637a:	3601      	adds	r6, #1
 800637c:	e7ee      	b.n	800635c <__libc_init_array+0xc>
 800637e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006382:	4798      	blx	r3
 8006384:	3601      	adds	r6, #1
 8006386:	e7f2      	b.n	800636e <__libc_init_array+0x1e>
 8006388:	080088c4 	.word	0x080088c4
 800638c:	080088c4 	.word	0x080088c4
 8006390:	080088c4 	.word	0x080088c4
 8006394:	080088c8 	.word	0x080088c8

08006398 <__retarget_lock_init_recursive>:
 8006398:	4770      	bx	lr

0800639a <__retarget_lock_acquire_recursive>:
 800639a:	4770      	bx	lr

0800639c <__retarget_lock_release_recursive>:
 800639c:	4770      	bx	lr

0800639e <quorem>:
 800639e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a2:	6903      	ldr	r3, [r0, #16]
 80063a4:	690c      	ldr	r4, [r1, #16]
 80063a6:	42a3      	cmp	r3, r4
 80063a8:	4607      	mov	r7, r0
 80063aa:	db7e      	blt.n	80064aa <quorem+0x10c>
 80063ac:	3c01      	subs	r4, #1
 80063ae:	f101 0814 	add.w	r8, r1, #20
 80063b2:	f100 0514 	add.w	r5, r0, #20
 80063b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063c4:	3301      	adds	r3, #1
 80063c6:	429a      	cmp	r2, r3
 80063c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80063d4:	d331      	bcc.n	800643a <quorem+0x9c>
 80063d6:	f04f 0e00 	mov.w	lr, #0
 80063da:	4640      	mov	r0, r8
 80063dc:	46ac      	mov	ip, r5
 80063de:	46f2      	mov	sl, lr
 80063e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80063e4:	b293      	uxth	r3, r2
 80063e6:	fb06 e303 	mla	r3, r6, r3, lr
 80063ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063ee:	0c1a      	lsrs	r2, r3, #16
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	ebaa 0303 	sub.w	r3, sl, r3
 80063f6:	f8dc a000 	ldr.w	sl, [ip]
 80063fa:	fa13 f38a 	uxtah	r3, r3, sl
 80063fe:	fb06 220e 	mla	r2, r6, lr, r2
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	9b00      	ldr	r3, [sp, #0]
 8006406:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800640a:	b292      	uxth	r2, r2
 800640c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006410:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006414:	f8bd 3000 	ldrh.w	r3, [sp]
 8006418:	4581      	cmp	r9, r0
 800641a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800641e:	f84c 3b04 	str.w	r3, [ip], #4
 8006422:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006426:	d2db      	bcs.n	80063e0 <quorem+0x42>
 8006428:	f855 300b 	ldr.w	r3, [r5, fp]
 800642c:	b92b      	cbnz	r3, 800643a <quorem+0x9c>
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	3b04      	subs	r3, #4
 8006432:	429d      	cmp	r5, r3
 8006434:	461a      	mov	r2, r3
 8006436:	d32c      	bcc.n	8006492 <quorem+0xf4>
 8006438:	613c      	str	r4, [r7, #16]
 800643a:	4638      	mov	r0, r7
 800643c:	f001 f9a6 	bl	800778c <__mcmp>
 8006440:	2800      	cmp	r0, #0
 8006442:	db22      	blt.n	800648a <quorem+0xec>
 8006444:	3601      	adds	r6, #1
 8006446:	4629      	mov	r1, r5
 8006448:	2000      	movs	r0, #0
 800644a:	f858 2b04 	ldr.w	r2, [r8], #4
 800644e:	f8d1 c000 	ldr.w	ip, [r1]
 8006452:	b293      	uxth	r3, r2
 8006454:	1ac3      	subs	r3, r0, r3
 8006456:	0c12      	lsrs	r2, r2, #16
 8006458:	fa13 f38c 	uxtah	r3, r3, ip
 800645c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006460:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006464:	b29b      	uxth	r3, r3
 8006466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800646a:	45c1      	cmp	r9, r8
 800646c:	f841 3b04 	str.w	r3, [r1], #4
 8006470:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006474:	d2e9      	bcs.n	800644a <quorem+0xac>
 8006476:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800647a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800647e:	b922      	cbnz	r2, 800648a <quorem+0xec>
 8006480:	3b04      	subs	r3, #4
 8006482:	429d      	cmp	r5, r3
 8006484:	461a      	mov	r2, r3
 8006486:	d30a      	bcc.n	800649e <quorem+0x100>
 8006488:	613c      	str	r4, [r7, #16]
 800648a:	4630      	mov	r0, r6
 800648c:	b003      	add	sp, #12
 800648e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006492:	6812      	ldr	r2, [r2, #0]
 8006494:	3b04      	subs	r3, #4
 8006496:	2a00      	cmp	r2, #0
 8006498:	d1ce      	bne.n	8006438 <quorem+0x9a>
 800649a:	3c01      	subs	r4, #1
 800649c:	e7c9      	b.n	8006432 <quorem+0x94>
 800649e:	6812      	ldr	r2, [r2, #0]
 80064a0:	3b04      	subs	r3, #4
 80064a2:	2a00      	cmp	r2, #0
 80064a4:	d1f0      	bne.n	8006488 <quorem+0xea>
 80064a6:	3c01      	subs	r4, #1
 80064a8:	e7eb      	b.n	8006482 <quorem+0xe4>
 80064aa:	2000      	movs	r0, #0
 80064ac:	e7ee      	b.n	800648c <quorem+0xee>
	...

080064b0 <_dtoa_r>:
 80064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	ed2d 8b04 	vpush	{d8-d9}
 80064b8:	69c5      	ldr	r5, [r0, #28]
 80064ba:	b093      	sub	sp, #76	; 0x4c
 80064bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80064c0:	ec57 6b10 	vmov	r6, r7, d0
 80064c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064c8:	9107      	str	r1, [sp, #28]
 80064ca:	4604      	mov	r4, r0
 80064cc:	920a      	str	r2, [sp, #40]	; 0x28
 80064ce:	930d      	str	r3, [sp, #52]	; 0x34
 80064d0:	b975      	cbnz	r5, 80064f0 <_dtoa_r+0x40>
 80064d2:	2010      	movs	r0, #16
 80064d4:	f000 fe2a 	bl	800712c <malloc>
 80064d8:	4602      	mov	r2, r0
 80064da:	61e0      	str	r0, [r4, #28]
 80064dc:	b920      	cbnz	r0, 80064e8 <_dtoa_r+0x38>
 80064de:	4bae      	ldr	r3, [pc, #696]	; (8006798 <_dtoa_r+0x2e8>)
 80064e0:	21ef      	movs	r1, #239	; 0xef
 80064e2:	48ae      	ldr	r0, [pc, #696]	; (800679c <_dtoa_r+0x2ec>)
 80064e4:	f001 fc90 	bl	8007e08 <__assert_func>
 80064e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064ec:	6005      	str	r5, [r0, #0]
 80064ee:	60c5      	str	r5, [r0, #12]
 80064f0:	69e3      	ldr	r3, [r4, #28]
 80064f2:	6819      	ldr	r1, [r3, #0]
 80064f4:	b151      	cbz	r1, 800650c <_dtoa_r+0x5c>
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	604a      	str	r2, [r1, #4]
 80064fa:	2301      	movs	r3, #1
 80064fc:	4093      	lsls	r3, r2
 80064fe:	608b      	str	r3, [r1, #8]
 8006500:	4620      	mov	r0, r4
 8006502:	f000 ff07 	bl	8007314 <_Bfree>
 8006506:	69e3      	ldr	r3, [r4, #28]
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	1e3b      	subs	r3, r7, #0
 800650e:	bfbb      	ittet	lt
 8006510:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006514:	9303      	strlt	r3, [sp, #12]
 8006516:	2300      	movge	r3, #0
 8006518:	2201      	movlt	r2, #1
 800651a:	bfac      	ite	ge
 800651c:	f8c8 3000 	strge.w	r3, [r8]
 8006520:	f8c8 2000 	strlt.w	r2, [r8]
 8006524:	4b9e      	ldr	r3, [pc, #632]	; (80067a0 <_dtoa_r+0x2f0>)
 8006526:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800652a:	ea33 0308 	bics.w	r3, r3, r8
 800652e:	d11b      	bne.n	8006568 <_dtoa_r+0xb8>
 8006530:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006532:	f242 730f 	movw	r3, #9999	; 0x270f
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800653c:	4333      	orrs	r3, r6
 800653e:	f000 8593 	beq.w	8007068 <_dtoa_r+0xbb8>
 8006542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006544:	b963      	cbnz	r3, 8006560 <_dtoa_r+0xb0>
 8006546:	4b97      	ldr	r3, [pc, #604]	; (80067a4 <_dtoa_r+0x2f4>)
 8006548:	e027      	b.n	800659a <_dtoa_r+0xea>
 800654a:	4b97      	ldr	r3, [pc, #604]	; (80067a8 <_dtoa_r+0x2f8>)
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	3308      	adds	r3, #8
 8006550:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	9800      	ldr	r0, [sp, #0]
 8006556:	b013      	add	sp, #76	; 0x4c
 8006558:	ecbd 8b04 	vpop	{d8-d9}
 800655c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006560:	4b90      	ldr	r3, [pc, #576]	; (80067a4 <_dtoa_r+0x2f4>)
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	3303      	adds	r3, #3
 8006566:	e7f3      	b.n	8006550 <_dtoa_r+0xa0>
 8006568:	ed9d 7b02 	vldr	d7, [sp, #8]
 800656c:	2200      	movs	r2, #0
 800656e:	ec51 0b17 	vmov	r0, r1, d7
 8006572:	eeb0 8a47 	vmov.f32	s16, s14
 8006576:	eef0 8a67 	vmov.f32	s17, s15
 800657a:	2300      	movs	r3, #0
 800657c:	f7fa fab4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006580:	4681      	mov	r9, r0
 8006582:	b160      	cbz	r0, 800659e <_dtoa_r+0xee>
 8006584:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006586:	2301      	movs	r3, #1
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 8568 	beq.w	8007062 <_dtoa_r+0xbb2>
 8006592:	4b86      	ldr	r3, [pc, #536]	; (80067ac <_dtoa_r+0x2fc>)
 8006594:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	3b01      	subs	r3, #1
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	e7da      	b.n	8006554 <_dtoa_r+0xa4>
 800659e:	aa10      	add	r2, sp, #64	; 0x40
 80065a0:	a911      	add	r1, sp, #68	; 0x44
 80065a2:	4620      	mov	r0, r4
 80065a4:	eeb0 0a48 	vmov.f32	s0, s16
 80065a8:	eef0 0a68 	vmov.f32	s1, s17
 80065ac:	f001 f994 	bl	80078d8 <__d2b>
 80065b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80065b4:	4682      	mov	sl, r0
 80065b6:	2d00      	cmp	r5, #0
 80065b8:	d07f      	beq.n	80066ba <_dtoa_r+0x20a>
 80065ba:	ee18 3a90 	vmov	r3, s17
 80065be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80065c6:	ec51 0b18 	vmov	r0, r1, d8
 80065ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80065ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80065d6:	4619      	mov	r1, r3
 80065d8:	2200      	movs	r2, #0
 80065da:	4b75      	ldr	r3, [pc, #468]	; (80067b0 <_dtoa_r+0x300>)
 80065dc:	f7f9 fe64 	bl	80002a8 <__aeabi_dsub>
 80065e0:	a367      	add	r3, pc, #412	; (adr r3, 8006780 <_dtoa_r+0x2d0>)
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	f7fa f817 	bl	8000618 <__aeabi_dmul>
 80065ea:	a367      	add	r3, pc, #412	; (adr r3, 8006788 <_dtoa_r+0x2d8>)
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f7f9 fe5c 	bl	80002ac <__adddf3>
 80065f4:	4606      	mov	r6, r0
 80065f6:	4628      	mov	r0, r5
 80065f8:	460f      	mov	r7, r1
 80065fa:	f7f9 ffa3 	bl	8000544 <__aeabi_i2d>
 80065fe:	a364      	add	r3, pc, #400	; (adr r3, 8006790 <_dtoa_r+0x2e0>)
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	f7fa f808 	bl	8000618 <__aeabi_dmul>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	4630      	mov	r0, r6
 800660e:	4639      	mov	r1, r7
 8006610:	f7f9 fe4c 	bl	80002ac <__adddf3>
 8006614:	4606      	mov	r6, r0
 8006616:	460f      	mov	r7, r1
 8006618:	f7fa faae 	bl	8000b78 <__aeabi_d2iz>
 800661c:	2200      	movs	r2, #0
 800661e:	4683      	mov	fp, r0
 8006620:	2300      	movs	r3, #0
 8006622:	4630      	mov	r0, r6
 8006624:	4639      	mov	r1, r7
 8006626:	f7fa fa69 	bl	8000afc <__aeabi_dcmplt>
 800662a:	b148      	cbz	r0, 8006640 <_dtoa_r+0x190>
 800662c:	4658      	mov	r0, fp
 800662e:	f7f9 ff89 	bl	8000544 <__aeabi_i2d>
 8006632:	4632      	mov	r2, r6
 8006634:	463b      	mov	r3, r7
 8006636:	f7fa fa57 	bl	8000ae8 <__aeabi_dcmpeq>
 800663a:	b908      	cbnz	r0, 8006640 <_dtoa_r+0x190>
 800663c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006640:	f1bb 0f16 	cmp.w	fp, #22
 8006644:	d857      	bhi.n	80066f6 <_dtoa_r+0x246>
 8006646:	4b5b      	ldr	r3, [pc, #364]	; (80067b4 <_dtoa_r+0x304>)
 8006648:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006650:	ec51 0b18 	vmov	r0, r1, d8
 8006654:	f7fa fa52 	bl	8000afc <__aeabi_dcmplt>
 8006658:	2800      	cmp	r0, #0
 800665a:	d04e      	beq.n	80066fa <_dtoa_r+0x24a>
 800665c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006660:	2300      	movs	r3, #0
 8006662:	930c      	str	r3, [sp, #48]	; 0x30
 8006664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006666:	1b5b      	subs	r3, r3, r5
 8006668:	1e5a      	subs	r2, r3, #1
 800666a:	bf45      	ittet	mi
 800666c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006670:	9305      	strmi	r3, [sp, #20]
 8006672:	2300      	movpl	r3, #0
 8006674:	2300      	movmi	r3, #0
 8006676:	9206      	str	r2, [sp, #24]
 8006678:	bf54      	ite	pl
 800667a:	9305      	strpl	r3, [sp, #20]
 800667c:	9306      	strmi	r3, [sp, #24]
 800667e:	f1bb 0f00 	cmp.w	fp, #0
 8006682:	db3c      	blt.n	80066fe <_dtoa_r+0x24e>
 8006684:	9b06      	ldr	r3, [sp, #24]
 8006686:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800668a:	445b      	add	r3, fp
 800668c:	9306      	str	r3, [sp, #24]
 800668e:	2300      	movs	r3, #0
 8006690:	9308      	str	r3, [sp, #32]
 8006692:	9b07      	ldr	r3, [sp, #28]
 8006694:	2b09      	cmp	r3, #9
 8006696:	d868      	bhi.n	800676a <_dtoa_r+0x2ba>
 8006698:	2b05      	cmp	r3, #5
 800669a:	bfc4      	itt	gt
 800669c:	3b04      	subgt	r3, #4
 800669e:	9307      	strgt	r3, [sp, #28]
 80066a0:	9b07      	ldr	r3, [sp, #28]
 80066a2:	f1a3 0302 	sub.w	r3, r3, #2
 80066a6:	bfcc      	ite	gt
 80066a8:	2500      	movgt	r5, #0
 80066aa:	2501      	movle	r5, #1
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	f200 8085 	bhi.w	80067bc <_dtoa_r+0x30c>
 80066b2:	e8df f003 	tbb	[pc, r3]
 80066b6:	3b2e      	.short	0x3b2e
 80066b8:	5839      	.short	0x5839
 80066ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80066be:	441d      	add	r5, r3
 80066c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80066c4:	2b20      	cmp	r3, #32
 80066c6:	bfc1      	itttt	gt
 80066c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066cc:	fa08 f803 	lslgt.w	r8, r8, r3
 80066d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80066d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80066d8:	bfd6      	itet	le
 80066da:	f1c3 0320 	rsble	r3, r3, #32
 80066de:	ea48 0003 	orrgt.w	r0, r8, r3
 80066e2:	fa06 f003 	lslle.w	r0, r6, r3
 80066e6:	f7f9 ff1d 	bl	8000524 <__aeabi_ui2d>
 80066ea:	2201      	movs	r2, #1
 80066ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80066f0:	3d01      	subs	r5, #1
 80066f2:	920e      	str	r2, [sp, #56]	; 0x38
 80066f4:	e76f      	b.n	80065d6 <_dtoa_r+0x126>
 80066f6:	2301      	movs	r3, #1
 80066f8:	e7b3      	b.n	8006662 <_dtoa_r+0x1b2>
 80066fa:	900c      	str	r0, [sp, #48]	; 0x30
 80066fc:	e7b2      	b.n	8006664 <_dtoa_r+0x1b4>
 80066fe:	9b05      	ldr	r3, [sp, #20]
 8006700:	eba3 030b 	sub.w	r3, r3, fp
 8006704:	9305      	str	r3, [sp, #20]
 8006706:	f1cb 0300 	rsb	r3, fp, #0
 800670a:	9308      	str	r3, [sp, #32]
 800670c:	2300      	movs	r3, #0
 800670e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006710:	e7bf      	b.n	8006692 <_dtoa_r+0x1e2>
 8006712:	2300      	movs	r3, #0
 8006714:	9309      	str	r3, [sp, #36]	; 0x24
 8006716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006718:	2b00      	cmp	r3, #0
 800671a:	dc52      	bgt.n	80067c2 <_dtoa_r+0x312>
 800671c:	2301      	movs	r3, #1
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	461a      	mov	r2, r3
 8006724:	920a      	str	r2, [sp, #40]	; 0x28
 8006726:	e00b      	b.n	8006740 <_dtoa_r+0x290>
 8006728:	2301      	movs	r3, #1
 800672a:	e7f3      	b.n	8006714 <_dtoa_r+0x264>
 800672c:	2300      	movs	r3, #0
 800672e:	9309      	str	r3, [sp, #36]	; 0x24
 8006730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006732:	445b      	add	r3, fp
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	3301      	adds	r3, #1
 8006738:	2b01      	cmp	r3, #1
 800673a:	9304      	str	r3, [sp, #16]
 800673c:	bfb8      	it	lt
 800673e:	2301      	movlt	r3, #1
 8006740:	69e0      	ldr	r0, [r4, #28]
 8006742:	2100      	movs	r1, #0
 8006744:	2204      	movs	r2, #4
 8006746:	f102 0614 	add.w	r6, r2, #20
 800674a:	429e      	cmp	r6, r3
 800674c:	d93d      	bls.n	80067ca <_dtoa_r+0x31a>
 800674e:	6041      	str	r1, [r0, #4]
 8006750:	4620      	mov	r0, r4
 8006752:	f000 fd9f 	bl	8007294 <_Balloc>
 8006756:	9000      	str	r0, [sp, #0]
 8006758:	2800      	cmp	r0, #0
 800675a:	d139      	bne.n	80067d0 <_dtoa_r+0x320>
 800675c:	4b16      	ldr	r3, [pc, #88]	; (80067b8 <_dtoa_r+0x308>)
 800675e:	4602      	mov	r2, r0
 8006760:	f240 11af 	movw	r1, #431	; 0x1af
 8006764:	e6bd      	b.n	80064e2 <_dtoa_r+0x32>
 8006766:	2301      	movs	r3, #1
 8006768:	e7e1      	b.n	800672e <_dtoa_r+0x27e>
 800676a:	2501      	movs	r5, #1
 800676c:	2300      	movs	r3, #0
 800676e:	9307      	str	r3, [sp, #28]
 8006770:	9509      	str	r5, [sp, #36]	; 0x24
 8006772:	f04f 33ff 	mov.w	r3, #4294967295
 8006776:	9301      	str	r3, [sp, #4]
 8006778:	9304      	str	r3, [sp, #16]
 800677a:	2200      	movs	r2, #0
 800677c:	2312      	movs	r3, #18
 800677e:	e7d1      	b.n	8006724 <_dtoa_r+0x274>
 8006780:	636f4361 	.word	0x636f4361
 8006784:	3fd287a7 	.word	0x3fd287a7
 8006788:	8b60c8b3 	.word	0x8b60c8b3
 800678c:	3fc68a28 	.word	0x3fc68a28
 8006790:	509f79fb 	.word	0x509f79fb
 8006794:	3fd34413 	.word	0x3fd34413
 8006798:	08008595 	.word	0x08008595
 800679c:	080085ac 	.word	0x080085ac
 80067a0:	7ff00000 	.word	0x7ff00000
 80067a4:	08008591 	.word	0x08008591
 80067a8:	08008588 	.word	0x08008588
 80067ac:	08008565 	.word	0x08008565
 80067b0:	3ff80000 	.word	0x3ff80000
 80067b4:	08008698 	.word	0x08008698
 80067b8:	08008604 	.word	0x08008604
 80067bc:	2301      	movs	r3, #1
 80067be:	9309      	str	r3, [sp, #36]	; 0x24
 80067c0:	e7d7      	b.n	8006772 <_dtoa_r+0x2c2>
 80067c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	9304      	str	r3, [sp, #16]
 80067c8:	e7ba      	b.n	8006740 <_dtoa_r+0x290>
 80067ca:	3101      	adds	r1, #1
 80067cc:	0052      	lsls	r2, r2, #1
 80067ce:	e7ba      	b.n	8006746 <_dtoa_r+0x296>
 80067d0:	69e3      	ldr	r3, [r4, #28]
 80067d2:	9a00      	ldr	r2, [sp, #0]
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	9b04      	ldr	r3, [sp, #16]
 80067d8:	2b0e      	cmp	r3, #14
 80067da:	f200 80a8 	bhi.w	800692e <_dtoa_r+0x47e>
 80067de:	2d00      	cmp	r5, #0
 80067e0:	f000 80a5 	beq.w	800692e <_dtoa_r+0x47e>
 80067e4:	f1bb 0f00 	cmp.w	fp, #0
 80067e8:	dd38      	ble.n	800685c <_dtoa_r+0x3ac>
 80067ea:	4bc0      	ldr	r3, [pc, #768]	; (8006aec <_dtoa_r+0x63c>)
 80067ec:	f00b 020f 	and.w	r2, fp, #15
 80067f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80067f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80067fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006800:	d019      	beq.n	8006836 <_dtoa_r+0x386>
 8006802:	4bbb      	ldr	r3, [pc, #748]	; (8006af0 <_dtoa_r+0x640>)
 8006804:	ec51 0b18 	vmov	r0, r1, d8
 8006808:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800680c:	f7fa f82e 	bl	800086c <__aeabi_ddiv>
 8006810:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006814:	f008 080f 	and.w	r8, r8, #15
 8006818:	2503      	movs	r5, #3
 800681a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006af0 <_dtoa_r+0x640>
 800681e:	f1b8 0f00 	cmp.w	r8, #0
 8006822:	d10a      	bne.n	800683a <_dtoa_r+0x38a>
 8006824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006828:	4632      	mov	r2, r6
 800682a:	463b      	mov	r3, r7
 800682c:	f7fa f81e 	bl	800086c <__aeabi_ddiv>
 8006830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006834:	e02b      	b.n	800688e <_dtoa_r+0x3de>
 8006836:	2502      	movs	r5, #2
 8006838:	e7ef      	b.n	800681a <_dtoa_r+0x36a>
 800683a:	f018 0f01 	tst.w	r8, #1
 800683e:	d008      	beq.n	8006852 <_dtoa_r+0x3a2>
 8006840:	4630      	mov	r0, r6
 8006842:	4639      	mov	r1, r7
 8006844:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006848:	f7f9 fee6 	bl	8000618 <__aeabi_dmul>
 800684c:	3501      	adds	r5, #1
 800684e:	4606      	mov	r6, r0
 8006850:	460f      	mov	r7, r1
 8006852:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006856:	f109 0908 	add.w	r9, r9, #8
 800685a:	e7e0      	b.n	800681e <_dtoa_r+0x36e>
 800685c:	f000 809f 	beq.w	800699e <_dtoa_r+0x4ee>
 8006860:	f1cb 0600 	rsb	r6, fp, #0
 8006864:	4ba1      	ldr	r3, [pc, #644]	; (8006aec <_dtoa_r+0x63c>)
 8006866:	4fa2      	ldr	r7, [pc, #648]	; (8006af0 <_dtoa_r+0x640>)
 8006868:	f006 020f 	and.w	r2, r6, #15
 800686c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	ec51 0b18 	vmov	r0, r1, d8
 8006878:	f7f9 fece 	bl	8000618 <__aeabi_dmul>
 800687c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006880:	1136      	asrs	r6, r6, #4
 8006882:	2300      	movs	r3, #0
 8006884:	2502      	movs	r5, #2
 8006886:	2e00      	cmp	r6, #0
 8006888:	d17e      	bne.n	8006988 <_dtoa_r+0x4d8>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1d0      	bne.n	8006830 <_dtoa_r+0x380>
 800688e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006890:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 8084 	beq.w	80069a2 <_dtoa_r+0x4f2>
 800689a:	4b96      	ldr	r3, [pc, #600]	; (8006af4 <_dtoa_r+0x644>)
 800689c:	2200      	movs	r2, #0
 800689e:	4640      	mov	r0, r8
 80068a0:	4649      	mov	r1, r9
 80068a2:	f7fa f92b 	bl	8000afc <__aeabi_dcmplt>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d07b      	beq.n	80069a2 <_dtoa_r+0x4f2>
 80068aa:	9b04      	ldr	r3, [sp, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d078      	beq.n	80069a2 <_dtoa_r+0x4f2>
 80068b0:	9b01      	ldr	r3, [sp, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	dd39      	ble.n	800692a <_dtoa_r+0x47a>
 80068b6:	4b90      	ldr	r3, [pc, #576]	; (8006af8 <_dtoa_r+0x648>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	4640      	mov	r0, r8
 80068bc:	4649      	mov	r1, r9
 80068be:	f7f9 feab 	bl	8000618 <__aeabi_dmul>
 80068c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068c6:	9e01      	ldr	r6, [sp, #4]
 80068c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80068cc:	3501      	adds	r5, #1
 80068ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80068d2:	4628      	mov	r0, r5
 80068d4:	f7f9 fe36 	bl	8000544 <__aeabi_i2d>
 80068d8:	4642      	mov	r2, r8
 80068da:	464b      	mov	r3, r9
 80068dc:	f7f9 fe9c 	bl	8000618 <__aeabi_dmul>
 80068e0:	4b86      	ldr	r3, [pc, #536]	; (8006afc <_dtoa_r+0x64c>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	f7f9 fce2 	bl	80002ac <__adddf3>
 80068e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80068ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068f0:	9303      	str	r3, [sp, #12]
 80068f2:	2e00      	cmp	r6, #0
 80068f4:	d158      	bne.n	80069a8 <_dtoa_r+0x4f8>
 80068f6:	4b82      	ldr	r3, [pc, #520]	; (8006b00 <_dtoa_r+0x650>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	4640      	mov	r0, r8
 80068fc:	4649      	mov	r1, r9
 80068fe:	f7f9 fcd3 	bl	80002a8 <__aeabi_dsub>
 8006902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006906:	4680      	mov	r8, r0
 8006908:	4689      	mov	r9, r1
 800690a:	f7fa f915 	bl	8000b38 <__aeabi_dcmpgt>
 800690e:	2800      	cmp	r0, #0
 8006910:	f040 8296 	bne.w	8006e40 <_dtoa_r+0x990>
 8006914:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006918:	4640      	mov	r0, r8
 800691a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800691e:	4649      	mov	r1, r9
 8006920:	f7fa f8ec 	bl	8000afc <__aeabi_dcmplt>
 8006924:	2800      	cmp	r0, #0
 8006926:	f040 8289 	bne.w	8006e3c <_dtoa_r+0x98c>
 800692a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800692e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006930:	2b00      	cmp	r3, #0
 8006932:	f2c0 814e 	blt.w	8006bd2 <_dtoa_r+0x722>
 8006936:	f1bb 0f0e 	cmp.w	fp, #14
 800693a:	f300 814a 	bgt.w	8006bd2 <_dtoa_r+0x722>
 800693e:	4b6b      	ldr	r3, [pc, #428]	; (8006aec <_dtoa_r+0x63c>)
 8006940:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006944:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800694a:	2b00      	cmp	r3, #0
 800694c:	f280 80dc 	bge.w	8006b08 <_dtoa_r+0x658>
 8006950:	9b04      	ldr	r3, [sp, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f300 80d8 	bgt.w	8006b08 <_dtoa_r+0x658>
 8006958:	f040 826f 	bne.w	8006e3a <_dtoa_r+0x98a>
 800695c:	4b68      	ldr	r3, [pc, #416]	; (8006b00 <_dtoa_r+0x650>)
 800695e:	2200      	movs	r2, #0
 8006960:	4640      	mov	r0, r8
 8006962:	4649      	mov	r1, r9
 8006964:	f7f9 fe58 	bl	8000618 <__aeabi_dmul>
 8006968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800696c:	f7fa f8da 	bl	8000b24 <__aeabi_dcmpge>
 8006970:	9e04      	ldr	r6, [sp, #16]
 8006972:	4637      	mov	r7, r6
 8006974:	2800      	cmp	r0, #0
 8006976:	f040 8245 	bne.w	8006e04 <_dtoa_r+0x954>
 800697a:	9d00      	ldr	r5, [sp, #0]
 800697c:	2331      	movs	r3, #49	; 0x31
 800697e:	f805 3b01 	strb.w	r3, [r5], #1
 8006982:	f10b 0b01 	add.w	fp, fp, #1
 8006986:	e241      	b.n	8006e0c <_dtoa_r+0x95c>
 8006988:	07f2      	lsls	r2, r6, #31
 800698a:	d505      	bpl.n	8006998 <_dtoa_r+0x4e8>
 800698c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006990:	f7f9 fe42 	bl	8000618 <__aeabi_dmul>
 8006994:	3501      	adds	r5, #1
 8006996:	2301      	movs	r3, #1
 8006998:	1076      	asrs	r6, r6, #1
 800699a:	3708      	adds	r7, #8
 800699c:	e773      	b.n	8006886 <_dtoa_r+0x3d6>
 800699e:	2502      	movs	r5, #2
 80069a0:	e775      	b.n	800688e <_dtoa_r+0x3de>
 80069a2:	9e04      	ldr	r6, [sp, #16]
 80069a4:	465f      	mov	r7, fp
 80069a6:	e792      	b.n	80068ce <_dtoa_r+0x41e>
 80069a8:	9900      	ldr	r1, [sp, #0]
 80069aa:	4b50      	ldr	r3, [pc, #320]	; (8006aec <_dtoa_r+0x63c>)
 80069ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069b0:	4431      	add	r1, r6
 80069b2:	9102      	str	r1, [sp, #8]
 80069b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069b6:	eeb0 9a47 	vmov.f32	s18, s14
 80069ba:	eef0 9a67 	vmov.f32	s19, s15
 80069be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80069c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069c6:	2900      	cmp	r1, #0
 80069c8:	d044      	beq.n	8006a54 <_dtoa_r+0x5a4>
 80069ca:	494e      	ldr	r1, [pc, #312]	; (8006b04 <_dtoa_r+0x654>)
 80069cc:	2000      	movs	r0, #0
 80069ce:	f7f9 ff4d 	bl	800086c <__aeabi_ddiv>
 80069d2:	ec53 2b19 	vmov	r2, r3, d9
 80069d6:	f7f9 fc67 	bl	80002a8 <__aeabi_dsub>
 80069da:	9d00      	ldr	r5, [sp, #0]
 80069dc:	ec41 0b19 	vmov	d9, r0, r1
 80069e0:	4649      	mov	r1, r9
 80069e2:	4640      	mov	r0, r8
 80069e4:	f7fa f8c8 	bl	8000b78 <__aeabi_d2iz>
 80069e8:	4606      	mov	r6, r0
 80069ea:	f7f9 fdab 	bl	8000544 <__aeabi_i2d>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4640      	mov	r0, r8
 80069f4:	4649      	mov	r1, r9
 80069f6:	f7f9 fc57 	bl	80002a8 <__aeabi_dsub>
 80069fa:	3630      	adds	r6, #48	; 0x30
 80069fc:	f805 6b01 	strb.w	r6, [r5], #1
 8006a00:	ec53 2b19 	vmov	r2, r3, d9
 8006a04:	4680      	mov	r8, r0
 8006a06:	4689      	mov	r9, r1
 8006a08:	f7fa f878 	bl	8000afc <__aeabi_dcmplt>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d164      	bne.n	8006ada <_dtoa_r+0x62a>
 8006a10:	4642      	mov	r2, r8
 8006a12:	464b      	mov	r3, r9
 8006a14:	4937      	ldr	r1, [pc, #220]	; (8006af4 <_dtoa_r+0x644>)
 8006a16:	2000      	movs	r0, #0
 8006a18:	f7f9 fc46 	bl	80002a8 <__aeabi_dsub>
 8006a1c:	ec53 2b19 	vmov	r2, r3, d9
 8006a20:	f7fa f86c 	bl	8000afc <__aeabi_dcmplt>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	f040 80b6 	bne.w	8006b96 <_dtoa_r+0x6e6>
 8006a2a:	9b02      	ldr	r3, [sp, #8]
 8006a2c:	429d      	cmp	r5, r3
 8006a2e:	f43f af7c 	beq.w	800692a <_dtoa_r+0x47a>
 8006a32:	4b31      	ldr	r3, [pc, #196]	; (8006af8 <_dtoa_r+0x648>)
 8006a34:	ec51 0b19 	vmov	r0, r1, d9
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f7f9 fded 	bl	8000618 <__aeabi_dmul>
 8006a3e:	4b2e      	ldr	r3, [pc, #184]	; (8006af8 <_dtoa_r+0x648>)
 8006a40:	ec41 0b19 	vmov	d9, r0, r1
 8006a44:	2200      	movs	r2, #0
 8006a46:	4640      	mov	r0, r8
 8006a48:	4649      	mov	r1, r9
 8006a4a:	f7f9 fde5 	bl	8000618 <__aeabi_dmul>
 8006a4e:	4680      	mov	r8, r0
 8006a50:	4689      	mov	r9, r1
 8006a52:	e7c5      	b.n	80069e0 <_dtoa_r+0x530>
 8006a54:	ec51 0b17 	vmov	r0, r1, d7
 8006a58:	f7f9 fdde 	bl	8000618 <__aeabi_dmul>
 8006a5c:	9b02      	ldr	r3, [sp, #8]
 8006a5e:	9d00      	ldr	r5, [sp, #0]
 8006a60:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a62:	ec41 0b19 	vmov	d9, r0, r1
 8006a66:	4649      	mov	r1, r9
 8006a68:	4640      	mov	r0, r8
 8006a6a:	f7fa f885 	bl	8000b78 <__aeabi_d2iz>
 8006a6e:	4606      	mov	r6, r0
 8006a70:	f7f9 fd68 	bl	8000544 <__aeabi_i2d>
 8006a74:	3630      	adds	r6, #48	; 0x30
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	f7f9 fc13 	bl	80002a8 <__aeabi_dsub>
 8006a82:	f805 6b01 	strb.w	r6, [r5], #1
 8006a86:	9b02      	ldr	r3, [sp, #8]
 8006a88:	429d      	cmp	r5, r3
 8006a8a:	4680      	mov	r8, r0
 8006a8c:	4689      	mov	r9, r1
 8006a8e:	f04f 0200 	mov.w	r2, #0
 8006a92:	d124      	bne.n	8006ade <_dtoa_r+0x62e>
 8006a94:	4b1b      	ldr	r3, [pc, #108]	; (8006b04 <_dtoa_r+0x654>)
 8006a96:	ec51 0b19 	vmov	r0, r1, d9
 8006a9a:	f7f9 fc07 	bl	80002ac <__adddf3>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	4649      	mov	r1, r9
 8006aa6:	f7fa f847 	bl	8000b38 <__aeabi_dcmpgt>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d173      	bne.n	8006b96 <_dtoa_r+0x6e6>
 8006aae:	ec53 2b19 	vmov	r2, r3, d9
 8006ab2:	4914      	ldr	r1, [pc, #80]	; (8006b04 <_dtoa_r+0x654>)
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f7f9 fbf7 	bl	80002a8 <__aeabi_dsub>
 8006aba:	4602      	mov	r2, r0
 8006abc:	460b      	mov	r3, r1
 8006abe:	4640      	mov	r0, r8
 8006ac0:	4649      	mov	r1, r9
 8006ac2:	f7fa f81b 	bl	8000afc <__aeabi_dcmplt>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f43f af2f 	beq.w	800692a <_dtoa_r+0x47a>
 8006acc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006ace:	1e6b      	subs	r3, r5, #1
 8006ad0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ad2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ad6:	2b30      	cmp	r3, #48	; 0x30
 8006ad8:	d0f8      	beq.n	8006acc <_dtoa_r+0x61c>
 8006ada:	46bb      	mov	fp, r7
 8006adc:	e04a      	b.n	8006b74 <_dtoa_r+0x6c4>
 8006ade:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <_dtoa_r+0x648>)
 8006ae0:	f7f9 fd9a 	bl	8000618 <__aeabi_dmul>
 8006ae4:	4680      	mov	r8, r0
 8006ae6:	4689      	mov	r9, r1
 8006ae8:	e7bd      	b.n	8006a66 <_dtoa_r+0x5b6>
 8006aea:	bf00      	nop
 8006aec:	08008698 	.word	0x08008698
 8006af0:	08008670 	.word	0x08008670
 8006af4:	3ff00000 	.word	0x3ff00000
 8006af8:	40240000 	.word	0x40240000
 8006afc:	401c0000 	.word	0x401c0000
 8006b00:	40140000 	.word	0x40140000
 8006b04:	3fe00000 	.word	0x3fe00000
 8006b08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b0c:	9d00      	ldr	r5, [sp, #0]
 8006b0e:	4642      	mov	r2, r8
 8006b10:	464b      	mov	r3, r9
 8006b12:	4630      	mov	r0, r6
 8006b14:	4639      	mov	r1, r7
 8006b16:	f7f9 fea9 	bl	800086c <__aeabi_ddiv>
 8006b1a:	f7fa f82d 	bl	8000b78 <__aeabi_d2iz>
 8006b1e:	9001      	str	r0, [sp, #4]
 8006b20:	f7f9 fd10 	bl	8000544 <__aeabi_i2d>
 8006b24:	4642      	mov	r2, r8
 8006b26:	464b      	mov	r3, r9
 8006b28:	f7f9 fd76 	bl	8000618 <__aeabi_dmul>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4630      	mov	r0, r6
 8006b32:	4639      	mov	r1, r7
 8006b34:	f7f9 fbb8 	bl	80002a8 <__aeabi_dsub>
 8006b38:	9e01      	ldr	r6, [sp, #4]
 8006b3a:	9f04      	ldr	r7, [sp, #16]
 8006b3c:	3630      	adds	r6, #48	; 0x30
 8006b3e:	f805 6b01 	strb.w	r6, [r5], #1
 8006b42:	9e00      	ldr	r6, [sp, #0]
 8006b44:	1bae      	subs	r6, r5, r6
 8006b46:	42b7      	cmp	r7, r6
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	d134      	bne.n	8006bb8 <_dtoa_r+0x708>
 8006b4e:	f7f9 fbad 	bl	80002ac <__adddf3>
 8006b52:	4642      	mov	r2, r8
 8006b54:	464b      	mov	r3, r9
 8006b56:	4606      	mov	r6, r0
 8006b58:	460f      	mov	r7, r1
 8006b5a:	f7f9 ffed 	bl	8000b38 <__aeabi_dcmpgt>
 8006b5e:	b9c8      	cbnz	r0, 8006b94 <_dtoa_r+0x6e4>
 8006b60:	4642      	mov	r2, r8
 8006b62:	464b      	mov	r3, r9
 8006b64:	4630      	mov	r0, r6
 8006b66:	4639      	mov	r1, r7
 8006b68:	f7f9 ffbe 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b6c:	b110      	cbz	r0, 8006b74 <_dtoa_r+0x6c4>
 8006b6e:	9b01      	ldr	r3, [sp, #4]
 8006b70:	07db      	lsls	r3, r3, #31
 8006b72:	d40f      	bmi.n	8006b94 <_dtoa_r+0x6e4>
 8006b74:	4651      	mov	r1, sl
 8006b76:	4620      	mov	r0, r4
 8006b78:	f000 fbcc 	bl	8007314 <_Bfree>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b80:	702b      	strb	r3, [r5, #0]
 8006b82:	f10b 0301 	add.w	r3, fp, #1
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f43f ace2 	beq.w	8006554 <_dtoa_r+0xa4>
 8006b90:	601d      	str	r5, [r3, #0]
 8006b92:	e4df      	b.n	8006554 <_dtoa_r+0xa4>
 8006b94:	465f      	mov	r7, fp
 8006b96:	462b      	mov	r3, r5
 8006b98:	461d      	mov	r5, r3
 8006b9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b9e:	2a39      	cmp	r2, #57	; 0x39
 8006ba0:	d106      	bne.n	8006bb0 <_dtoa_r+0x700>
 8006ba2:	9a00      	ldr	r2, [sp, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d1f7      	bne.n	8006b98 <_dtoa_r+0x6e8>
 8006ba8:	9900      	ldr	r1, [sp, #0]
 8006baa:	2230      	movs	r2, #48	; 0x30
 8006bac:	3701      	adds	r7, #1
 8006bae:	700a      	strb	r2, [r1, #0]
 8006bb0:	781a      	ldrb	r2, [r3, #0]
 8006bb2:	3201      	adds	r2, #1
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	e790      	b.n	8006ada <_dtoa_r+0x62a>
 8006bb8:	4ba3      	ldr	r3, [pc, #652]	; (8006e48 <_dtoa_r+0x998>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f7f9 fd2c 	bl	8000618 <__aeabi_dmul>
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	4606      	mov	r6, r0
 8006bc6:	460f      	mov	r7, r1
 8006bc8:	f7f9 ff8e 	bl	8000ae8 <__aeabi_dcmpeq>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d09e      	beq.n	8006b0e <_dtoa_r+0x65e>
 8006bd0:	e7d0      	b.n	8006b74 <_dtoa_r+0x6c4>
 8006bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bd4:	2a00      	cmp	r2, #0
 8006bd6:	f000 80ca 	beq.w	8006d6e <_dtoa_r+0x8be>
 8006bda:	9a07      	ldr	r2, [sp, #28]
 8006bdc:	2a01      	cmp	r2, #1
 8006bde:	f300 80ad 	bgt.w	8006d3c <_dtoa_r+0x88c>
 8006be2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006be4:	2a00      	cmp	r2, #0
 8006be6:	f000 80a5 	beq.w	8006d34 <_dtoa_r+0x884>
 8006bea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bee:	9e08      	ldr	r6, [sp, #32]
 8006bf0:	9d05      	ldr	r5, [sp, #20]
 8006bf2:	9a05      	ldr	r2, [sp, #20]
 8006bf4:	441a      	add	r2, r3
 8006bf6:	9205      	str	r2, [sp, #20]
 8006bf8:	9a06      	ldr	r2, [sp, #24]
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	441a      	add	r2, r3
 8006bfe:	4620      	mov	r0, r4
 8006c00:	9206      	str	r2, [sp, #24]
 8006c02:	f000 fc3d 	bl	8007480 <__i2b>
 8006c06:	4607      	mov	r7, r0
 8006c08:	b165      	cbz	r5, 8006c24 <_dtoa_r+0x774>
 8006c0a:	9b06      	ldr	r3, [sp, #24]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	dd09      	ble.n	8006c24 <_dtoa_r+0x774>
 8006c10:	42ab      	cmp	r3, r5
 8006c12:	9a05      	ldr	r2, [sp, #20]
 8006c14:	bfa8      	it	ge
 8006c16:	462b      	movge	r3, r5
 8006c18:	1ad2      	subs	r2, r2, r3
 8006c1a:	9205      	str	r2, [sp, #20]
 8006c1c:	9a06      	ldr	r2, [sp, #24]
 8006c1e:	1aed      	subs	r5, r5, r3
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	9306      	str	r3, [sp, #24]
 8006c24:	9b08      	ldr	r3, [sp, #32]
 8006c26:	b1f3      	cbz	r3, 8006c66 <_dtoa_r+0x7b6>
 8006c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 80a3 	beq.w	8006d76 <_dtoa_r+0x8c6>
 8006c30:	2e00      	cmp	r6, #0
 8006c32:	dd10      	ble.n	8006c56 <_dtoa_r+0x7a6>
 8006c34:	4639      	mov	r1, r7
 8006c36:	4632      	mov	r2, r6
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 fce1 	bl	8007600 <__pow5mult>
 8006c3e:	4652      	mov	r2, sl
 8006c40:	4601      	mov	r1, r0
 8006c42:	4607      	mov	r7, r0
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 fc31 	bl	80074ac <__multiply>
 8006c4a:	4651      	mov	r1, sl
 8006c4c:	4680      	mov	r8, r0
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f000 fb60 	bl	8007314 <_Bfree>
 8006c54:	46c2      	mov	sl, r8
 8006c56:	9b08      	ldr	r3, [sp, #32]
 8006c58:	1b9a      	subs	r2, r3, r6
 8006c5a:	d004      	beq.n	8006c66 <_dtoa_r+0x7b6>
 8006c5c:	4651      	mov	r1, sl
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f000 fcce 	bl	8007600 <__pow5mult>
 8006c64:	4682      	mov	sl, r0
 8006c66:	2101      	movs	r1, #1
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f000 fc09 	bl	8007480 <__i2b>
 8006c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	4606      	mov	r6, r0
 8006c74:	f340 8081 	ble.w	8006d7a <_dtoa_r+0x8ca>
 8006c78:	461a      	mov	r2, r3
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f000 fcbf 	bl	8007600 <__pow5mult>
 8006c82:	9b07      	ldr	r3, [sp, #28]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	4606      	mov	r6, r0
 8006c88:	dd7a      	ble.n	8006d80 <_dtoa_r+0x8d0>
 8006c8a:	f04f 0800 	mov.w	r8, #0
 8006c8e:	6933      	ldr	r3, [r6, #16]
 8006c90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c94:	6918      	ldr	r0, [r3, #16]
 8006c96:	f000 fba5 	bl	80073e4 <__hi0bits>
 8006c9a:	f1c0 0020 	rsb	r0, r0, #32
 8006c9e:	9b06      	ldr	r3, [sp, #24]
 8006ca0:	4418      	add	r0, r3
 8006ca2:	f010 001f 	ands.w	r0, r0, #31
 8006ca6:	f000 8094 	beq.w	8006dd2 <_dtoa_r+0x922>
 8006caa:	f1c0 0320 	rsb	r3, r0, #32
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	f340 8085 	ble.w	8006dbe <_dtoa_r+0x90e>
 8006cb4:	9b05      	ldr	r3, [sp, #20]
 8006cb6:	f1c0 001c 	rsb	r0, r0, #28
 8006cba:	4403      	add	r3, r0
 8006cbc:	9305      	str	r3, [sp, #20]
 8006cbe:	9b06      	ldr	r3, [sp, #24]
 8006cc0:	4403      	add	r3, r0
 8006cc2:	4405      	add	r5, r0
 8006cc4:	9306      	str	r3, [sp, #24]
 8006cc6:	9b05      	ldr	r3, [sp, #20]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	dd05      	ble.n	8006cd8 <_dtoa_r+0x828>
 8006ccc:	4651      	mov	r1, sl
 8006cce:	461a      	mov	r2, r3
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f000 fcef 	bl	80076b4 <__lshift>
 8006cd6:	4682      	mov	sl, r0
 8006cd8:	9b06      	ldr	r3, [sp, #24]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	dd05      	ble.n	8006cea <_dtoa_r+0x83a>
 8006cde:	4631      	mov	r1, r6
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f000 fce6 	bl	80076b4 <__lshift>
 8006ce8:	4606      	mov	r6, r0
 8006cea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d072      	beq.n	8006dd6 <_dtoa_r+0x926>
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	f000 fd4a 	bl	800778c <__mcmp>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	da6c      	bge.n	8006dd6 <_dtoa_r+0x926>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4651      	mov	r1, sl
 8006d00:	220a      	movs	r2, #10
 8006d02:	4620      	mov	r0, r4
 8006d04:	f000 fb28 	bl	8007358 <__multadd>
 8006d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d0e:	4682      	mov	sl, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 81b0 	beq.w	8007076 <_dtoa_r+0xbc6>
 8006d16:	2300      	movs	r3, #0
 8006d18:	4639      	mov	r1, r7
 8006d1a:	220a      	movs	r2, #10
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f000 fb1b 	bl	8007358 <__multadd>
 8006d22:	9b01      	ldr	r3, [sp, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	4607      	mov	r7, r0
 8006d28:	f300 8096 	bgt.w	8006e58 <_dtoa_r+0x9a8>
 8006d2c:	9b07      	ldr	r3, [sp, #28]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	dc59      	bgt.n	8006de6 <_dtoa_r+0x936>
 8006d32:	e091      	b.n	8006e58 <_dtoa_r+0x9a8>
 8006d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d3a:	e758      	b.n	8006bee <_dtoa_r+0x73e>
 8006d3c:	9b04      	ldr	r3, [sp, #16]
 8006d3e:	1e5e      	subs	r6, r3, #1
 8006d40:	9b08      	ldr	r3, [sp, #32]
 8006d42:	42b3      	cmp	r3, r6
 8006d44:	bfbf      	itttt	lt
 8006d46:	9b08      	ldrlt	r3, [sp, #32]
 8006d48:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006d4a:	9608      	strlt	r6, [sp, #32]
 8006d4c:	1af3      	sublt	r3, r6, r3
 8006d4e:	bfb4      	ite	lt
 8006d50:	18d2      	addlt	r2, r2, r3
 8006d52:	1b9e      	subge	r6, r3, r6
 8006d54:	9b04      	ldr	r3, [sp, #16]
 8006d56:	bfbc      	itt	lt
 8006d58:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006d5a:	2600      	movlt	r6, #0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bfb7      	itett	lt
 8006d60:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006d64:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006d68:	1a9d      	sublt	r5, r3, r2
 8006d6a:	2300      	movlt	r3, #0
 8006d6c:	e741      	b.n	8006bf2 <_dtoa_r+0x742>
 8006d6e:	9e08      	ldr	r6, [sp, #32]
 8006d70:	9d05      	ldr	r5, [sp, #20]
 8006d72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006d74:	e748      	b.n	8006c08 <_dtoa_r+0x758>
 8006d76:	9a08      	ldr	r2, [sp, #32]
 8006d78:	e770      	b.n	8006c5c <_dtoa_r+0x7ac>
 8006d7a:	9b07      	ldr	r3, [sp, #28]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	dc19      	bgt.n	8006db4 <_dtoa_r+0x904>
 8006d80:	9b02      	ldr	r3, [sp, #8]
 8006d82:	b9bb      	cbnz	r3, 8006db4 <_dtoa_r+0x904>
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d8a:	b99b      	cbnz	r3, 8006db4 <_dtoa_r+0x904>
 8006d8c:	9b03      	ldr	r3, [sp, #12]
 8006d8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d92:	0d1b      	lsrs	r3, r3, #20
 8006d94:	051b      	lsls	r3, r3, #20
 8006d96:	b183      	cbz	r3, 8006dba <_dtoa_r+0x90a>
 8006d98:	9b05      	ldr	r3, [sp, #20]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	9305      	str	r3, [sp, #20]
 8006d9e:	9b06      	ldr	r3, [sp, #24]
 8006da0:	3301      	adds	r3, #1
 8006da2:	9306      	str	r3, [sp, #24]
 8006da4:	f04f 0801 	mov.w	r8, #1
 8006da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f47f af6f 	bne.w	8006c8e <_dtoa_r+0x7de>
 8006db0:	2001      	movs	r0, #1
 8006db2:	e774      	b.n	8006c9e <_dtoa_r+0x7ee>
 8006db4:	f04f 0800 	mov.w	r8, #0
 8006db8:	e7f6      	b.n	8006da8 <_dtoa_r+0x8f8>
 8006dba:	4698      	mov	r8, r3
 8006dbc:	e7f4      	b.n	8006da8 <_dtoa_r+0x8f8>
 8006dbe:	d082      	beq.n	8006cc6 <_dtoa_r+0x816>
 8006dc0:	9a05      	ldr	r2, [sp, #20]
 8006dc2:	331c      	adds	r3, #28
 8006dc4:	441a      	add	r2, r3
 8006dc6:	9205      	str	r2, [sp, #20]
 8006dc8:	9a06      	ldr	r2, [sp, #24]
 8006dca:	441a      	add	r2, r3
 8006dcc:	441d      	add	r5, r3
 8006dce:	9206      	str	r2, [sp, #24]
 8006dd0:	e779      	b.n	8006cc6 <_dtoa_r+0x816>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	e7f4      	b.n	8006dc0 <_dtoa_r+0x910>
 8006dd6:	9b04      	ldr	r3, [sp, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	dc37      	bgt.n	8006e4c <_dtoa_r+0x99c>
 8006ddc:	9b07      	ldr	r3, [sp, #28]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	dd34      	ble.n	8006e4c <_dtoa_r+0x99c>
 8006de2:	9b04      	ldr	r3, [sp, #16]
 8006de4:	9301      	str	r3, [sp, #4]
 8006de6:	9b01      	ldr	r3, [sp, #4]
 8006de8:	b963      	cbnz	r3, 8006e04 <_dtoa_r+0x954>
 8006dea:	4631      	mov	r1, r6
 8006dec:	2205      	movs	r2, #5
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 fab2 	bl	8007358 <__multadd>
 8006df4:	4601      	mov	r1, r0
 8006df6:	4606      	mov	r6, r0
 8006df8:	4650      	mov	r0, sl
 8006dfa:	f000 fcc7 	bl	800778c <__mcmp>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	f73f adbb 	bgt.w	800697a <_dtoa_r+0x4ca>
 8006e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e06:	9d00      	ldr	r5, [sp, #0]
 8006e08:	ea6f 0b03 	mvn.w	fp, r3
 8006e0c:	f04f 0800 	mov.w	r8, #0
 8006e10:	4631      	mov	r1, r6
 8006e12:	4620      	mov	r0, r4
 8006e14:	f000 fa7e 	bl	8007314 <_Bfree>
 8006e18:	2f00      	cmp	r7, #0
 8006e1a:	f43f aeab 	beq.w	8006b74 <_dtoa_r+0x6c4>
 8006e1e:	f1b8 0f00 	cmp.w	r8, #0
 8006e22:	d005      	beq.n	8006e30 <_dtoa_r+0x980>
 8006e24:	45b8      	cmp	r8, r7
 8006e26:	d003      	beq.n	8006e30 <_dtoa_r+0x980>
 8006e28:	4641      	mov	r1, r8
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f000 fa72 	bl	8007314 <_Bfree>
 8006e30:	4639      	mov	r1, r7
 8006e32:	4620      	mov	r0, r4
 8006e34:	f000 fa6e 	bl	8007314 <_Bfree>
 8006e38:	e69c      	b.n	8006b74 <_dtoa_r+0x6c4>
 8006e3a:	2600      	movs	r6, #0
 8006e3c:	4637      	mov	r7, r6
 8006e3e:	e7e1      	b.n	8006e04 <_dtoa_r+0x954>
 8006e40:	46bb      	mov	fp, r7
 8006e42:	4637      	mov	r7, r6
 8006e44:	e599      	b.n	800697a <_dtoa_r+0x4ca>
 8006e46:	bf00      	nop
 8006e48:	40240000 	.word	0x40240000
 8006e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 80c8 	beq.w	8006fe4 <_dtoa_r+0xb34>
 8006e54:	9b04      	ldr	r3, [sp, #16]
 8006e56:	9301      	str	r3, [sp, #4]
 8006e58:	2d00      	cmp	r5, #0
 8006e5a:	dd05      	ble.n	8006e68 <_dtoa_r+0x9b8>
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	462a      	mov	r2, r5
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 fc27 	bl	80076b4 <__lshift>
 8006e66:	4607      	mov	r7, r0
 8006e68:	f1b8 0f00 	cmp.w	r8, #0
 8006e6c:	d05b      	beq.n	8006f26 <_dtoa_r+0xa76>
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	4620      	mov	r0, r4
 8006e72:	f000 fa0f 	bl	8007294 <_Balloc>
 8006e76:	4605      	mov	r5, r0
 8006e78:	b928      	cbnz	r0, 8006e86 <_dtoa_r+0x9d6>
 8006e7a:	4b83      	ldr	r3, [pc, #524]	; (8007088 <_dtoa_r+0xbd8>)
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006e82:	f7ff bb2e 	b.w	80064e2 <_dtoa_r+0x32>
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	3202      	adds	r2, #2
 8006e8a:	0092      	lsls	r2, r2, #2
 8006e8c:	f107 010c 	add.w	r1, r7, #12
 8006e90:	300c      	adds	r0, #12
 8006e92:	f000 ffab 	bl	8007dec <memcpy>
 8006e96:	2201      	movs	r2, #1
 8006e98:	4629      	mov	r1, r5
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f000 fc0a 	bl	80076b4 <__lshift>
 8006ea0:	9b00      	ldr	r3, [sp, #0]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	9304      	str	r3, [sp, #16]
 8006ea6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eaa:	4413      	add	r3, r2
 8006eac:	9308      	str	r3, [sp, #32]
 8006eae:	9b02      	ldr	r3, [sp, #8]
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	46b8      	mov	r8, r7
 8006eb6:	9306      	str	r3, [sp, #24]
 8006eb8:	4607      	mov	r7, r0
 8006eba:	9b04      	ldr	r3, [sp, #16]
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	4650      	mov	r0, sl
 8006ec2:	9301      	str	r3, [sp, #4]
 8006ec4:	f7ff fa6b 	bl	800639e <quorem>
 8006ec8:	4641      	mov	r1, r8
 8006eca:	9002      	str	r0, [sp, #8]
 8006ecc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ed0:	4650      	mov	r0, sl
 8006ed2:	f000 fc5b 	bl	800778c <__mcmp>
 8006ed6:	463a      	mov	r2, r7
 8006ed8:	9005      	str	r0, [sp, #20]
 8006eda:	4631      	mov	r1, r6
 8006edc:	4620      	mov	r0, r4
 8006ede:	f000 fc71 	bl	80077c4 <__mdiff>
 8006ee2:	68c2      	ldr	r2, [r0, #12]
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	bb02      	cbnz	r2, 8006f2a <_dtoa_r+0xa7a>
 8006ee8:	4601      	mov	r1, r0
 8006eea:	4650      	mov	r0, sl
 8006eec:	f000 fc4e 	bl	800778c <__mcmp>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ef8:	f000 fa0c 	bl	8007314 <_Bfree>
 8006efc:	9b07      	ldr	r3, [sp, #28]
 8006efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f00:	9d04      	ldr	r5, [sp, #16]
 8006f02:	ea43 0102 	orr.w	r1, r3, r2
 8006f06:	9b06      	ldr	r3, [sp, #24]
 8006f08:	4319      	orrs	r1, r3
 8006f0a:	d110      	bne.n	8006f2e <_dtoa_r+0xa7e>
 8006f0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f10:	d029      	beq.n	8006f66 <_dtoa_r+0xab6>
 8006f12:	9b05      	ldr	r3, [sp, #20]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	dd02      	ble.n	8006f1e <_dtoa_r+0xa6e>
 8006f18:	9b02      	ldr	r3, [sp, #8]
 8006f1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006f1e:	9b01      	ldr	r3, [sp, #4]
 8006f20:	f883 9000 	strb.w	r9, [r3]
 8006f24:	e774      	b.n	8006e10 <_dtoa_r+0x960>
 8006f26:	4638      	mov	r0, r7
 8006f28:	e7ba      	b.n	8006ea0 <_dtoa_r+0x9f0>
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	e7e1      	b.n	8006ef2 <_dtoa_r+0xa42>
 8006f2e:	9b05      	ldr	r3, [sp, #20]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	db04      	blt.n	8006f3e <_dtoa_r+0xa8e>
 8006f34:	9907      	ldr	r1, [sp, #28]
 8006f36:	430b      	orrs	r3, r1
 8006f38:	9906      	ldr	r1, [sp, #24]
 8006f3a:	430b      	orrs	r3, r1
 8006f3c:	d120      	bne.n	8006f80 <_dtoa_r+0xad0>
 8006f3e:	2a00      	cmp	r2, #0
 8006f40:	dded      	ble.n	8006f1e <_dtoa_r+0xa6e>
 8006f42:	4651      	mov	r1, sl
 8006f44:	2201      	movs	r2, #1
 8006f46:	4620      	mov	r0, r4
 8006f48:	f000 fbb4 	bl	80076b4 <__lshift>
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	4682      	mov	sl, r0
 8006f50:	f000 fc1c 	bl	800778c <__mcmp>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	dc03      	bgt.n	8006f60 <_dtoa_r+0xab0>
 8006f58:	d1e1      	bne.n	8006f1e <_dtoa_r+0xa6e>
 8006f5a:	f019 0f01 	tst.w	r9, #1
 8006f5e:	d0de      	beq.n	8006f1e <_dtoa_r+0xa6e>
 8006f60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f64:	d1d8      	bne.n	8006f18 <_dtoa_r+0xa68>
 8006f66:	9a01      	ldr	r2, [sp, #4]
 8006f68:	2339      	movs	r3, #57	; 0x39
 8006f6a:	7013      	strb	r3, [r2, #0]
 8006f6c:	462b      	mov	r3, r5
 8006f6e:	461d      	mov	r5, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f76:	2a39      	cmp	r2, #57	; 0x39
 8006f78:	d06c      	beq.n	8007054 <_dtoa_r+0xba4>
 8006f7a:	3201      	adds	r2, #1
 8006f7c:	701a      	strb	r2, [r3, #0]
 8006f7e:	e747      	b.n	8006e10 <_dtoa_r+0x960>
 8006f80:	2a00      	cmp	r2, #0
 8006f82:	dd07      	ble.n	8006f94 <_dtoa_r+0xae4>
 8006f84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f88:	d0ed      	beq.n	8006f66 <_dtoa_r+0xab6>
 8006f8a:	9a01      	ldr	r2, [sp, #4]
 8006f8c:	f109 0301 	add.w	r3, r9, #1
 8006f90:	7013      	strb	r3, [r2, #0]
 8006f92:	e73d      	b.n	8006e10 <_dtoa_r+0x960>
 8006f94:	9b04      	ldr	r3, [sp, #16]
 8006f96:	9a08      	ldr	r2, [sp, #32]
 8006f98:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d043      	beq.n	8007028 <_dtoa_r+0xb78>
 8006fa0:	4651      	mov	r1, sl
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	220a      	movs	r2, #10
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 f9d6 	bl	8007358 <__multadd>
 8006fac:	45b8      	cmp	r8, r7
 8006fae:	4682      	mov	sl, r0
 8006fb0:	f04f 0300 	mov.w	r3, #0
 8006fb4:	f04f 020a 	mov.w	r2, #10
 8006fb8:	4641      	mov	r1, r8
 8006fba:	4620      	mov	r0, r4
 8006fbc:	d107      	bne.n	8006fce <_dtoa_r+0xb1e>
 8006fbe:	f000 f9cb 	bl	8007358 <__multadd>
 8006fc2:	4680      	mov	r8, r0
 8006fc4:	4607      	mov	r7, r0
 8006fc6:	9b04      	ldr	r3, [sp, #16]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	9304      	str	r3, [sp, #16]
 8006fcc:	e775      	b.n	8006eba <_dtoa_r+0xa0a>
 8006fce:	f000 f9c3 	bl	8007358 <__multadd>
 8006fd2:	4639      	mov	r1, r7
 8006fd4:	4680      	mov	r8, r0
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	220a      	movs	r2, #10
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f000 f9bc 	bl	8007358 <__multadd>
 8006fe0:	4607      	mov	r7, r0
 8006fe2:	e7f0      	b.n	8006fc6 <_dtoa_r+0xb16>
 8006fe4:	9b04      	ldr	r3, [sp, #16]
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	9d00      	ldr	r5, [sp, #0]
 8006fea:	4631      	mov	r1, r6
 8006fec:	4650      	mov	r0, sl
 8006fee:	f7ff f9d6 	bl	800639e <quorem>
 8006ff2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ff6:	9b00      	ldr	r3, [sp, #0]
 8006ff8:	f805 9b01 	strb.w	r9, [r5], #1
 8006ffc:	1aea      	subs	r2, r5, r3
 8006ffe:	9b01      	ldr	r3, [sp, #4]
 8007000:	4293      	cmp	r3, r2
 8007002:	dd07      	ble.n	8007014 <_dtoa_r+0xb64>
 8007004:	4651      	mov	r1, sl
 8007006:	2300      	movs	r3, #0
 8007008:	220a      	movs	r2, #10
 800700a:	4620      	mov	r0, r4
 800700c:	f000 f9a4 	bl	8007358 <__multadd>
 8007010:	4682      	mov	sl, r0
 8007012:	e7ea      	b.n	8006fea <_dtoa_r+0xb3a>
 8007014:	9b01      	ldr	r3, [sp, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	bfc8      	it	gt
 800701a:	461d      	movgt	r5, r3
 800701c:	9b00      	ldr	r3, [sp, #0]
 800701e:	bfd8      	it	le
 8007020:	2501      	movle	r5, #1
 8007022:	441d      	add	r5, r3
 8007024:	f04f 0800 	mov.w	r8, #0
 8007028:	4651      	mov	r1, sl
 800702a:	2201      	movs	r2, #1
 800702c:	4620      	mov	r0, r4
 800702e:	f000 fb41 	bl	80076b4 <__lshift>
 8007032:	4631      	mov	r1, r6
 8007034:	4682      	mov	sl, r0
 8007036:	f000 fba9 	bl	800778c <__mcmp>
 800703a:	2800      	cmp	r0, #0
 800703c:	dc96      	bgt.n	8006f6c <_dtoa_r+0xabc>
 800703e:	d102      	bne.n	8007046 <_dtoa_r+0xb96>
 8007040:	f019 0f01 	tst.w	r9, #1
 8007044:	d192      	bne.n	8006f6c <_dtoa_r+0xabc>
 8007046:	462b      	mov	r3, r5
 8007048:	461d      	mov	r5, r3
 800704a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800704e:	2a30      	cmp	r2, #48	; 0x30
 8007050:	d0fa      	beq.n	8007048 <_dtoa_r+0xb98>
 8007052:	e6dd      	b.n	8006e10 <_dtoa_r+0x960>
 8007054:	9a00      	ldr	r2, [sp, #0]
 8007056:	429a      	cmp	r2, r3
 8007058:	d189      	bne.n	8006f6e <_dtoa_r+0xabe>
 800705a:	f10b 0b01 	add.w	fp, fp, #1
 800705e:	2331      	movs	r3, #49	; 0x31
 8007060:	e796      	b.n	8006f90 <_dtoa_r+0xae0>
 8007062:	4b0a      	ldr	r3, [pc, #40]	; (800708c <_dtoa_r+0xbdc>)
 8007064:	f7ff ba99 	b.w	800659a <_dtoa_r+0xea>
 8007068:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800706a:	2b00      	cmp	r3, #0
 800706c:	f47f aa6d 	bne.w	800654a <_dtoa_r+0x9a>
 8007070:	4b07      	ldr	r3, [pc, #28]	; (8007090 <_dtoa_r+0xbe0>)
 8007072:	f7ff ba92 	b.w	800659a <_dtoa_r+0xea>
 8007076:	9b01      	ldr	r3, [sp, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	dcb5      	bgt.n	8006fe8 <_dtoa_r+0xb38>
 800707c:	9b07      	ldr	r3, [sp, #28]
 800707e:	2b02      	cmp	r3, #2
 8007080:	f73f aeb1 	bgt.w	8006de6 <_dtoa_r+0x936>
 8007084:	e7b0      	b.n	8006fe8 <_dtoa_r+0xb38>
 8007086:	bf00      	nop
 8007088:	08008604 	.word	0x08008604
 800708c:	08008564 	.word	0x08008564
 8007090:	08008588 	.word	0x08008588

08007094 <_free_r>:
 8007094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007096:	2900      	cmp	r1, #0
 8007098:	d044      	beq.n	8007124 <_free_r+0x90>
 800709a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800709e:	9001      	str	r0, [sp, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f1a1 0404 	sub.w	r4, r1, #4
 80070a6:	bfb8      	it	lt
 80070a8:	18e4      	addlt	r4, r4, r3
 80070aa:	f000 f8e7 	bl	800727c <__malloc_lock>
 80070ae:	4a1e      	ldr	r2, [pc, #120]	; (8007128 <_free_r+0x94>)
 80070b0:	9801      	ldr	r0, [sp, #4]
 80070b2:	6813      	ldr	r3, [r2, #0]
 80070b4:	b933      	cbnz	r3, 80070c4 <_free_r+0x30>
 80070b6:	6063      	str	r3, [r4, #4]
 80070b8:	6014      	str	r4, [r2, #0]
 80070ba:	b003      	add	sp, #12
 80070bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070c0:	f000 b8e2 	b.w	8007288 <__malloc_unlock>
 80070c4:	42a3      	cmp	r3, r4
 80070c6:	d908      	bls.n	80070da <_free_r+0x46>
 80070c8:	6825      	ldr	r5, [r4, #0]
 80070ca:	1961      	adds	r1, r4, r5
 80070cc:	428b      	cmp	r3, r1
 80070ce:	bf01      	itttt	eq
 80070d0:	6819      	ldreq	r1, [r3, #0]
 80070d2:	685b      	ldreq	r3, [r3, #4]
 80070d4:	1949      	addeq	r1, r1, r5
 80070d6:	6021      	streq	r1, [r4, #0]
 80070d8:	e7ed      	b.n	80070b6 <_free_r+0x22>
 80070da:	461a      	mov	r2, r3
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	b10b      	cbz	r3, 80070e4 <_free_r+0x50>
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	d9fa      	bls.n	80070da <_free_r+0x46>
 80070e4:	6811      	ldr	r1, [r2, #0]
 80070e6:	1855      	adds	r5, r2, r1
 80070e8:	42a5      	cmp	r5, r4
 80070ea:	d10b      	bne.n	8007104 <_free_r+0x70>
 80070ec:	6824      	ldr	r4, [r4, #0]
 80070ee:	4421      	add	r1, r4
 80070f0:	1854      	adds	r4, r2, r1
 80070f2:	42a3      	cmp	r3, r4
 80070f4:	6011      	str	r1, [r2, #0]
 80070f6:	d1e0      	bne.n	80070ba <_free_r+0x26>
 80070f8:	681c      	ldr	r4, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	6053      	str	r3, [r2, #4]
 80070fe:	440c      	add	r4, r1
 8007100:	6014      	str	r4, [r2, #0]
 8007102:	e7da      	b.n	80070ba <_free_r+0x26>
 8007104:	d902      	bls.n	800710c <_free_r+0x78>
 8007106:	230c      	movs	r3, #12
 8007108:	6003      	str	r3, [r0, #0]
 800710a:	e7d6      	b.n	80070ba <_free_r+0x26>
 800710c:	6825      	ldr	r5, [r4, #0]
 800710e:	1961      	adds	r1, r4, r5
 8007110:	428b      	cmp	r3, r1
 8007112:	bf04      	itt	eq
 8007114:	6819      	ldreq	r1, [r3, #0]
 8007116:	685b      	ldreq	r3, [r3, #4]
 8007118:	6063      	str	r3, [r4, #4]
 800711a:	bf04      	itt	eq
 800711c:	1949      	addeq	r1, r1, r5
 800711e:	6021      	streq	r1, [r4, #0]
 8007120:	6054      	str	r4, [r2, #4]
 8007122:	e7ca      	b.n	80070ba <_free_r+0x26>
 8007124:	b003      	add	sp, #12
 8007126:	bd30      	pop	{r4, r5, pc}
 8007128:	20000430 	.word	0x20000430

0800712c <malloc>:
 800712c:	4b02      	ldr	r3, [pc, #8]	; (8007138 <malloc+0xc>)
 800712e:	4601      	mov	r1, r0
 8007130:	6818      	ldr	r0, [r3, #0]
 8007132:	f000 b823 	b.w	800717c <_malloc_r>
 8007136:	bf00      	nop
 8007138:	20000064 	.word	0x20000064

0800713c <sbrk_aligned>:
 800713c:	b570      	push	{r4, r5, r6, lr}
 800713e:	4e0e      	ldr	r6, [pc, #56]	; (8007178 <sbrk_aligned+0x3c>)
 8007140:	460c      	mov	r4, r1
 8007142:	6831      	ldr	r1, [r6, #0]
 8007144:	4605      	mov	r5, r0
 8007146:	b911      	cbnz	r1, 800714e <sbrk_aligned+0x12>
 8007148:	f000 fe40 	bl	8007dcc <_sbrk_r>
 800714c:	6030      	str	r0, [r6, #0]
 800714e:	4621      	mov	r1, r4
 8007150:	4628      	mov	r0, r5
 8007152:	f000 fe3b 	bl	8007dcc <_sbrk_r>
 8007156:	1c43      	adds	r3, r0, #1
 8007158:	d00a      	beq.n	8007170 <sbrk_aligned+0x34>
 800715a:	1cc4      	adds	r4, r0, #3
 800715c:	f024 0403 	bic.w	r4, r4, #3
 8007160:	42a0      	cmp	r0, r4
 8007162:	d007      	beq.n	8007174 <sbrk_aligned+0x38>
 8007164:	1a21      	subs	r1, r4, r0
 8007166:	4628      	mov	r0, r5
 8007168:	f000 fe30 	bl	8007dcc <_sbrk_r>
 800716c:	3001      	adds	r0, #1
 800716e:	d101      	bne.n	8007174 <sbrk_aligned+0x38>
 8007170:	f04f 34ff 	mov.w	r4, #4294967295
 8007174:	4620      	mov	r0, r4
 8007176:	bd70      	pop	{r4, r5, r6, pc}
 8007178:	20000434 	.word	0x20000434

0800717c <_malloc_r>:
 800717c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007180:	1ccd      	adds	r5, r1, #3
 8007182:	f025 0503 	bic.w	r5, r5, #3
 8007186:	3508      	adds	r5, #8
 8007188:	2d0c      	cmp	r5, #12
 800718a:	bf38      	it	cc
 800718c:	250c      	movcc	r5, #12
 800718e:	2d00      	cmp	r5, #0
 8007190:	4607      	mov	r7, r0
 8007192:	db01      	blt.n	8007198 <_malloc_r+0x1c>
 8007194:	42a9      	cmp	r1, r5
 8007196:	d905      	bls.n	80071a4 <_malloc_r+0x28>
 8007198:	230c      	movs	r3, #12
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	2600      	movs	r6, #0
 800719e:	4630      	mov	r0, r6
 80071a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007278 <_malloc_r+0xfc>
 80071a8:	f000 f868 	bl	800727c <__malloc_lock>
 80071ac:	f8d8 3000 	ldr.w	r3, [r8]
 80071b0:	461c      	mov	r4, r3
 80071b2:	bb5c      	cbnz	r4, 800720c <_malloc_r+0x90>
 80071b4:	4629      	mov	r1, r5
 80071b6:	4638      	mov	r0, r7
 80071b8:	f7ff ffc0 	bl	800713c <sbrk_aligned>
 80071bc:	1c43      	adds	r3, r0, #1
 80071be:	4604      	mov	r4, r0
 80071c0:	d155      	bne.n	800726e <_malloc_r+0xf2>
 80071c2:	f8d8 4000 	ldr.w	r4, [r8]
 80071c6:	4626      	mov	r6, r4
 80071c8:	2e00      	cmp	r6, #0
 80071ca:	d145      	bne.n	8007258 <_malloc_r+0xdc>
 80071cc:	2c00      	cmp	r4, #0
 80071ce:	d048      	beq.n	8007262 <_malloc_r+0xe6>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	4631      	mov	r1, r6
 80071d4:	4638      	mov	r0, r7
 80071d6:	eb04 0903 	add.w	r9, r4, r3
 80071da:	f000 fdf7 	bl	8007dcc <_sbrk_r>
 80071de:	4581      	cmp	r9, r0
 80071e0:	d13f      	bne.n	8007262 <_malloc_r+0xe6>
 80071e2:	6821      	ldr	r1, [r4, #0]
 80071e4:	1a6d      	subs	r5, r5, r1
 80071e6:	4629      	mov	r1, r5
 80071e8:	4638      	mov	r0, r7
 80071ea:	f7ff ffa7 	bl	800713c <sbrk_aligned>
 80071ee:	3001      	adds	r0, #1
 80071f0:	d037      	beq.n	8007262 <_malloc_r+0xe6>
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	442b      	add	r3, r5
 80071f6:	6023      	str	r3, [r4, #0]
 80071f8:	f8d8 3000 	ldr.w	r3, [r8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d038      	beq.n	8007272 <_malloc_r+0xf6>
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	42a2      	cmp	r2, r4
 8007204:	d12b      	bne.n	800725e <_malloc_r+0xe2>
 8007206:	2200      	movs	r2, #0
 8007208:	605a      	str	r2, [r3, #4]
 800720a:	e00f      	b.n	800722c <_malloc_r+0xb0>
 800720c:	6822      	ldr	r2, [r4, #0]
 800720e:	1b52      	subs	r2, r2, r5
 8007210:	d41f      	bmi.n	8007252 <_malloc_r+0xd6>
 8007212:	2a0b      	cmp	r2, #11
 8007214:	d917      	bls.n	8007246 <_malloc_r+0xca>
 8007216:	1961      	adds	r1, r4, r5
 8007218:	42a3      	cmp	r3, r4
 800721a:	6025      	str	r5, [r4, #0]
 800721c:	bf18      	it	ne
 800721e:	6059      	strne	r1, [r3, #4]
 8007220:	6863      	ldr	r3, [r4, #4]
 8007222:	bf08      	it	eq
 8007224:	f8c8 1000 	streq.w	r1, [r8]
 8007228:	5162      	str	r2, [r4, r5]
 800722a:	604b      	str	r3, [r1, #4]
 800722c:	4638      	mov	r0, r7
 800722e:	f104 060b 	add.w	r6, r4, #11
 8007232:	f000 f829 	bl	8007288 <__malloc_unlock>
 8007236:	f026 0607 	bic.w	r6, r6, #7
 800723a:	1d23      	adds	r3, r4, #4
 800723c:	1af2      	subs	r2, r6, r3
 800723e:	d0ae      	beq.n	800719e <_malloc_r+0x22>
 8007240:	1b9b      	subs	r3, r3, r6
 8007242:	50a3      	str	r3, [r4, r2]
 8007244:	e7ab      	b.n	800719e <_malloc_r+0x22>
 8007246:	42a3      	cmp	r3, r4
 8007248:	6862      	ldr	r2, [r4, #4]
 800724a:	d1dd      	bne.n	8007208 <_malloc_r+0x8c>
 800724c:	f8c8 2000 	str.w	r2, [r8]
 8007250:	e7ec      	b.n	800722c <_malloc_r+0xb0>
 8007252:	4623      	mov	r3, r4
 8007254:	6864      	ldr	r4, [r4, #4]
 8007256:	e7ac      	b.n	80071b2 <_malloc_r+0x36>
 8007258:	4634      	mov	r4, r6
 800725a:	6876      	ldr	r6, [r6, #4]
 800725c:	e7b4      	b.n	80071c8 <_malloc_r+0x4c>
 800725e:	4613      	mov	r3, r2
 8007260:	e7cc      	b.n	80071fc <_malloc_r+0x80>
 8007262:	230c      	movs	r3, #12
 8007264:	603b      	str	r3, [r7, #0]
 8007266:	4638      	mov	r0, r7
 8007268:	f000 f80e 	bl	8007288 <__malloc_unlock>
 800726c:	e797      	b.n	800719e <_malloc_r+0x22>
 800726e:	6025      	str	r5, [r4, #0]
 8007270:	e7dc      	b.n	800722c <_malloc_r+0xb0>
 8007272:	605b      	str	r3, [r3, #4]
 8007274:	deff      	udf	#255	; 0xff
 8007276:	bf00      	nop
 8007278:	20000430 	.word	0x20000430

0800727c <__malloc_lock>:
 800727c:	4801      	ldr	r0, [pc, #4]	; (8007284 <__malloc_lock+0x8>)
 800727e:	f7ff b88c 	b.w	800639a <__retarget_lock_acquire_recursive>
 8007282:	bf00      	nop
 8007284:	2000042c 	.word	0x2000042c

08007288 <__malloc_unlock>:
 8007288:	4801      	ldr	r0, [pc, #4]	; (8007290 <__malloc_unlock+0x8>)
 800728a:	f7ff b887 	b.w	800639c <__retarget_lock_release_recursive>
 800728e:	bf00      	nop
 8007290:	2000042c 	.word	0x2000042c

08007294 <_Balloc>:
 8007294:	b570      	push	{r4, r5, r6, lr}
 8007296:	69c6      	ldr	r6, [r0, #28]
 8007298:	4604      	mov	r4, r0
 800729a:	460d      	mov	r5, r1
 800729c:	b976      	cbnz	r6, 80072bc <_Balloc+0x28>
 800729e:	2010      	movs	r0, #16
 80072a0:	f7ff ff44 	bl	800712c <malloc>
 80072a4:	4602      	mov	r2, r0
 80072a6:	61e0      	str	r0, [r4, #28]
 80072a8:	b920      	cbnz	r0, 80072b4 <_Balloc+0x20>
 80072aa:	4b18      	ldr	r3, [pc, #96]	; (800730c <_Balloc+0x78>)
 80072ac:	4818      	ldr	r0, [pc, #96]	; (8007310 <_Balloc+0x7c>)
 80072ae:	216b      	movs	r1, #107	; 0x6b
 80072b0:	f000 fdaa 	bl	8007e08 <__assert_func>
 80072b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072b8:	6006      	str	r6, [r0, #0]
 80072ba:	60c6      	str	r6, [r0, #12]
 80072bc:	69e6      	ldr	r6, [r4, #28]
 80072be:	68f3      	ldr	r3, [r6, #12]
 80072c0:	b183      	cbz	r3, 80072e4 <_Balloc+0x50>
 80072c2:	69e3      	ldr	r3, [r4, #28]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072ca:	b9b8      	cbnz	r0, 80072fc <_Balloc+0x68>
 80072cc:	2101      	movs	r1, #1
 80072ce:	fa01 f605 	lsl.w	r6, r1, r5
 80072d2:	1d72      	adds	r2, r6, #5
 80072d4:	0092      	lsls	r2, r2, #2
 80072d6:	4620      	mov	r0, r4
 80072d8:	f000 fdb4 	bl	8007e44 <_calloc_r>
 80072dc:	b160      	cbz	r0, 80072f8 <_Balloc+0x64>
 80072de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072e2:	e00e      	b.n	8007302 <_Balloc+0x6e>
 80072e4:	2221      	movs	r2, #33	; 0x21
 80072e6:	2104      	movs	r1, #4
 80072e8:	4620      	mov	r0, r4
 80072ea:	f000 fdab 	bl	8007e44 <_calloc_r>
 80072ee:	69e3      	ldr	r3, [r4, #28]
 80072f0:	60f0      	str	r0, [r6, #12]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1e4      	bne.n	80072c2 <_Balloc+0x2e>
 80072f8:	2000      	movs	r0, #0
 80072fa:	bd70      	pop	{r4, r5, r6, pc}
 80072fc:	6802      	ldr	r2, [r0, #0]
 80072fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007302:	2300      	movs	r3, #0
 8007304:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007308:	e7f7      	b.n	80072fa <_Balloc+0x66>
 800730a:	bf00      	nop
 800730c:	08008595 	.word	0x08008595
 8007310:	08008615 	.word	0x08008615

08007314 <_Bfree>:
 8007314:	b570      	push	{r4, r5, r6, lr}
 8007316:	69c6      	ldr	r6, [r0, #28]
 8007318:	4605      	mov	r5, r0
 800731a:	460c      	mov	r4, r1
 800731c:	b976      	cbnz	r6, 800733c <_Bfree+0x28>
 800731e:	2010      	movs	r0, #16
 8007320:	f7ff ff04 	bl	800712c <malloc>
 8007324:	4602      	mov	r2, r0
 8007326:	61e8      	str	r0, [r5, #28]
 8007328:	b920      	cbnz	r0, 8007334 <_Bfree+0x20>
 800732a:	4b09      	ldr	r3, [pc, #36]	; (8007350 <_Bfree+0x3c>)
 800732c:	4809      	ldr	r0, [pc, #36]	; (8007354 <_Bfree+0x40>)
 800732e:	218f      	movs	r1, #143	; 0x8f
 8007330:	f000 fd6a 	bl	8007e08 <__assert_func>
 8007334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007338:	6006      	str	r6, [r0, #0]
 800733a:	60c6      	str	r6, [r0, #12]
 800733c:	b13c      	cbz	r4, 800734e <_Bfree+0x3a>
 800733e:	69eb      	ldr	r3, [r5, #28]
 8007340:	6862      	ldr	r2, [r4, #4]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007348:	6021      	str	r1, [r4, #0]
 800734a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	08008595 	.word	0x08008595
 8007354:	08008615 	.word	0x08008615

08007358 <__multadd>:
 8007358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800735c:	690d      	ldr	r5, [r1, #16]
 800735e:	4607      	mov	r7, r0
 8007360:	460c      	mov	r4, r1
 8007362:	461e      	mov	r6, r3
 8007364:	f101 0c14 	add.w	ip, r1, #20
 8007368:	2000      	movs	r0, #0
 800736a:	f8dc 3000 	ldr.w	r3, [ip]
 800736e:	b299      	uxth	r1, r3
 8007370:	fb02 6101 	mla	r1, r2, r1, r6
 8007374:	0c1e      	lsrs	r6, r3, #16
 8007376:	0c0b      	lsrs	r3, r1, #16
 8007378:	fb02 3306 	mla	r3, r2, r6, r3
 800737c:	b289      	uxth	r1, r1
 800737e:	3001      	adds	r0, #1
 8007380:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007384:	4285      	cmp	r5, r0
 8007386:	f84c 1b04 	str.w	r1, [ip], #4
 800738a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800738e:	dcec      	bgt.n	800736a <__multadd+0x12>
 8007390:	b30e      	cbz	r6, 80073d6 <__multadd+0x7e>
 8007392:	68a3      	ldr	r3, [r4, #8]
 8007394:	42ab      	cmp	r3, r5
 8007396:	dc19      	bgt.n	80073cc <__multadd+0x74>
 8007398:	6861      	ldr	r1, [r4, #4]
 800739a:	4638      	mov	r0, r7
 800739c:	3101      	adds	r1, #1
 800739e:	f7ff ff79 	bl	8007294 <_Balloc>
 80073a2:	4680      	mov	r8, r0
 80073a4:	b928      	cbnz	r0, 80073b2 <__multadd+0x5a>
 80073a6:	4602      	mov	r2, r0
 80073a8:	4b0c      	ldr	r3, [pc, #48]	; (80073dc <__multadd+0x84>)
 80073aa:	480d      	ldr	r0, [pc, #52]	; (80073e0 <__multadd+0x88>)
 80073ac:	21ba      	movs	r1, #186	; 0xba
 80073ae:	f000 fd2b 	bl	8007e08 <__assert_func>
 80073b2:	6922      	ldr	r2, [r4, #16]
 80073b4:	3202      	adds	r2, #2
 80073b6:	f104 010c 	add.w	r1, r4, #12
 80073ba:	0092      	lsls	r2, r2, #2
 80073bc:	300c      	adds	r0, #12
 80073be:	f000 fd15 	bl	8007dec <memcpy>
 80073c2:	4621      	mov	r1, r4
 80073c4:	4638      	mov	r0, r7
 80073c6:	f7ff ffa5 	bl	8007314 <_Bfree>
 80073ca:	4644      	mov	r4, r8
 80073cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073d0:	3501      	adds	r5, #1
 80073d2:	615e      	str	r6, [r3, #20]
 80073d4:	6125      	str	r5, [r4, #16]
 80073d6:	4620      	mov	r0, r4
 80073d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073dc:	08008604 	.word	0x08008604
 80073e0:	08008615 	.word	0x08008615

080073e4 <__hi0bits>:
 80073e4:	0c03      	lsrs	r3, r0, #16
 80073e6:	041b      	lsls	r3, r3, #16
 80073e8:	b9d3      	cbnz	r3, 8007420 <__hi0bits+0x3c>
 80073ea:	0400      	lsls	r0, r0, #16
 80073ec:	2310      	movs	r3, #16
 80073ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80073f2:	bf04      	itt	eq
 80073f4:	0200      	lsleq	r0, r0, #8
 80073f6:	3308      	addeq	r3, #8
 80073f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80073fc:	bf04      	itt	eq
 80073fe:	0100      	lsleq	r0, r0, #4
 8007400:	3304      	addeq	r3, #4
 8007402:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007406:	bf04      	itt	eq
 8007408:	0080      	lsleq	r0, r0, #2
 800740a:	3302      	addeq	r3, #2
 800740c:	2800      	cmp	r0, #0
 800740e:	db05      	blt.n	800741c <__hi0bits+0x38>
 8007410:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007414:	f103 0301 	add.w	r3, r3, #1
 8007418:	bf08      	it	eq
 800741a:	2320      	moveq	r3, #32
 800741c:	4618      	mov	r0, r3
 800741e:	4770      	bx	lr
 8007420:	2300      	movs	r3, #0
 8007422:	e7e4      	b.n	80073ee <__hi0bits+0xa>

08007424 <__lo0bits>:
 8007424:	6803      	ldr	r3, [r0, #0]
 8007426:	f013 0207 	ands.w	r2, r3, #7
 800742a:	d00c      	beq.n	8007446 <__lo0bits+0x22>
 800742c:	07d9      	lsls	r1, r3, #31
 800742e:	d422      	bmi.n	8007476 <__lo0bits+0x52>
 8007430:	079a      	lsls	r2, r3, #30
 8007432:	bf49      	itett	mi
 8007434:	085b      	lsrmi	r3, r3, #1
 8007436:	089b      	lsrpl	r3, r3, #2
 8007438:	6003      	strmi	r3, [r0, #0]
 800743a:	2201      	movmi	r2, #1
 800743c:	bf5c      	itt	pl
 800743e:	6003      	strpl	r3, [r0, #0]
 8007440:	2202      	movpl	r2, #2
 8007442:	4610      	mov	r0, r2
 8007444:	4770      	bx	lr
 8007446:	b299      	uxth	r1, r3
 8007448:	b909      	cbnz	r1, 800744e <__lo0bits+0x2a>
 800744a:	0c1b      	lsrs	r3, r3, #16
 800744c:	2210      	movs	r2, #16
 800744e:	b2d9      	uxtb	r1, r3
 8007450:	b909      	cbnz	r1, 8007456 <__lo0bits+0x32>
 8007452:	3208      	adds	r2, #8
 8007454:	0a1b      	lsrs	r3, r3, #8
 8007456:	0719      	lsls	r1, r3, #28
 8007458:	bf04      	itt	eq
 800745a:	091b      	lsreq	r3, r3, #4
 800745c:	3204      	addeq	r2, #4
 800745e:	0799      	lsls	r1, r3, #30
 8007460:	bf04      	itt	eq
 8007462:	089b      	lsreq	r3, r3, #2
 8007464:	3202      	addeq	r2, #2
 8007466:	07d9      	lsls	r1, r3, #31
 8007468:	d403      	bmi.n	8007472 <__lo0bits+0x4e>
 800746a:	085b      	lsrs	r3, r3, #1
 800746c:	f102 0201 	add.w	r2, r2, #1
 8007470:	d003      	beq.n	800747a <__lo0bits+0x56>
 8007472:	6003      	str	r3, [r0, #0]
 8007474:	e7e5      	b.n	8007442 <__lo0bits+0x1e>
 8007476:	2200      	movs	r2, #0
 8007478:	e7e3      	b.n	8007442 <__lo0bits+0x1e>
 800747a:	2220      	movs	r2, #32
 800747c:	e7e1      	b.n	8007442 <__lo0bits+0x1e>
	...

08007480 <__i2b>:
 8007480:	b510      	push	{r4, lr}
 8007482:	460c      	mov	r4, r1
 8007484:	2101      	movs	r1, #1
 8007486:	f7ff ff05 	bl	8007294 <_Balloc>
 800748a:	4602      	mov	r2, r0
 800748c:	b928      	cbnz	r0, 800749a <__i2b+0x1a>
 800748e:	4b05      	ldr	r3, [pc, #20]	; (80074a4 <__i2b+0x24>)
 8007490:	4805      	ldr	r0, [pc, #20]	; (80074a8 <__i2b+0x28>)
 8007492:	f240 1145 	movw	r1, #325	; 0x145
 8007496:	f000 fcb7 	bl	8007e08 <__assert_func>
 800749a:	2301      	movs	r3, #1
 800749c:	6144      	str	r4, [r0, #20]
 800749e:	6103      	str	r3, [r0, #16]
 80074a0:	bd10      	pop	{r4, pc}
 80074a2:	bf00      	nop
 80074a4:	08008604 	.word	0x08008604
 80074a8:	08008615 	.word	0x08008615

080074ac <__multiply>:
 80074ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	4691      	mov	r9, r2
 80074b2:	690a      	ldr	r2, [r1, #16]
 80074b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	bfb8      	it	lt
 80074bc:	460b      	movlt	r3, r1
 80074be:	460c      	mov	r4, r1
 80074c0:	bfbc      	itt	lt
 80074c2:	464c      	movlt	r4, r9
 80074c4:	4699      	movlt	r9, r3
 80074c6:	6927      	ldr	r7, [r4, #16]
 80074c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074cc:	68a3      	ldr	r3, [r4, #8]
 80074ce:	6861      	ldr	r1, [r4, #4]
 80074d0:	eb07 060a 	add.w	r6, r7, sl
 80074d4:	42b3      	cmp	r3, r6
 80074d6:	b085      	sub	sp, #20
 80074d8:	bfb8      	it	lt
 80074da:	3101      	addlt	r1, #1
 80074dc:	f7ff feda 	bl	8007294 <_Balloc>
 80074e0:	b930      	cbnz	r0, 80074f0 <__multiply+0x44>
 80074e2:	4602      	mov	r2, r0
 80074e4:	4b44      	ldr	r3, [pc, #272]	; (80075f8 <__multiply+0x14c>)
 80074e6:	4845      	ldr	r0, [pc, #276]	; (80075fc <__multiply+0x150>)
 80074e8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80074ec:	f000 fc8c 	bl	8007e08 <__assert_func>
 80074f0:	f100 0514 	add.w	r5, r0, #20
 80074f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074f8:	462b      	mov	r3, r5
 80074fa:	2200      	movs	r2, #0
 80074fc:	4543      	cmp	r3, r8
 80074fe:	d321      	bcc.n	8007544 <__multiply+0x98>
 8007500:	f104 0314 	add.w	r3, r4, #20
 8007504:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007508:	f109 0314 	add.w	r3, r9, #20
 800750c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007510:	9202      	str	r2, [sp, #8]
 8007512:	1b3a      	subs	r2, r7, r4
 8007514:	3a15      	subs	r2, #21
 8007516:	f022 0203 	bic.w	r2, r2, #3
 800751a:	3204      	adds	r2, #4
 800751c:	f104 0115 	add.w	r1, r4, #21
 8007520:	428f      	cmp	r7, r1
 8007522:	bf38      	it	cc
 8007524:	2204      	movcc	r2, #4
 8007526:	9201      	str	r2, [sp, #4]
 8007528:	9a02      	ldr	r2, [sp, #8]
 800752a:	9303      	str	r3, [sp, #12]
 800752c:	429a      	cmp	r2, r3
 800752e:	d80c      	bhi.n	800754a <__multiply+0x9e>
 8007530:	2e00      	cmp	r6, #0
 8007532:	dd03      	ble.n	800753c <__multiply+0x90>
 8007534:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007538:	2b00      	cmp	r3, #0
 800753a:	d05b      	beq.n	80075f4 <__multiply+0x148>
 800753c:	6106      	str	r6, [r0, #16]
 800753e:	b005      	add	sp, #20
 8007540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007544:	f843 2b04 	str.w	r2, [r3], #4
 8007548:	e7d8      	b.n	80074fc <__multiply+0x50>
 800754a:	f8b3 a000 	ldrh.w	sl, [r3]
 800754e:	f1ba 0f00 	cmp.w	sl, #0
 8007552:	d024      	beq.n	800759e <__multiply+0xf2>
 8007554:	f104 0e14 	add.w	lr, r4, #20
 8007558:	46a9      	mov	r9, r5
 800755a:	f04f 0c00 	mov.w	ip, #0
 800755e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007562:	f8d9 1000 	ldr.w	r1, [r9]
 8007566:	fa1f fb82 	uxth.w	fp, r2
 800756a:	b289      	uxth	r1, r1
 800756c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007570:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007574:	f8d9 2000 	ldr.w	r2, [r9]
 8007578:	4461      	add	r1, ip
 800757a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800757e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007582:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007586:	b289      	uxth	r1, r1
 8007588:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800758c:	4577      	cmp	r7, lr
 800758e:	f849 1b04 	str.w	r1, [r9], #4
 8007592:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007596:	d8e2      	bhi.n	800755e <__multiply+0xb2>
 8007598:	9a01      	ldr	r2, [sp, #4]
 800759a:	f845 c002 	str.w	ip, [r5, r2]
 800759e:	9a03      	ldr	r2, [sp, #12]
 80075a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80075a4:	3304      	adds	r3, #4
 80075a6:	f1b9 0f00 	cmp.w	r9, #0
 80075aa:	d021      	beq.n	80075f0 <__multiply+0x144>
 80075ac:	6829      	ldr	r1, [r5, #0]
 80075ae:	f104 0c14 	add.w	ip, r4, #20
 80075b2:	46ae      	mov	lr, r5
 80075b4:	f04f 0a00 	mov.w	sl, #0
 80075b8:	f8bc b000 	ldrh.w	fp, [ip]
 80075bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80075c0:	fb09 220b 	mla	r2, r9, fp, r2
 80075c4:	4452      	add	r2, sl
 80075c6:	b289      	uxth	r1, r1
 80075c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075cc:	f84e 1b04 	str.w	r1, [lr], #4
 80075d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80075d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80075d8:	f8be 1000 	ldrh.w	r1, [lr]
 80075dc:	fb09 110a 	mla	r1, r9, sl, r1
 80075e0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80075e4:	4567      	cmp	r7, ip
 80075e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80075ea:	d8e5      	bhi.n	80075b8 <__multiply+0x10c>
 80075ec:	9a01      	ldr	r2, [sp, #4]
 80075ee:	50a9      	str	r1, [r5, r2]
 80075f0:	3504      	adds	r5, #4
 80075f2:	e799      	b.n	8007528 <__multiply+0x7c>
 80075f4:	3e01      	subs	r6, #1
 80075f6:	e79b      	b.n	8007530 <__multiply+0x84>
 80075f8:	08008604 	.word	0x08008604
 80075fc:	08008615 	.word	0x08008615

08007600 <__pow5mult>:
 8007600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007604:	4615      	mov	r5, r2
 8007606:	f012 0203 	ands.w	r2, r2, #3
 800760a:	4606      	mov	r6, r0
 800760c:	460f      	mov	r7, r1
 800760e:	d007      	beq.n	8007620 <__pow5mult+0x20>
 8007610:	4c25      	ldr	r4, [pc, #148]	; (80076a8 <__pow5mult+0xa8>)
 8007612:	3a01      	subs	r2, #1
 8007614:	2300      	movs	r3, #0
 8007616:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800761a:	f7ff fe9d 	bl	8007358 <__multadd>
 800761e:	4607      	mov	r7, r0
 8007620:	10ad      	asrs	r5, r5, #2
 8007622:	d03d      	beq.n	80076a0 <__pow5mult+0xa0>
 8007624:	69f4      	ldr	r4, [r6, #28]
 8007626:	b97c      	cbnz	r4, 8007648 <__pow5mult+0x48>
 8007628:	2010      	movs	r0, #16
 800762a:	f7ff fd7f 	bl	800712c <malloc>
 800762e:	4602      	mov	r2, r0
 8007630:	61f0      	str	r0, [r6, #28]
 8007632:	b928      	cbnz	r0, 8007640 <__pow5mult+0x40>
 8007634:	4b1d      	ldr	r3, [pc, #116]	; (80076ac <__pow5mult+0xac>)
 8007636:	481e      	ldr	r0, [pc, #120]	; (80076b0 <__pow5mult+0xb0>)
 8007638:	f240 11b3 	movw	r1, #435	; 0x1b3
 800763c:	f000 fbe4 	bl	8007e08 <__assert_func>
 8007640:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007644:	6004      	str	r4, [r0, #0]
 8007646:	60c4      	str	r4, [r0, #12]
 8007648:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800764c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007650:	b94c      	cbnz	r4, 8007666 <__pow5mult+0x66>
 8007652:	f240 2171 	movw	r1, #625	; 0x271
 8007656:	4630      	mov	r0, r6
 8007658:	f7ff ff12 	bl	8007480 <__i2b>
 800765c:	2300      	movs	r3, #0
 800765e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007662:	4604      	mov	r4, r0
 8007664:	6003      	str	r3, [r0, #0]
 8007666:	f04f 0900 	mov.w	r9, #0
 800766a:	07eb      	lsls	r3, r5, #31
 800766c:	d50a      	bpl.n	8007684 <__pow5mult+0x84>
 800766e:	4639      	mov	r1, r7
 8007670:	4622      	mov	r2, r4
 8007672:	4630      	mov	r0, r6
 8007674:	f7ff ff1a 	bl	80074ac <__multiply>
 8007678:	4639      	mov	r1, r7
 800767a:	4680      	mov	r8, r0
 800767c:	4630      	mov	r0, r6
 800767e:	f7ff fe49 	bl	8007314 <_Bfree>
 8007682:	4647      	mov	r7, r8
 8007684:	106d      	asrs	r5, r5, #1
 8007686:	d00b      	beq.n	80076a0 <__pow5mult+0xa0>
 8007688:	6820      	ldr	r0, [r4, #0]
 800768a:	b938      	cbnz	r0, 800769c <__pow5mult+0x9c>
 800768c:	4622      	mov	r2, r4
 800768e:	4621      	mov	r1, r4
 8007690:	4630      	mov	r0, r6
 8007692:	f7ff ff0b 	bl	80074ac <__multiply>
 8007696:	6020      	str	r0, [r4, #0]
 8007698:	f8c0 9000 	str.w	r9, [r0]
 800769c:	4604      	mov	r4, r0
 800769e:	e7e4      	b.n	800766a <__pow5mult+0x6a>
 80076a0:	4638      	mov	r0, r7
 80076a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076a6:	bf00      	nop
 80076a8:	08008760 	.word	0x08008760
 80076ac:	08008595 	.word	0x08008595
 80076b0:	08008615 	.word	0x08008615

080076b4 <__lshift>:
 80076b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b8:	460c      	mov	r4, r1
 80076ba:	6849      	ldr	r1, [r1, #4]
 80076bc:	6923      	ldr	r3, [r4, #16]
 80076be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076c2:	68a3      	ldr	r3, [r4, #8]
 80076c4:	4607      	mov	r7, r0
 80076c6:	4691      	mov	r9, r2
 80076c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076cc:	f108 0601 	add.w	r6, r8, #1
 80076d0:	42b3      	cmp	r3, r6
 80076d2:	db0b      	blt.n	80076ec <__lshift+0x38>
 80076d4:	4638      	mov	r0, r7
 80076d6:	f7ff fddd 	bl	8007294 <_Balloc>
 80076da:	4605      	mov	r5, r0
 80076dc:	b948      	cbnz	r0, 80076f2 <__lshift+0x3e>
 80076de:	4602      	mov	r2, r0
 80076e0:	4b28      	ldr	r3, [pc, #160]	; (8007784 <__lshift+0xd0>)
 80076e2:	4829      	ldr	r0, [pc, #164]	; (8007788 <__lshift+0xd4>)
 80076e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80076e8:	f000 fb8e 	bl	8007e08 <__assert_func>
 80076ec:	3101      	adds	r1, #1
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	e7ee      	b.n	80076d0 <__lshift+0x1c>
 80076f2:	2300      	movs	r3, #0
 80076f4:	f100 0114 	add.w	r1, r0, #20
 80076f8:	f100 0210 	add.w	r2, r0, #16
 80076fc:	4618      	mov	r0, r3
 80076fe:	4553      	cmp	r3, sl
 8007700:	db33      	blt.n	800776a <__lshift+0xb6>
 8007702:	6920      	ldr	r0, [r4, #16]
 8007704:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007708:	f104 0314 	add.w	r3, r4, #20
 800770c:	f019 091f 	ands.w	r9, r9, #31
 8007710:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007714:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007718:	d02b      	beq.n	8007772 <__lshift+0xbe>
 800771a:	f1c9 0e20 	rsb	lr, r9, #32
 800771e:	468a      	mov	sl, r1
 8007720:	2200      	movs	r2, #0
 8007722:	6818      	ldr	r0, [r3, #0]
 8007724:	fa00 f009 	lsl.w	r0, r0, r9
 8007728:	4310      	orrs	r0, r2
 800772a:	f84a 0b04 	str.w	r0, [sl], #4
 800772e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007732:	459c      	cmp	ip, r3
 8007734:	fa22 f20e 	lsr.w	r2, r2, lr
 8007738:	d8f3      	bhi.n	8007722 <__lshift+0x6e>
 800773a:	ebac 0304 	sub.w	r3, ip, r4
 800773e:	3b15      	subs	r3, #21
 8007740:	f023 0303 	bic.w	r3, r3, #3
 8007744:	3304      	adds	r3, #4
 8007746:	f104 0015 	add.w	r0, r4, #21
 800774a:	4584      	cmp	ip, r0
 800774c:	bf38      	it	cc
 800774e:	2304      	movcc	r3, #4
 8007750:	50ca      	str	r2, [r1, r3]
 8007752:	b10a      	cbz	r2, 8007758 <__lshift+0xa4>
 8007754:	f108 0602 	add.w	r6, r8, #2
 8007758:	3e01      	subs	r6, #1
 800775a:	4638      	mov	r0, r7
 800775c:	612e      	str	r6, [r5, #16]
 800775e:	4621      	mov	r1, r4
 8007760:	f7ff fdd8 	bl	8007314 <_Bfree>
 8007764:	4628      	mov	r0, r5
 8007766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800776a:	f842 0f04 	str.w	r0, [r2, #4]!
 800776e:	3301      	adds	r3, #1
 8007770:	e7c5      	b.n	80076fe <__lshift+0x4a>
 8007772:	3904      	subs	r1, #4
 8007774:	f853 2b04 	ldr.w	r2, [r3], #4
 8007778:	f841 2f04 	str.w	r2, [r1, #4]!
 800777c:	459c      	cmp	ip, r3
 800777e:	d8f9      	bhi.n	8007774 <__lshift+0xc0>
 8007780:	e7ea      	b.n	8007758 <__lshift+0xa4>
 8007782:	bf00      	nop
 8007784:	08008604 	.word	0x08008604
 8007788:	08008615 	.word	0x08008615

0800778c <__mcmp>:
 800778c:	b530      	push	{r4, r5, lr}
 800778e:	6902      	ldr	r2, [r0, #16]
 8007790:	690c      	ldr	r4, [r1, #16]
 8007792:	1b12      	subs	r2, r2, r4
 8007794:	d10e      	bne.n	80077b4 <__mcmp+0x28>
 8007796:	f100 0314 	add.w	r3, r0, #20
 800779a:	3114      	adds	r1, #20
 800779c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80077a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80077a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80077a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80077ac:	42a5      	cmp	r5, r4
 80077ae:	d003      	beq.n	80077b8 <__mcmp+0x2c>
 80077b0:	d305      	bcc.n	80077be <__mcmp+0x32>
 80077b2:	2201      	movs	r2, #1
 80077b4:	4610      	mov	r0, r2
 80077b6:	bd30      	pop	{r4, r5, pc}
 80077b8:	4283      	cmp	r3, r0
 80077ba:	d3f3      	bcc.n	80077a4 <__mcmp+0x18>
 80077bc:	e7fa      	b.n	80077b4 <__mcmp+0x28>
 80077be:	f04f 32ff 	mov.w	r2, #4294967295
 80077c2:	e7f7      	b.n	80077b4 <__mcmp+0x28>

080077c4 <__mdiff>:
 80077c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c8:	460c      	mov	r4, r1
 80077ca:	4606      	mov	r6, r0
 80077cc:	4611      	mov	r1, r2
 80077ce:	4620      	mov	r0, r4
 80077d0:	4690      	mov	r8, r2
 80077d2:	f7ff ffdb 	bl	800778c <__mcmp>
 80077d6:	1e05      	subs	r5, r0, #0
 80077d8:	d110      	bne.n	80077fc <__mdiff+0x38>
 80077da:	4629      	mov	r1, r5
 80077dc:	4630      	mov	r0, r6
 80077de:	f7ff fd59 	bl	8007294 <_Balloc>
 80077e2:	b930      	cbnz	r0, 80077f2 <__mdiff+0x2e>
 80077e4:	4b3a      	ldr	r3, [pc, #232]	; (80078d0 <__mdiff+0x10c>)
 80077e6:	4602      	mov	r2, r0
 80077e8:	f240 2137 	movw	r1, #567	; 0x237
 80077ec:	4839      	ldr	r0, [pc, #228]	; (80078d4 <__mdiff+0x110>)
 80077ee:	f000 fb0b 	bl	8007e08 <__assert_func>
 80077f2:	2301      	movs	r3, #1
 80077f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077fc:	bfa4      	itt	ge
 80077fe:	4643      	movge	r3, r8
 8007800:	46a0      	movge	r8, r4
 8007802:	4630      	mov	r0, r6
 8007804:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007808:	bfa6      	itte	ge
 800780a:	461c      	movge	r4, r3
 800780c:	2500      	movge	r5, #0
 800780e:	2501      	movlt	r5, #1
 8007810:	f7ff fd40 	bl	8007294 <_Balloc>
 8007814:	b920      	cbnz	r0, 8007820 <__mdiff+0x5c>
 8007816:	4b2e      	ldr	r3, [pc, #184]	; (80078d0 <__mdiff+0x10c>)
 8007818:	4602      	mov	r2, r0
 800781a:	f240 2145 	movw	r1, #581	; 0x245
 800781e:	e7e5      	b.n	80077ec <__mdiff+0x28>
 8007820:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007824:	6926      	ldr	r6, [r4, #16]
 8007826:	60c5      	str	r5, [r0, #12]
 8007828:	f104 0914 	add.w	r9, r4, #20
 800782c:	f108 0514 	add.w	r5, r8, #20
 8007830:	f100 0e14 	add.w	lr, r0, #20
 8007834:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007838:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800783c:	f108 0210 	add.w	r2, r8, #16
 8007840:	46f2      	mov	sl, lr
 8007842:	2100      	movs	r1, #0
 8007844:	f859 3b04 	ldr.w	r3, [r9], #4
 8007848:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800784c:	fa11 f88b 	uxtah	r8, r1, fp
 8007850:	b299      	uxth	r1, r3
 8007852:	0c1b      	lsrs	r3, r3, #16
 8007854:	eba8 0801 	sub.w	r8, r8, r1
 8007858:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800785c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007860:	fa1f f888 	uxth.w	r8, r8
 8007864:	1419      	asrs	r1, r3, #16
 8007866:	454e      	cmp	r6, r9
 8007868:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800786c:	f84a 3b04 	str.w	r3, [sl], #4
 8007870:	d8e8      	bhi.n	8007844 <__mdiff+0x80>
 8007872:	1b33      	subs	r3, r6, r4
 8007874:	3b15      	subs	r3, #21
 8007876:	f023 0303 	bic.w	r3, r3, #3
 800787a:	3304      	adds	r3, #4
 800787c:	3415      	adds	r4, #21
 800787e:	42a6      	cmp	r6, r4
 8007880:	bf38      	it	cc
 8007882:	2304      	movcc	r3, #4
 8007884:	441d      	add	r5, r3
 8007886:	4473      	add	r3, lr
 8007888:	469e      	mov	lr, r3
 800788a:	462e      	mov	r6, r5
 800788c:	4566      	cmp	r6, ip
 800788e:	d30e      	bcc.n	80078ae <__mdiff+0xea>
 8007890:	f10c 0203 	add.w	r2, ip, #3
 8007894:	1b52      	subs	r2, r2, r5
 8007896:	f022 0203 	bic.w	r2, r2, #3
 800789a:	3d03      	subs	r5, #3
 800789c:	45ac      	cmp	ip, r5
 800789e:	bf38      	it	cc
 80078a0:	2200      	movcc	r2, #0
 80078a2:	4413      	add	r3, r2
 80078a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80078a8:	b17a      	cbz	r2, 80078ca <__mdiff+0x106>
 80078aa:	6107      	str	r7, [r0, #16]
 80078ac:	e7a4      	b.n	80077f8 <__mdiff+0x34>
 80078ae:	f856 8b04 	ldr.w	r8, [r6], #4
 80078b2:	fa11 f288 	uxtah	r2, r1, r8
 80078b6:	1414      	asrs	r4, r2, #16
 80078b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80078bc:	b292      	uxth	r2, r2
 80078be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80078c2:	f84e 2b04 	str.w	r2, [lr], #4
 80078c6:	1421      	asrs	r1, r4, #16
 80078c8:	e7e0      	b.n	800788c <__mdiff+0xc8>
 80078ca:	3f01      	subs	r7, #1
 80078cc:	e7ea      	b.n	80078a4 <__mdiff+0xe0>
 80078ce:	bf00      	nop
 80078d0:	08008604 	.word	0x08008604
 80078d4:	08008615 	.word	0x08008615

080078d8 <__d2b>:
 80078d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078dc:	460f      	mov	r7, r1
 80078de:	2101      	movs	r1, #1
 80078e0:	ec59 8b10 	vmov	r8, r9, d0
 80078e4:	4616      	mov	r6, r2
 80078e6:	f7ff fcd5 	bl	8007294 <_Balloc>
 80078ea:	4604      	mov	r4, r0
 80078ec:	b930      	cbnz	r0, 80078fc <__d2b+0x24>
 80078ee:	4602      	mov	r2, r0
 80078f0:	4b24      	ldr	r3, [pc, #144]	; (8007984 <__d2b+0xac>)
 80078f2:	4825      	ldr	r0, [pc, #148]	; (8007988 <__d2b+0xb0>)
 80078f4:	f240 310f 	movw	r1, #783	; 0x30f
 80078f8:	f000 fa86 	bl	8007e08 <__assert_func>
 80078fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007900:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007904:	bb2d      	cbnz	r5, 8007952 <__d2b+0x7a>
 8007906:	9301      	str	r3, [sp, #4]
 8007908:	f1b8 0300 	subs.w	r3, r8, #0
 800790c:	d026      	beq.n	800795c <__d2b+0x84>
 800790e:	4668      	mov	r0, sp
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	f7ff fd87 	bl	8007424 <__lo0bits>
 8007916:	e9dd 1200 	ldrd	r1, r2, [sp]
 800791a:	b1e8      	cbz	r0, 8007958 <__d2b+0x80>
 800791c:	f1c0 0320 	rsb	r3, r0, #32
 8007920:	fa02 f303 	lsl.w	r3, r2, r3
 8007924:	430b      	orrs	r3, r1
 8007926:	40c2      	lsrs	r2, r0
 8007928:	6163      	str	r3, [r4, #20]
 800792a:	9201      	str	r2, [sp, #4]
 800792c:	9b01      	ldr	r3, [sp, #4]
 800792e:	61a3      	str	r3, [r4, #24]
 8007930:	2b00      	cmp	r3, #0
 8007932:	bf14      	ite	ne
 8007934:	2202      	movne	r2, #2
 8007936:	2201      	moveq	r2, #1
 8007938:	6122      	str	r2, [r4, #16]
 800793a:	b1bd      	cbz	r5, 800796c <__d2b+0x94>
 800793c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007940:	4405      	add	r5, r0
 8007942:	603d      	str	r5, [r7, #0]
 8007944:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007948:	6030      	str	r0, [r6, #0]
 800794a:	4620      	mov	r0, r4
 800794c:	b003      	add	sp, #12
 800794e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007956:	e7d6      	b.n	8007906 <__d2b+0x2e>
 8007958:	6161      	str	r1, [r4, #20]
 800795a:	e7e7      	b.n	800792c <__d2b+0x54>
 800795c:	a801      	add	r0, sp, #4
 800795e:	f7ff fd61 	bl	8007424 <__lo0bits>
 8007962:	9b01      	ldr	r3, [sp, #4]
 8007964:	6163      	str	r3, [r4, #20]
 8007966:	3020      	adds	r0, #32
 8007968:	2201      	movs	r2, #1
 800796a:	e7e5      	b.n	8007938 <__d2b+0x60>
 800796c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007970:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007974:	6038      	str	r0, [r7, #0]
 8007976:	6918      	ldr	r0, [r3, #16]
 8007978:	f7ff fd34 	bl	80073e4 <__hi0bits>
 800797c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007980:	e7e2      	b.n	8007948 <__d2b+0x70>
 8007982:	bf00      	nop
 8007984:	08008604 	.word	0x08008604
 8007988:	08008615 	.word	0x08008615

0800798c <__ssputs_r>:
 800798c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007990:	688e      	ldr	r6, [r1, #8]
 8007992:	461f      	mov	r7, r3
 8007994:	42be      	cmp	r6, r7
 8007996:	680b      	ldr	r3, [r1, #0]
 8007998:	4682      	mov	sl, r0
 800799a:	460c      	mov	r4, r1
 800799c:	4690      	mov	r8, r2
 800799e:	d82c      	bhi.n	80079fa <__ssputs_r+0x6e>
 80079a0:	898a      	ldrh	r2, [r1, #12]
 80079a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079a6:	d026      	beq.n	80079f6 <__ssputs_r+0x6a>
 80079a8:	6965      	ldr	r5, [r4, #20]
 80079aa:	6909      	ldr	r1, [r1, #16]
 80079ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079b0:	eba3 0901 	sub.w	r9, r3, r1
 80079b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079b8:	1c7b      	adds	r3, r7, #1
 80079ba:	444b      	add	r3, r9
 80079bc:	106d      	asrs	r5, r5, #1
 80079be:	429d      	cmp	r5, r3
 80079c0:	bf38      	it	cc
 80079c2:	461d      	movcc	r5, r3
 80079c4:	0553      	lsls	r3, r2, #21
 80079c6:	d527      	bpl.n	8007a18 <__ssputs_r+0x8c>
 80079c8:	4629      	mov	r1, r5
 80079ca:	f7ff fbd7 	bl	800717c <_malloc_r>
 80079ce:	4606      	mov	r6, r0
 80079d0:	b360      	cbz	r0, 8007a2c <__ssputs_r+0xa0>
 80079d2:	6921      	ldr	r1, [r4, #16]
 80079d4:	464a      	mov	r2, r9
 80079d6:	f000 fa09 	bl	8007dec <memcpy>
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e4:	81a3      	strh	r3, [r4, #12]
 80079e6:	6126      	str	r6, [r4, #16]
 80079e8:	6165      	str	r5, [r4, #20]
 80079ea:	444e      	add	r6, r9
 80079ec:	eba5 0509 	sub.w	r5, r5, r9
 80079f0:	6026      	str	r6, [r4, #0]
 80079f2:	60a5      	str	r5, [r4, #8]
 80079f4:	463e      	mov	r6, r7
 80079f6:	42be      	cmp	r6, r7
 80079f8:	d900      	bls.n	80079fc <__ssputs_r+0x70>
 80079fa:	463e      	mov	r6, r7
 80079fc:	6820      	ldr	r0, [r4, #0]
 80079fe:	4632      	mov	r2, r6
 8007a00:	4641      	mov	r1, r8
 8007a02:	f000 f9c9 	bl	8007d98 <memmove>
 8007a06:	68a3      	ldr	r3, [r4, #8]
 8007a08:	1b9b      	subs	r3, r3, r6
 8007a0a:	60a3      	str	r3, [r4, #8]
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	4433      	add	r3, r6
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	2000      	movs	r0, #0
 8007a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a18:	462a      	mov	r2, r5
 8007a1a:	f000 fa3b 	bl	8007e94 <_realloc_r>
 8007a1e:	4606      	mov	r6, r0
 8007a20:	2800      	cmp	r0, #0
 8007a22:	d1e0      	bne.n	80079e6 <__ssputs_r+0x5a>
 8007a24:	6921      	ldr	r1, [r4, #16]
 8007a26:	4650      	mov	r0, sl
 8007a28:	f7ff fb34 	bl	8007094 <_free_r>
 8007a2c:	230c      	movs	r3, #12
 8007a2e:	f8ca 3000 	str.w	r3, [sl]
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a38:	81a3      	strh	r3, [r4, #12]
 8007a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3e:	e7e9      	b.n	8007a14 <__ssputs_r+0x88>

08007a40 <_svfiprintf_r>:
 8007a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a44:	4698      	mov	r8, r3
 8007a46:	898b      	ldrh	r3, [r1, #12]
 8007a48:	061b      	lsls	r3, r3, #24
 8007a4a:	b09d      	sub	sp, #116	; 0x74
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	460d      	mov	r5, r1
 8007a50:	4614      	mov	r4, r2
 8007a52:	d50e      	bpl.n	8007a72 <_svfiprintf_r+0x32>
 8007a54:	690b      	ldr	r3, [r1, #16]
 8007a56:	b963      	cbnz	r3, 8007a72 <_svfiprintf_r+0x32>
 8007a58:	2140      	movs	r1, #64	; 0x40
 8007a5a:	f7ff fb8f 	bl	800717c <_malloc_r>
 8007a5e:	6028      	str	r0, [r5, #0]
 8007a60:	6128      	str	r0, [r5, #16]
 8007a62:	b920      	cbnz	r0, 8007a6e <_svfiprintf_r+0x2e>
 8007a64:	230c      	movs	r3, #12
 8007a66:	603b      	str	r3, [r7, #0]
 8007a68:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6c:	e0d0      	b.n	8007c10 <_svfiprintf_r+0x1d0>
 8007a6e:	2340      	movs	r3, #64	; 0x40
 8007a70:	616b      	str	r3, [r5, #20]
 8007a72:	2300      	movs	r3, #0
 8007a74:	9309      	str	r3, [sp, #36]	; 0x24
 8007a76:	2320      	movs	r3, #32
 8007a78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a80:	2330      	movs	r3, #48	; 0x30
 8007a82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007c28 <_svfiprintf_r+0x1e8>
 8007a86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a8a:	f04f 0901 	mov.w	r9, #1
 8007a8e:	4623      	mov	r3, r4
 8007a90:	469a      	mov	sl, r3
 8007a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a96:	b10a      	cbz	r2, 8007a9c <_svfiprintf_r+0x5c>
 8007a98:	2a25      	cmp	r2, #37	; 0x25
 8007a9a:	d1f9      	bne.n	8007a90 <_svfiprintf_r+0x50>
 8007a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8007aa0:	d00b      	beq.n	8007aba <_svfiprintf_r+0x7a>
 8007aa2:	465b      	mov	r3, fp
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	f7ff ff6f 	bl	800798c <__ssputs_r>
 8007aae:	3001      	adds	r0, #1
 8007ab0:	f000 80a9 	beq.w	8007c06 <_svfiprintf_r+0x1c6>
 8007ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ab6:	445a      	add	r2, fp
 8007ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8007aba:	f89a 3000 	ldrb.w	r3, [sl]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 80a1 	beq.w	8007c06 <_svfiprintf_r+0x1c6>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ace:	f10a 0a01 	add.w	sl, sl, #1
 8007ad2:	9304      	str	r3, [sp, #16]
 8007ad4:	9307      	str	r3, [sp, #28]
 8007ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ada:	931a      	str	r3, [sp, #104]	; 0x68
 8007adc:	4654      	mov	r4, sl
 8007ade:	2205      	movs	r2, #5
 8007ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae4:	4850      	ldr	r0, [pc, #320]	; (8007c28 <_svfiprintf_r+0x1e8>)
 8007ae6:	f7f8 fb83 	bl	80001f0 <memchr>
 8007aea:	9a04      	ldr	r2, [sp, #16]
 8007aec:	b9d8      	cbnz	r0, 8007b26 <_svfiprintf_r+0xe6>
 8007aee:	06d0      	lsls	r0, r2, #27
 8007af0:	bf44      	itt	mi
 8007af2:	2320      	movmi	r3, #32
 8007af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007af8:	0711      	lsls	r1, r2, #28
 8007afa:	bf44      	itt	mi
 8007afc:	232b      	movmi	r3, #43	; 0x2b
 8007afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b02:	f89a 3000 	ldrb.w	r3, [sl]
 8007b06:	2b2a      	cmp	r3, #42	; 0x2a
 8007b08:	d015      	beq.n	8007b36 <_svfiprintf_r+0xf6>
 8007b0a:	9a07      	ldr	r2, [sp, #28]
 8007b0c:	4654      	mov	r4, sl
 8007b0e:	2000      	movs	r0, #0
 8007b10:	f04f 0c0a 	mov.w	ip, #10
 8007b14:	4621      	mov	r1, r4
 8007b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b1a:	3b30      	subs	r3, #48	; 0x30
 8007b1c:	2b09      	cmp	r3, #9
 8007b1e:	d94d      	bls.n	8007bbc <_svfiprintf_r+0x17c>
 8007b20:	b1b0      	cbz	r0, 8007b50 <_svfiprintf_r+0x110>
 8007b22:	9207      	str	r2, [sp, #28]
 8007b24:	e014      	b.n	8007b50 <_svfiprintf_r+0x110>
 8007b26:	eba0 0308 	sub.w	r3, r0, r8
 8007b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	9304      	str	r3, [sp, #16]
 8007b32:	46a2      	mov	sl, r4
 8007b34:	e7d2      	b.n	8007adc <_svfiprintf_r+0x9c>
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	1d19      	adds	r1, r3, #4
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	9103      	str	r1, [sp, #12]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bfbb      	ittet	lt
 8007b42:	425b      	neglt	r3, r3
 8007b44:	f042 0202 	orrlt.w	r2, r2, #2
 8007b48:	9307      	strge	r3, [sp, #28]
 8007b4a:	9307      	strlt	r3, [sp, #28]
 8007b4c:	bfb8      	it	lt
 8007b4e:	9204      	strlt	r2, [sp, #16]
 8007b50:	7823      	ldrb	r3, [r4, #0]
 8007b52:	2b2e      	cmp	r3, #46	; 0x2e
 8007b54:	d10c      	bne.n	8007b70 <_svfiprintf_r+0x130>
 8007b56:	7863      	ldrb	r3, [r4, #1]
 8007b58:	2b2a      	cmp	r3, #42	; 0x2a
 8007b5a:	d134      	bne.n	8007bc6 <_svfiprintf_r+0x186>
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	1d1a      	adds	r2, r3, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	9203      	str	r2, [sp, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bfb8      	it	lt
 8007b68:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b6c:	3402      	adds	r4, #2
 8007b6e:	9305      	str	r3, [sp, #20]
 8007b70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007c38 <_svfiprintf_r+0x1f8>
 8007b74:	7821      	ldrb	r1, [r4, #0]
 8007b76:	2203      	movs	r2, #3
 8007b78:	4650      	mov	r0, sl
 8007b7a:	f7f8 fb39 	bl	80001f0 <memchr>
 8007b7e:	b138      	cbz	r0, 8007b90 <_svfiprintf_r+0x150>
 8007b80:	9b04      	ldr	r3, [sp, #16]
 8007b82:	eba0 000a 	sub.w	r0, r0, sl
 8007b86:	2240      	movs	r2, #64	; 0x40
 8007b88:	4082      	lsls	r2, r0
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	3401      	adds	r4, #1
 8007b8e:	9304      	str	r3, [sp, #16]
 8007b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b94:	4825      	ldr	r0, [pc, #148]	; (8007c2c <_svfiprintf_r+0x1ec>)
 8007b96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b9a:	2206      	movs	r2, #6
 8007b9c:	f7f8 fb28 	bl	80001f0 <memchr>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d038      	beq.n	8007c16 <_svfiprintf_r+0x1d6>
 8007ba4:	4b22      	ldr	r3, [pc, #136]	; (8007c30 <_svfiprintf_r+0x1f0>)
 8007ba6:	bb1b      	cbnz	r3, 8007bf0 <_svfiprintf_r+0x1b0>
 8007ba8:	9b03      	ldr	r3, [sp, #12]
 8007baa:	3307      	adds	r3, #7
 8007bac:	f023 0307 	bic.w	r3, r3, #7
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	9303      	str	r3, [sp, #12]
 8007bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb6:	4433      	add	r3, r6
 8007bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bba:	e768      	b.n	8007a8e <_svfiprintf_r+0x4e>
 8007bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	2001      	movs	r0, #1
 8007bc4:	e7a6      	b.n	8007b14 <_svfiprintf_r+0xd4>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	3401      	adds	r4, #1
 8007bca:	9305      	str	r3, [sp, #20]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	f04f 0c0a 	mov.w	ip, #10
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bd8:	3a30      	subs	r2, #48	; 0x30
 8007bda:	2a09      	cmp	r2, #9
 8007bdc:	d903      	bls.n	8007be6 <_svfiprintf_r+0x1a6>
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0c6      	beq.n	8007b70 <_svfiprintf_r+0x130>
 8007be2:	9105      	str	r1, [sp, #20]
 8007be4:	e7c4      	b.n	8007b70 <_svfiprintf_r+0x130>
 8007be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bea:	4604      	mov	r4, r0
 8007bec:	2301      	movs	r3, #1
 8007bee:	e7f0      	b.n	8007bd2 <_svfiprintf_r+0x192>
 8007bf0:	ab03      	add	r3, sp, #12
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	462a      	mov	r2, r5
 8007bf6:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <_svfiprintf_r+0x1f4>)
 8007bf8:	a904      	add	r1, sp, #16
 8007bfa:	4638      	mov	r0, r7
 8007bfc:	f7fd fe56 	bl	80058ac <_printf_float>
 8007c00:	1c42      	adds	r2, r0, #1
 8007c02:	4606      	mov	r6, r0
 8007c04:	d1d6      	bne.n	8007bb4 <_svfiprintf_r+0x174>
 8007c06:	89ab      	ldrh	r3, [r5, #12]
 8007c08:	065b      	lsls	r3, r3, #25
 8007c0a:	f53f af2d 	bmi.w	8007a68 <_svfiprintf_r+0x28>
 8007c0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c10:	b01d      	add	sp, #116	; 0x74
 8007c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c16:	ab03      	add	r3, sp, #12
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	462a      	mov	r2, r5
 8007c1c:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <_svfiprintf_r+0x1f4>)
 8007c1e:	a904      	add	r1, sp, #16
 8007c20:	4638      	mov	r0, r7
 8007c22:	f7fe f8e7 	bl	8005df4 <_printf_i>
 8007c26:	e7eb      	b.n	8007c00 <_svfiprintf_r+0x1c0>
 8007c28:	0800876c 	.word	0x0800876c
 8007c2c:	08008776 	.word	0x08008776
 8007c30:	080058ad 	.word	0x080058ad
 8007c34:	0800798d 	.word	0x0800798d
 8007c38:	08008772 	.word	0x08008772

08007c3c <__sflush_r>:
 8007c3c:	898a      	ldrh	r2, [r1, #12]
 8007c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c42:	4605      	mov	r5, r0
 8007c44:	0710      	lsls	r0, r2, #28
 8007c46:	460c      	mov	r4, r1
 8007c48:	d458      	bmi.n	8007cfc <__sflush_r+0xc0>
 8007c4a:	684b      	ldr	r3, [r1, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	dc05      	bgt.n	8007c5c <__sflush_r+0x20>
 8007c50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	dc02      	bgt.n	8007c5c <__sflush_r+0x20>
 8007c56:	2000      	movs	r0, #0
 8007c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c5e:	2e00      	cmp	r6, #0
 8007c60:	d0f9      	beq.n	8007c56 <__sflush_r+0x1a>
 8007c62:	2300      	movs	r3, #0
 8007c64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c68:	682f      	ldr	r7, [r5, #0]
 8007c6a:	6a21      	ldr	r1, [r4, #32]
 8007c6c:	602b      	str	r3, [r5, #0]
 8007c6e:	d032      	beq.n	8007cd6 <__sflush_r+0x9a>
 8007c70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	075a      	lsls	r2, r3, #29
 8007c76:	d505      	bpl.n	8007c84 <__sflush_r+0x48>
 8007c78:	6863      	ldr	r3, [r4, #4]
 8007c7a:	1ac0      	subs	r0, r0, r3
 8007c7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c7e:	b10b      	cbz	r3, 8007c84 <__sflush_r+0x48>
 8007c80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c82:	1ac0      	subs	r0, r0, r3
 8007c84:	2300      	movs	r3, #0
 8007c86:	4602      	mov	r2, r0
 8007c88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c8a:	6a21      	ldr	r1, [r4, #32]
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	47b0      	blx	r6
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	d106      	bne.n	8007ca4 <__sflush_r+0x68>
 8007c96:	6829      	ldr	r1, [r5, #0]
 8007c98:	291d      	cmp	r1, #29
 8007c9a:	d82b      	bhi.n	8007cf4 <__sflush_r+0xb8>
 8007c9c:	4a29      	ldr	r2, [pc, #164]	; (8007d44 <__sflush_r+0x108>)
 8007c9e:	410a      	asrs	r2, r1
 8007ca0:	07d6      	lsls	r6, r2, #31
 8007ca2:	d427      	bmi.n	8007cf4 <__sflush_r+0xb8>
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	6062      	str	r2, [r4, #4]
 8007ca8:	04d9      	lsls	r1, r3, #19
 8007caa:	6922      	ldr	r2, [r4, #16]
 8007cac:	6022      	str	r2, [r4, #0]
 8007cae:	d504      	bpl.n	8007cba <__sflush_r+0x7e>
 8007cb0:	1c42      	adds	r2, r0, #1
 8007cb2:	d101      	bne.n	8007cb8 <__sflush_r+0x7c>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	b903      	cbnz	r3, 8007cba <__sflush_r+0x7e>
 8007cb8:	6560      	str	r0, [r4, #84]	; 0x54
 8007cba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cbc:	602f      	str	r7, [r5, #0]
 8007cbe:	2900      	cmp	r1, #0
 8007cc0:	d0c9      	beq.n	8007c56 <__sflush_r+0x1a>
 8007cc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cc6:	4299      	cmp	r1, r3
 8007cc8:	d002      	beq.n	8007cd0 <__sflush_r+0x94>
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f7ff f9e2 	bl	8007094 <_free_r>
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	6360      	str	r0, [r4, #52]	; 0x34
 8007cd4:	e7c0      	b.n	8007c58 <__sflush_r+0x1c>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	4628      	mov	r0, r5
 8007cda:	47b0      	blx	r6
 8007cdc:	1c41      	adds	r1, r0, #1
 8007cde:	d1c8      	bne.n	8007c72 <__sflush_r+0x36>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0c5      	beq.n	8007c72 <__sflush_r+0x36>
 8007ce6:	2b1d      	cmp	r3, #29
 8007ce8:	d001      	beq.n	8007cee <__sflush_r+0xb2>
 8007cea:	2b16      	cmp	r3, #22
 8007cec:	d101      	bne.n	8007cf2 <__sflush_r+0xb6>
 8007cee:	602f      	str	r7, [r5, #0]
 8007cf0:	e7b1      	b.n	8007c56 <__sflush_r+0x1a>
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	e7ad      	b.n	8007c58 <__sflush_r+0x1c>
 8007cfc:	690f      	ldr	r7, [r1, #16]
 8007cfe:	2f00      	cmp	r7, #0
 8007d00:	d0a9      	beq.n	8007c56 <__sflush_r+0x1a>
 8007d02:	0793      	lsls	r3, r2, #30
 8007d04:	680e      	ldr	r6, [r1, #0]
 8007d06:	bf08      	it	eq
 8007d08:	694b      	ldreq	r3, [r1, #20]
 8007d0a:	600f      	str	r7, [r1, #0]
 8007d0c:	bf18      	it	ne
 8007d0e:	2300      	movne	r3, #0
 8007d10:	eba6 0807 	sub.w	r8, r6, r7
 8007d14:	608b      	str	r3, [r1, #8]
 8007d16:	f1b8 0f00 	cmp.w	r8, #0
 8007d1a:	dd9c      	ble.n	8007c56 <__sflush_r+0x1a>
 8007d1c:	6a21      	ldr	r1, [r4, #32]
 8007d1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d20:	4643      	mov	r3, r8
 8007d22:	463a      	mov	r2, r7
 8007d24:	4628      	mov	r0, r5
 8007d26:	47b0      	blx	r6
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	dc06      	bgt.n	8007d3a <__sflush_r+0xfe>
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d32:	81a3      	strh	r3, [r4, #12]
 8007d34:	f04f 30ff 	mov.w	r0, #4294967295
 8007d38:	e78e      	b.n	8007c58 <__sflush_r+0x1c>
 8007d3a:	4407      	add	r7, r0
 8007d3c:	eba8 0800 	sub.w	r8, r8, r0
 8007d40:	e7e9      	b.n	8007d16 <__sflush_r+0xda>
 8007d42:	bf00      	nop
 8007d44:	dfbffffe 	.word	0xdfbffffe

08007d48 <_fflush_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	690b      	ldr	r3, [r1, #16]
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	460c      	mov	r4, r1
 8007d50:	b913      	cbnz	r3, 8007d58 <_fflush_r+0x10>
 8007d52:	2500      	movs	r5, #0
 8007d54:	4628      	mov	r0, r5
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	b118      	cbz	r0, 8007d62 <_fflush_r+0x1a>
 8007d5a:	6a03      	ldr	r3, [r0, #32]
 8007d5c:	b90b      	cbnz	r3, 8007d62 <_fflush_r+0x1a>
 8007d5e:	f7fe f9f7 	bl	8006150 <__sinit>
 8007d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d0f3      	beq.n	8007d52 <_fflush_r+0xa>
 8007d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d6c:	07d0      	lsls	r0, r2, #31
 8007d6e:	d404      	bmi.n	8007d7a <_fflush_r+0x32>
 8007d70:	0599      	lsls	r1, r3, #22
 8007d72:	d402      	bmi.n	8007d7a <_fflush_r+0x32>
 8007d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d76:	f7fe fb10 	bl	800639a <__retarget_lock_acquire_recursive>
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	f7ff ff5d 	bl	8007c3c <__sflush_r>
 8007d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d84:	07da      	lsls	r2, r3, #31
 8007d86:	4605      	mov	r5, r0
 8007d88:	d4e4      	bmi.n	8007d54 <_fflush_r+0xc>
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	059b      	lsls	r3, r3, #22
 8007d8e:	d4e1      	bmi.n	8007d54 <_fflush_r+0xc>
 8007d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d92:	f7fe fb03 	bl	800639c <__retarget_lock_release_recursive>
 8007d96:	e7dd      	b.n	8007d54 <_fflush_r+0xc>

08007d98 <memmove>:
 8007d98:	4288      	cmp	r0, r1
 8007d9a:	b510      	push	{r4, lr}
 8007d9c:	eb01 0402 	add.w	r4, r1, r2
 8007da0:	d902      	bls.n	8007da8 <memmove+0x10>
 8007da2:	4284      	cmp	r4, r0
 8007da4:	4623      	mov	r3, r4
 8007da6:	d807      	bhi.n	8007db8 <memmove+0x20>
 8007da8:	1e43      	subs	r3, r0, #1
 8007daa:	42a1      	cmp	r1, r4
 8007dac:	d008      	beq.n	8007dc0 <memmove+0x28>
 8007dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007db2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007db6:	e7f8      	b.n	8007daa <memmove+0x12>
 8007db8:	4402      	add	r2, r0
 8007dba:	4601      	mov	r1, r0
 8007dbc:	428a      	cmp	r2, r1
 8007dbe:	d100      	bne.n	8007dc2 <memmove+0x2a>
 8007dc0:	bd10      	pop	{r4, pc}
 8007dc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dca:	e7f7      	b.n	8007dbc <memmove+0x24>

08007dcc <_sbrk_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	4d06      	ldr	r5, [pc, #24]	; (8007de8 <_sbrk_r+0x1c>)
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	602b      	str	r3, [r5, #0]
 8007dd8:	f7f9 fc48 	bl	800166c <_sbrk>
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d102      	bne.n	8007de6 <_sbrk_r+0x1a>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	b103      	cbz	r3, 8007de6 <_sbrk_r+0x1a>
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	20000428 	.word	0x20000428

08007dec <memcpy>:
 8007dec:	440a      	add	r2, r1
 8007dee:	4291      	cmp	r1, r2
 8007df0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007df4:	d100      	bne.n	8007df8 <memcpy+0xc>
 8007df6:	4770      	bx	lr
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e02:	4291      	cmp	r1, r2
 8007e04:	d1f9      	bne.n	8007dfa <memcpy+0xe>
 8007e06:	bd10      	pop	{r4, pc}

08007e08 <__assert_func>:
 8007e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e0a:	4614      	mov	r4, r2
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <__assert_func+0x2c>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4605      	mov	r5, r0
 8007e14:	68d8      	ldr	r0, [r3, #12]
 8007e16:	b14c      	cbz	r4, 8007e2c <__assert_func+0x24>
 8007e18:	4b07      	ldr	r3, [pc, #28]	; (8007e38 <__assert_func+0x30>)
 8007e1a:	9100      	str	r1, [sp, #0]
 8007e1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e20:	4906      	ldr	r1, [pc, #24]	; (8007e3c <__assert_func+0x34>)
 8007e22:	462b      	mov	r3, r5
 8007e24:	f000 f872 	bl	8007f0c <fiprintf>
 8007e28:	f000 f882 	bl	8007f30 <abort>
 8007e2c:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <__assert_func+0x38>)
 8007e2e:	461c      	mov	r4, r3
 8007e30:	e7f3      	b.n	8007e1a <__assert_func+0x12>
 8007e32:	bf00      	nop
 8007e34:	20000064 	.word	0x20000064
 8007e38:	08008787 	.word	0x08008787
 8007e3c:	08008794 	.word	0x08008794
 8007e40:	080087c2 	.word	0x080087c2

08007e44 <_calloc_r>:
 8007e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e46:	fba1 2402 	umull	r2, r4, r1, r2
 8007e4a:	b94c      	cbnz	r4, 8007e60 <_calloc_r+0x1c>
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	9201      	str	r2, [sp, #4]
 8007e50:	f7ff f994 	bl	800717c <_malloc_r>
 8007e54:	9a01      	ldr	r2, [sp, #4]
 8007e56:	4605      	mov	r5, r0
 8007e58:	b930      	cbnz	r0, 8007e68 <_calloc_r+0x24>
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	b003      	add	sp, #12
 8007e5e:	bd30      	pop	{r4, r5, pc}
 8007e60:	220c      	movs	r2, #12
 8007e62:	6002      	str	r2, [r0, #0]
 8007e64:	2500      	movs	r5, #0
 8007e66:	e7f8      	b.n	8007e5a <_calloc_r+0x16>
 8007e68:	4621      	mov	r1, r4
 8007e6a:	f7fe fa0a 	bl	8006282 <memset>
 8007e6e:	e7f4      	b.n	8007e5a <_calloc_r+0x16>

08007e70 <__ascii_mbtowc>:
 8007e70:	b082      	sub	sp, #8
 8007e72:	b901      	cbnz	r1, 8007e76 <__ascii_mbtowc+0x6>
 8007e74:	a901      	add	r1, sp, #4
 8007e76:	b142      	cbz	r2, 8007e8a <__ascii_mbtowc+0x1a>
 8007e78:	b14b      	cbz	r3, 8007e8e <__ascii_mbtowc+0x1e>
 8007e7a:	7813      	ldrb	r3, [r2, #0]
 8007e7c:	600b      	str	r3, [r1, #0]
 8007e7e:	7812      	ldrb	r2, [r2, #0]
 8007e80:	1e10      	subs	r0, r2, #0
 8007e82:	bf18      	it	ne
 8007e84:	2001      	movne	r0, #1
 8007e86:	b002      	add	sp, #8
 8007e88:	4770      	bx	lr
 8007e8a:	4610      	mov	r0, r2
 8007e8c:	e7fb      	b.n	8007e86 <__ascii_mbtowc+0x16>
 8007e8e:	f06f 0001 	mvn.w	r0, #1
 8007e92:	e7f8      	b.n	8007e86 <__ascii_mbtowc+0x16>

08007e94 <_realloc_r>:
 8007e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e98:	4680      	mov	r8, r0
 8007e9a:	4614      	mov	r4, r2
 8007e9c:	460e      	mov	r6, r1
 8007e9e:	b921      	cbnz	r1, 8007eaa <_realloc_r+0x16>
 8007ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	f7ff b969 	b.w	800717c <_malloc_r>
 8007eaa:	b92a      	cbnz	r2, 8007eb8 <_realloc_r+0x24>
 8007eac:	f7ff f8f2 	bl	8007094 <_free_r>
 8007eb0:	4625      	mov	r5, r4
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eb8:	f000 f841 	bl	8007f3e <_malloc_usable_size_r>
 8007ebc:	4284      	cmp	r4, r0
 8007ebe:	4607      	mov	r7, r0
 8007ec0:	d802      	bhi.n	8007ec8 <_realloc_r+0x34>
 8007ec2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ec6:	d812      	bhi.n	8007eee <_realloc_r+0x5a>
 8007ec8:	4621      	mov	r1, r4
 8007eca:	4640      	mov	r0, r8
 8007ecc:	f7ff f956 	bl	800717c <_malloc_r>
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d0ed      	beq.n	8007eb2 <_realloc_r+0x1e>
 8007ed6:	42bc      	cmp	r4, r7
 8007ed8:	4622      	mov	r2, r4
 8007eda:	4631      	mov	r1, r6
 8007edc:	bf28      	it	cs
 8007ede:	463a      	movcs	r2, r7
 8007ee0:	f7ff ff84 	bl	8007dec <memcpy>
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	4640      	mov	r0, r8
 8007ee8:	f7ff f8d4 	bl	8007094 <_free_r>
 8007eec:	e7e1      	b.n	8007eb2 <_realloc_r+0x1e>
 8007eee:	4635      	mov	r5, r6
 8007ef0:	e7df      	b.n	8007eb2 <_realloc_r+0x1e>

08007ef2 <__ascii_wctomb>:
 8007ef2:	b149      	cbz	r1, 8007f08 <__ascii_wctomb+0x16>
 8007ef4:	2aff      	cmp	r2, #255	; 0xff
 8007ef6:	bf85      	ittet	hi
 8007ef8:	238a      	movhi	r3, #138	; 0x8a
 8007efa:	6003      	strhi	r3, [r0, #0]
 8007efc:	700a      	strbls	r2, [r1, #0]
 8007efe:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f02:	bf98      	it	ls
 8007f04:	2001      	movls	r0, #1
 8007f06:	4770      	bx	lr
 8007f08:	4608      	mov	r0, r1
 8007f0a:	4770      	bx	lr

08007f0c <fiprintf>:
 8007f0c:	b40e      	push	{r1, r2, r3}
 8007f0e:	b503      	push	{r0, r1, lr}
 8007f10:	4601      	mov	r1, r0
 8007f12:	ab03      	add	r3, sp, #12
 8007f14:	4805      	ldr	r0, [pc, #20]	; (8007f2c <fiprintf+0x20>)
 8007f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f1a:	6800      	ldr	r0, [r0, #0]
 8007f1c:	9301      	str	r3, [sp, #4]
 8007f1e:	f000 f83f 	bl	8007fa0 <_vfiprintf_r>
 8007f22:	b002      	add	sp, #8
 8007f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f28:	b003      	add	sp, #12
 8007f2a:	4770      	bx	lr
 8007f2c:	20000064 	.word	0x20000064

08007f30 <abort>:
 8007f30:	b508      	push	{r3, lr}
 8007f32:	2006      	movs	r0, #6
 8007f34:	f000 fa0c 	bl	8008350 <raise>
 8007f38:	2001      	movs	r0, #1
 8007f3a:	f7f9 fb1f 	bl	800157c <_exit>

08007f3e <_malloc_usable_size_r>:
 8007f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f42:	1f18      	subs	r0, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	bfbc      	itt	lt
 8007f48:	580b      	ldrlt	r3, [r1, r0]
 8007f4a:	18c0      	addlt	r0, r0, r3
 8007f4c:	4770      	bx	lr

08007f4e <__sfputc_r>:
 8007f4e:	6893      	ldr	r3, [r2, #8]
 8007f50:	3b01      	subs	r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	b410      	push	{r4}
 8007f56:	6093      	str	r3, [r2, #8]
 8007f58:	da08      	bge.n	8007f6c <__sfputc_r+0x1e>
 8007f5a:	6994      	ldr	r4, [r2, #24]
 8007f5c:	42a3      	cmp	r3, r4
 8007f5e:	db01      	blt.n	8007f64 <__sfputc_r+0x16>
 8007f60:	290a      	cmp	r1, #10
 8007f62:	d103      	bne.n	8007f6c <__sfputc_r+0x1e>
 8007f64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f68:	f000 b934 	b.w	80081d4 <__swbuf_r>
 8007f6c:	6813      	ldr	r3, [r2, #0]
 8007f6e:	1c58      	adds	r0, r3, #1
 8007f70:	6010      	str	r0, [r2, #0]
 8007f72:	7019      	strb	r1, [r3, #0]
 8007f74:	4608      	mov	r0, r1
 8007f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <__sfputs_r>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	4606      	mov	r6, r0
 8007f80:	460f      	mov	r7, r1
 8007f82:	4614      	mov	r4, r2
 8007f84:	18d5      	adds	r5, r2, r3
 8007f86:	42ac      	cmp	r4, r5
 8007f88:	d101      	bne.n	8007f8e <__sfputs_r+0x12>
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	e007      	b.n	8007f9e <__sfputs_r+0x22>
 8007f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f92:	463a      	mov	r2, r7
 8007f94:	4630      	mov	r0, r6
 8007f96:	f7ff ffda 	bl	8007f4e <__sfputc_r>
 8007f9a:	1c43      	adds	r3, r0, #1
 8007f9c:	d1f3      	bne.n	8007f86 <__sfputs_r+0xa>
 8007f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fa0 <_vfiprintf_r>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	460d      	mov	r5, r1
 8007fa6:	b09d      	sub	sp, #116	; 0x74
 8007fa8:	4614      	mov	r4, r2
 8007faa:	4698      	mov	r8, r3
 8007fac:	4606      	mov	r6, r0
 8007fae:	b118      	cbz	r0, 8007fb8 <_vfiprintf_r+0x18>
 8007fb0:	6a03      	ldr	r3, [r0, #32]
 8007fb2:	b90b      	cbnz	r3, 8007fb8 <_vfiprintf_r+0x18>
 8007fb4:	f7fe f8cc 	bl	8006150 <__sinit>
 8007fb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fba:	07d9      	lsls	r1, r3, #31
 8007fbc:	d405      	bmi.n	8007fca <_vfiprintf_r+0x2a>
 8007fbe:	89ab      	ldrh	r3, [r5, #12]
 8007fc0:	059a      	lsls	r2, r3, #22
 8007fc2:	d402      	bmi.n	8007fca <_vfiprintf_r+0x2a>
 8007fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fc6:	f7fe f9e8 	bl	800639a <__retarget_lock_acquire_recursive>
 8007fca:	89ab      	ldrh	r3, [r5, #12]
 8007fcc:	071b      	lsls	r3, r3, #28
 8007fce:	d501      	bpl.n	8007fd4 <_vfiprintf_r+0x34>
 8007fd0:	692b      	ldr	r3, [r5, #16]
 8007fd2:	b99b      	cbnz	r3, 8007ffc <_vfiprintf_r+0x5c>
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f000 f93a 	bl	8008250 <__swsetup_r>
 8007fdc:	b170      	cbz	r0, 8007ffc <_vfiprintf_r+0x5c>
 8007fde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fe0:	07dc      	lsls	r4, r3, #31
 8007fe2:	d504      	bpl.n	8007fee <_vfiprintf_r+0x4e>
 8007fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe8:	b01d      	add	sp, #116	; 0x74
 8007fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fee:	89ab      	ldrh	r3, [r5, #12]
 8007ff0:	0598      	lsls	r0, r3, #22
 8007ff2:	d4f7      	bmi.n	8007fe4 <_vfiprintf_r+0x44>
 8007ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ff6:	f7fe f9d1 	bl	800639c <__retarget_lock_release_recursive>
 8007ffa:	e7f3      	b.n	8007fe4 <_vfiprintf_r+0x44>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8008000:	2320      	movs	r3, #32
 8008002:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008006:	f8cd 800c 	str.w	r8, [sp, #12]
 800800a:	2330      	movs	r3, #48	; 0x30
 800800c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80081c0 <_vfiprintf_r+0x220>
 8008010:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008014:	f04f 0901 	mov.w	r9, #1
 8008018:	4623      	mov	r3, r4
 800801a:	469a      	mov	sl, r3
 800801c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008020:	b10a      	cbz	r2, 8008026 <_vfiprintf_r+0x86>
 8008022:	2a25      	cmp	r2, #37	; 0x25
 8008024:	d1f9      	bne.n	800801a <_vfiprintf_r+0x7a>
 8008026:	ebba 0b04 	subs.w	fp, sl, r4
 800802a:	d00b      	beq.n	8008044 <_vfiprintf_r+0xa4>
 800802c:	465b      	mov	r3, fp
 800802e:	4622      	mov	r2, r4
 8008030:	4629      	mov	r1, r5
 8008032:	4630      	mov	r0, r6
 8008034:	f7ff ffa2 	bl	8007f7c <__sfputs_r>
 8008038:	3001      	adds	r0, #1
 800803a:	f000 80a9 	beq.w	8008190 <_vfiprintf_r+0x1f0>
 800803e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008040:	445a      	add	r2, fp
 8008042:	9209      	str	r2, [sp, #36]	; 0x24
 8008044:	f89a 3000 	ldrb.w	r3, [sl]
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 80a1 	beq.w	8008190 <_vfiprintf_r+0x1f0>
 800804e:	2300      	movs	r3, #0
 8008050:	f04f 32ff 	mov.w	r2, #4294967295
 8008054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008058:	f10a 0a01 	add.w	sl, sl, #1
 800805c:	9304      	str	r3, [sp, #16]
 800805e:	9307      	str	r3, [sp, #28]
 8008060:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008064:	931a      	str	r3, [sp, #104]	; 0x68
 8008066:	4654      	mov	r4, sl
 8008068:	2205      	movs	r2, #5
 800806a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800806e:	4854      	ldr	r0, [pc, #336]	; (80081c0 <_vfiprintf_r+0x220>)
 8008070:	f7f8 f8be 	bl	80001f0 <memchr>
 8008074:	9a04      	ldr	r2, [sp, #16]
 8008076:	b9d8      	cbnz	r0, 80080b0 <_vfiprintf_r+0x110>
 8008078:	06d1      	lsls	r1, r2, #27
 800807a:	bf44      	itt	mi
 800807c:	2320      	movmi	r3, #32
 800807e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008082:	0713      	lsls	r3, r2, #28
 8008084:	bf44      	itt	mi
 8008086:	232b      	movmi	r3, #43	; 0x2b
 8008088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800808c:	f89a 3000 	ldrb.w	r3, [sl]
 8008090:	2b2a      	cmp	r3, #42	; 0x2a
 8008092:	d015      	beq.n	80080c0 <_vfiprintf_r+0x120>
 8008094:	9a07      	ldr	r2, [sp, #28]
 8008096:	4654      	mov	r4, sl
 8008098:	2000      	movs	r0, #0
 800809a:	f04f 0c0a 	mov.w	ip, #10
 800809e:	4621      	mov	r1, r4
 80080a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080a4:	3b30      	subs	r3, #48	; 0x30
 80080a6:	2b09      	cmp	r3, #9
 80080a8:	d94d      	bls.n	8008146 <_vfiprintf_r+0x1a6>
 80080aa:	b1b0      	cbz	r0, 80080da <_vfiprintf_r+0x13a>
 80080ac:	9207      	str	r2, [sp, #28]
 80080ae:	e014      	b.n	80080da <_vfiprintf_r+0x13a>
 80080b0:	eba0 0308 	sub.w	r3, r0, r8
 80080b4:	fa09 f303 	lsl.w	r3, r9, r3
 80080b8:	4313      	orrs	r3, r2
 80080ba:	9304      	str	r3, [sp, #16]
 80080bc:	46a2      	mov	sl, r4
 80080be:	e7d2      	b.n	8008066 <_vfiprintf_r+0xc6>
 80080c0:	9b03      	ldr	r3, [sp, #12]
 80080c2:	1d19      	adds	r1, r3, #4
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	9103      	str	r1, [sp, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	bfbb      	ittet	lt
 80080cc:	425b      	neglt	r3, r3
 80080ce:	f042 0202 	orrlt.w	r2, r2, #2
 80080d2:	9307      	strge	r3, [sp, #28]
 80080d4:	9307      	strlt	r3, [sp, #28]
 80080d6:	bfb8      	it	lt
 80080d8:	9204      	strlt	r2, [sp, #16]
 80080da:	7823      	ldrb	r3, [r4, #0]
 80080dc:	2b2e      	cmp	r3, #46	; 0x2e
 80080de:	d10c      	bne.n	80080fa <_vfiprintf_r+0x15a>
 80080e0:	7863      	ldrb	r3, [r4, #1]
 80080e2:	2b2a      	cmp	r3, #42	; 0x2a
 80080e4:	d134      	bne.n	8008150 <_vfiprintf_r+0x1b0>
 80080e6:	9b03      	ldr	r3, [sp, #12]
 80080e8:	1d1a      	adds	r2, r3, #4
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	9203      	str	r2, [sp, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	bfb8      	it	lt
 80080f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80080f6:	3402      	adds	r4, #2
 80080f8:	9305      	str	r3, [sp, #20]
 80080fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80081d0 <_vfiprintf_r+0x230>
 80080fe:	7821      	ldrb	r1, [r4, #0]
 8008100:	2203      	movs	r2, #3
 8008102:	4650      	mov	r0, sl
 8008104:	f7f8 f874 	bl	80001f0 <memchr>
 8008108:	b138      	cbz	r0, 800811a <_vfiprintf_r+0x17a>
 800810a:	9b04      	ldr	r3, [sp, #16]
 800810c:	eba0 000a 	sub.w	r0, r0, sl
 8008110:	2240      	movs	r2, #64	; 0x40
 8008112:	4082      	lsls	r2, r0
 8008114:	4313      	orrs	r3, r2
 8008116:	3401      	adds	r4, #1
 8008118:	9304      	str	r3, [sp, #16]
 800811a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800811e:	4829      	ldr	r0, [pc, #164]	; (80081c4 <_vfiprintf_r+0x224>)
 8008120:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008124:	2206      	movs	r2, #6
 8008126:	f7f8 f863 	bl	80001f0 <memchr>
 800812a:	2800      	cmp	r0, #0
 800812c:	d03f      	beq.n	80081ae <_vfiprintf_r+0x20e>
 800812e:	4b26      	ldr	r3, [pc, #152]	; (80081c8 <_vfiprintf_r+0x228>)
 8008130:	bb1b      	cbnz	r3, 800817a <_vfiprintf_r+0x1da>
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	3307      	adds	r3, #7
 8008136:	f023 0307 	bic.w	r3, r3, #7
 800813a:	3308      	adds	r3, #8
 800813c:	9303      	str	r3, [sp, #12]
 800813e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008140:	443b      	add	r3, r7
 8008142:	9309      	str	r3, [sp, #36]	; 0x24
 8008144:	e768      	b.n	8008018 <_vfiprintf_r+0x78>
 8008146:	fb0c 3202 	mla	r2, ip, r2, r3
 800814a:	460c      	mov	r4, r1
 800814c:	2001      	movs	r0, #1
 800814e:	e7a6      	b.n	800809e <_vfiprintf_r+0xfe>
 8008150:	2300      	movs	r3, #0
 8008152:	3401      	adds	r4, #1
 8008154:	9305      	str	r3, [sp, #20]
 8008156:	4619      	mov	r1, r3
 8008158:	f04f 0c0a 	mov.w	ip, #10
 800815c:	4620      	mov	r0, r4
 800815e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008162:	3a30      	subs	r2, #48	; 0x30
 8008164:	2a09      	cmp	r2, #9
 8008166:	d903      	bls.n	8008170 <_vfiprintf_r+0x1d0>
 8008168:	2b00      	cmp	r3, #0
 800816a:	d0c6      	beq.n	80080fa <_vfiprintf_r+0x15a>
 800816c:	9105      	str	r1, [sp, #20]
 800816e:	e7c4      	b.n	80080fa <_vfiprintf_r+0x15a>
 8008170:	fb0c 2101 	mla	r1, ip, r1, r2
 8008174:	4604      	mov	r4, r0
 8008176:	2301      	movs	r3, #1
 8008178:	e7f0      	b.n	800815c <_vfiprintf_r+0x1bc>
 800817a:	ab03      	add	r3, sp, #12
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	462a      	mov	r2, r5
 8008180:	4b12      	ldr	r3, [pc, #72]	; (80081cc <_vfiprintf_r+0x22c>)
 8008182:	a904      	add	r1, sp, #16
 8008184:	4630      	mov	r0, r6
 8008186:	f7fd fb91 	bl	80058ac <_printf_float>
 800818a:	4607      	mov	r7, r0
 800818c:	1c78      	adds	r0, r7, #1
 800818e:	d1d6      	bne.n	800813e <_vfiprintf_r+0x19e>
 8008190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008192:	07d9      	lsls	r1, r3, #31
 8008194:	d405      	bmi.n	80081a2 <_vfiprintf_r+0x202>
 8008196:	89ab      	ldrh	r3, [r5, #12]
 8008198:	059a      	lsls	r2, r3, #22
 800819a:	d402      	bmi.n	80081a2 <_vfiprintf_r+0x202>
 800819c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800819e:	f7fe f8fd 	bl	800639c <__retarget_lock_release_recursive>
 80081a2:	89ab      	ldrh	r3, [r5, #12]
 80081a4:	065b      	lsls	r3, r3, #25
 80081a6:	f53f af1d 	bmi.w	8007fe4 <_vfiprintf_r+0x44>
 80081aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081ac:	e71c      	b.n	8007fe8 <_vfiprintf_r+0x48>
 80081ae:	ab03      	add	r3, sp, #12
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	462a      	mov	r2, r5
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <_vfiprintf_r+0x22c>)
 80081b6:	a904      	add	r1, sp, #16
 80081b8:	4630      	mov	r0, r6
 80081ba:	f7fd fe1b 	bl	8005df4 <_printf_i>
 80081be:	e7e4      	b.n	800818a <_vfiprintf_r+0x1ea>
 80081c0:	0800876c 	.word	0x0800876c
 80081c4:	08008776 	.word	0x08008776
 80081c8:	080058ad 	.word	0x080058ad
 80081cc:	08007f7d 	.word	0x08007f7d
 80081d0:	08008772 	.word	0x08008772

080081d4 <__swbuf_r>:
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	460e      	mov	r6, r1
 80081d8:	4614      	mov	r4, r2
 80081da:	4605      	mov	r5, r0
 80081dc:	b118      	cbz	r0, 80081e6 <__swbuf_r+0x12>
 80081de:	6a03      	ldr	r3, [r0, #32]
 80081e0:	b90b      	cbnz	r3, 80081e6 <__swbuf_r+0x12>
 80081e2:	f7fd ffb5 	bl	8006150 <__sinit>
 80081e6:	69a3      	ldr	r3, [r4, #24]
 80081e8:	60a3      	str	r3, [r4, #8]
 80081ea:	89a3      	ldrh	r3, [r4, #12]
 80081ec:	071a      	lsls	r2, r3, #28
 80081ee:	d525      	bpl.n	800823c <__swbuf_r+0x68>
 80081f0:	6923      	ldr	r3, [r4, #16]
 80081f2:	b31b      	cbz	r3, 800823c <__swbuf_r+0x68>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	6922      	ldr	r2, [r4, #16]
 80081f8:	1a98      	subs	r0, r3, r2
 80081fa:	6963      	ldr	r3, [r4, #20]
 80081fc:	b2f6      	uxtb	r6, r6
 80081fe:	4283      	cmp	r3, r0
 8008200:	4637      	mov	r7, r6
 8008202:	dc04      	bgt.n	800820e <__swbuf_r+0x3a>
 8008204:	4621      	mov	r1, r4
 8008206:	4628      	mov	r0, r5
 8008208:	f7ff fd9e 	bl	8007d48 <_fflush_r>
 800820c:	b9e0      	cbnz	r0, 8008248 <__swbuf_r+0x74>
 800820e:	68a3      	ldr	r3, [r4, #8]
 8008210:	3b01      	subs	r3, #1
 8008212:	60a3      	str	r3, [r4, #8]
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	6022      	str	r2, [r4, #0]
 800821a:	701e      	strb	r6, [r3, #0]
 800821c:	6962      	ldr	r2, [r4, #20]
 800821e:	1c43      	adds	r3, r0, #1
 8008220:	429a      	cmp	r2, r3
 8008222:	d004      	beq.n	800822e <__swbuf_r+0x5a>
 8008224:	89a3      	ldrh	r3, [r4, #12]
 8008226:	07db      	lsls	r3, r3, #31
 8008228:	d506      	bpl.n	8008238 <__swbuf_r+0x64>
 800822a:	2e0a      	cmp	r6, #10
 800822c:	d104      	bne.n	8008238 <__swbuf_r+0x64>
 800822e:	4621      	mov	r1, r4
 8008230:	4628      	mov	r0, r5
 8008232:	f7ff fd89 	bl	8007d48 <_fflush_r>
 8008236:	b938      	cbnz	r0, 8008248 <__swbuf_r+0x74>
 8008238:	4638      	mov	r0, r7
 800823a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800823c:	4621      	mov	r1, r4
 800823e:	4628      	mov	r0, r5
 8008240:	f000 f806 	bl	8008250 <__swsetup_r>
 8008244:	2800      	cmp	r0, #0
 8008246:	d0d5      	beq.n	80081f4 <__swbuf_r+0x20>
 8008248:	f04f 37ff 	mov.w	r7, #4294967295
 800824c:	e7f4      	b.n	8008238 <__swbuf_r+0x64>
	...

08008250 <__swsetup_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4b2a      	ldr	r3, [pc, #168]	; (80082fc <__swsetup_r+0xac>)
 8008254:	4605      	mov	r5, r0
 8008256:	6818      	ldr	r0, [r3, #0]
 8008258:	460c      	mov	r4, r1
 800825a:	b118      	cbz	r0, 8008264 <__swsetup_r+0x14>
 800825c:	6a03      	ldr	r3, [r0, #32]
 800825e:	b90b      	cbnz	r3, 8008264 <__swsetup_r+0x14>
 8008260:	f7fd ff76 	bl	8006150 <__sinit>
 8008264:	89a3      	ldrh	r3, [r4, #12]
 8008266:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800826a:	0718      	lsls	r0, r3, #28
 800826c:	d422      	bmi.n	80082b4 <__swsetup_r+0x64>
 800826e:	06d9      	lsls	r1, r3, #27
 8008270:	d407      	bmi.n	8008282 <__swsetup_r+0x32>
 8008272:	2309      	movs	r3, #9
 8008274:	602b      	str	r3, [r5, #0]
 8008276:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800827a:	81a3      	strh	r3, [r4, #12]
 800827c:	f04f 30ff 	mov.w	r0, #4294967295
 8008280:	e034      	b.n	80082ec <__swsetup_r+0x9c>
 8008282:	0758      	lsls	r0, r3, #29
 8008284:	d512      	bpl.n	80082ac <__swsetup_r+0x5c>
 8008286:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008288:	b141      	cbz	r1, 800829c <__swsetup_r+0x4c>
 800828a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800828e:	4299      	cmp	r1, r3
 8008290:	d002      	beq.n	8008298 <__swsetup_r+0x48>
 8008292:	4628      	mov	r0, r5
 8008294:	f7fe fefe 	bl	8007094 <_free_r>
 8008298:	2300      	movs	r3, #0
 800829a:	6363      	str	r3, [r4, #52]	; 0x34
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082a2:	81a3      	strh	r3, [r4, #12]
 80082a4:	2300      	movs	r3, #0
 80082a6:	6063      	str	r3, [r4, #4]
 80082a8:	6923      	ldr	r3, [r4, #16]
 80082aa:	6023      	str	r3, [r4, #0]
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	f043 0308 	orr.w	r3, r3, #8
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	6923      	ldr	r3, [r4, #16]
 80082b6:	b94b      	cbnz	r3, 80082cc <__swsetup_r+0x7c>
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082c2:	d003      	beq.n	80082cc <__swsetup_r+0x7c>
 80082c4:	4621      	mov	r1, r4
 80082c6:	4628      	mov	r0, r5
 80082c8:	f000 f884 	bl	80083d4 <__smakebuf_r>
 80082cc:	89a0      	ldrh	r0, [r4, #12]
 80082ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082d2:	f010 0301 	ands.w	r3, r0, #1
 80082d6:	d00a      	beq.n	80082ee <__swsetup_r+0x9e>
 80082d8:	2300      	movs	r3, #0
 80082da:	60a3      	str	r3, [r4, #8]
 80082dc:	6963      	ldr	r3, [r4, #20]
 80082de:	425b      	negs	r3, r3
 80082e0:	61a3      	str	r3, [r4, #24]
 80082e2:	6923      	ldr	r3, [r4, #16]
 80082e4:	b943      	cbnz	r3, 80082f8 <__swsetup_r+0xa8>
 80082e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082ea:	d1c4      	bne.n	8008276 <__swsetup_r+0x26>
 80082ec:	bd38      	pop	{r3, r4, r5, pc}
 80082ee:	0781      	lsls	r1, r0, #30
 80082f0:	bf58      	it	pl
 80082f2:	6963      	ldrpl	r3, [r4, #20]
 80082f4:	60a3      	str	r3, [r4, #8]
 80082f6:	e7f4      	b.n	80082e2 <__swsetup_r+0x92>
 80082f8:	2000      	movs	r0, #0
 80082fa:	e7f7      	b.n	80082ec <__swsetup_r+0x9c>
 80082fc:	20000064 	.word	0x20000064

08008300 <_raise_r>:
 8008300:	291f      	cmp	r1, #31
 8008302:	b538      	push	{r3, r4, r5, lr}
 8008304:	4604      	mov	r4, r0
 8008306:	460d      	mov	r5, r1
 8008308:	d904      	bls.n	8008314 <_raise_r+0x14>
 800830a:	2316      	movs	r3, #22
 800830c:	6003      	str	r3, [r0, #0]
 800830e:	f04f 30ff 	mov.w	r0, #4294967295
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008316:	b112      	cbz	r2, 800831e <_raise_r+0x1e>
 8008318:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800831c:	b94b      	cbnz	r3, 8008332 <_raise_r+0x32>
 800831e:	4620      	mov	r0, r4
 8008320:	f000 f830 	bl	8008384 <_getpid_r>
 8008324:	462a      	mov	r2, r5
 8008326:	4601      	mov	r1, r0
 8008328:	4620      	mov	r0, r4
 800832a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800832e:	f000 b817 	b.w	8008360 <_kill_r>
 8008332:	2b01      	cmp	r3, #1
 8008334:	d00a      	beq.n	800834c <_raise_r+0x4c>
 8008336:	1c59      	adds	r1, r3, #1
 8008338:	d103      	bne.n	8008342 <_raise_r+0x42>
 800833a:	2316      	movs	r3, #22
 800833c:	6003      	str	r3, [r0, #0]
 800833e:	2001      	movs	r0, #1
 8008340:	e7e7      	b.n	8008312 <_raise_r+0x12>
 8008342:	2400      	movs	r4, #0
 8008344:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008348:	4628      	mov	r0, r5
 800834a:	4798      	blx	r3
 800834c:	2000      	movs	r0, #0
 800834e:	e7e0      	b.n	8008312 <_raise_r+0x12>

08008350 <raise>:
 8008350:	4b02      	ldr	r3, [pc, #8]	; (800835c <raise+0xc>)
 8008352:	4601      	mov	r1, r0
 8008354:	6818      	ldr	r0, [r3, #0]
 8008356:	f7ff bfd3 	b.w	8008300 <_raise_r>
 800835a:	bf00      	nop
 800835c:	20000064 	.word	0x20000064

08008360 <_kill_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d07      	ldr	r5, [pc, #28]	; (8008380 <_kill_r+0x20>)
 8008364:	2300      	movs	r3, #0
 8008366:	4604      	mov	r4, r0
 8008368:	4608      	mov	r0, r1
 800836a:	4611      	mov	r1, r2
 800836c:	602b      	str	r3, [r5, #0]
 800836e:	f7f9 f8f5 	bl	800155c <_kill>
 8008372:	1c43      	adds	r3, r0, #1
 8008374:	d102      	bne.n	800837c <_kill_r+0x1c>
 8008376:	682b      	ldr	r3, [r5, #0]
 8008378:	b103      	cbz	r3, 800837c <_kill_r+0x1c>
 800837a:	6023      	str	r3, [r4, #0]
 800837c:	bd38      	pop	{r3, r4, r5, pc}
 800837e:	bf00      	nop
 8008380:	20000428 	.word	0x20000428

08008384 <_getpid_r>:
 8008384:	f7f9 b8e2 	b.w	800154c <_getpid>

08008388 <__swhatbuf_r>:
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	460c      	mov	r4, r1
 800838c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008390:	2900      	cmp	r1, #0
 8008392:	b096      	sub	sp, #88	; 0x58
 8008394:	4615      	mov	r5, r2
 8008396:	461e      	mov	r6, r3
 8008398:	da0d      	bge.n	80083b6 <__swhatbuf_r+0x2e>
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80083a0:	f04f 0100 	mov.w	r1, #0
 80083a4:	bf0c      	ite	eq
 80083a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80083aa:	2340      	movne	r3, #64	; 0x40
 80083ac:	2000      	movs	r0, #0
 80083ae:	6031      	str	r1, [r6, #0]
 80083b0:	602b      	str	r3, [r5, #0]
 80083b2:	b016      	add	sp, #88	; 0x58
 80083b4:	bd70      	pop	{r4, r5, r6, pc}
 80083b6:	466a      	mov	r2, sp
 80083b8:	f000 f848 	bl	800844c <_fstat_r>
 80083bc:	2800      	cmp	r0, #0
 80083be:	dbec      	blt.n	800839a <__swhatbuf_r+0x12>
 80083c0:	9901      	ldr	r1, [sp, #4]
 80083c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80083c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80083ca:	4259      	negs	r1, r3
 80083cc:	4159      	adcs	r1, r3
 80083ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083d2:	e7eb      	b.n	80083ac <__swhatbuf_r+0x24>

080083d4 <__smakebuf_r>:
 80083d4:	898b      	ldrh	r3, [r1, #12]
 80083d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083d8:	079d      	lsls	r5, r3, #30
 80083da:	4606      	mov	r6, r0
 80083dc:	460c      	mov	r4, r1
 80083de:	d507      	bpl.n	80083f0 <__smakebuf_r+0x1c>
 80083e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	6123      	str	r3, [r4, #16]
 80083e8:	2301      	movs	r3, #1
 80083ea:	6163      	str	r3, [r4, #20]
 80083ec:	b002      	add	sp, #8
 80083ee:	bd70      	pop	{r4, r5, r6, pc}
 80083f0:	ab01      	add	r3, sp, #4
 80083f2:	466a      	mov	r2, sp
 80083f4:	f7ff ffc8 	bl	8008388 <__swhatbuf_r>
 80083f8:	9900      	ldr	r1, [sp, #0]
 80083fa:	4605      	mov	r5, r0
 80083fc:	4630      	mov	r0, r6
 80083fe:	f7fe febd 	bl	800717c <_malloc_r>
 8008402:	b948      	cbnz	r0, 8008418 <__smakebuf_r+0x44>
 8008404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008408:	059a      	lsls	r2, r3, #22
 800840a:	d4ef      	bmi.n	80083ec <__smakebuf_r+0x18>
 800840c:	f023 0303 	bic.w	r3, r3, #3
 8008410:	f043 0302 	orr.w	r3, r3, #2
 8008414:	81a3      	strh	r3, [r4, #12]
 8008416:	e7e3      	b.n	80083e0 <__smakebuf_r+0xc>
 8008418:	89a3      	ldrh	r3, [r4, #12]
 800841a:	6020      	str	r0, [r4, #0]
 800841c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008420:	81a3      	strh	r3, [r4, #12]
 8008422:	9b00      	ldr	r3, [sp, #0]
 8008424:	6163      	str	r3, [r4, #20]
 8008426:	9b01      	ldr	r3, [sp, #4]
 8008428:	6120      	str	r0, [r4, #16]
 800842a:	b15b      	cbz	r3, 8008444 <__smakebuf_r+0x70>
 800842c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008430:	4630      	mov	r0, r6
 8008432:	f000 f81d 	bl	8008470 <_isatty_r>
 8008436:	b128      	cbz	r0, 8008444 <__smakebuf_r+0x70>
 8008438:	89a3      	ldrh	r3, [r4, #12]
 800843a:	f023 0303 	bic.w	r3, r3, #3
 800843e:	f043 0301 	orr.w	r3, r3, #1
 8008442:	81a3      	strh	r3, [r4, #12]
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	431d      	orrs	r5, r3
 8008448:	81a5      	strh	r5, [r4, #12]
 800844a:	e7cf      	b.n	80083ec <__smakebuf_r+0x18>

0800844c <_fstat_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4d07      	ldr	r5, [pc, #28]	; (800846c <_fstat_r+0x20>)
 8008450:	2300      	movs	r3, #0
 8008452:	4604      	mov	r4, r0
 8008454:	4608      	mov	r0, r1
 8008456:	4611      	mov	r1, r2
 8008458:	602b      	str	r3, [r5, #0]
 800845a:	f7f9 f8de 	bl	800161a <_fstat>
 800845e:	1c43      	adds	r3, r0, #1
 8008460:	d102      	bne.n	8008468 <_fstat_r+0x1c>
 8008462:	682b      	ldr	r3, [r5, #0]
 8008464:	b103      	cbz	r3, 8008468 <_fstat_r+0x1c>
 8008466:	6023      	str	r3, [r4, #0]
 8008468:	bd38      	pop	{r3, r4, r5, pc}
 800846a:	bf00      	nop
 800846c:	20000428 	.word	0x20000428

08008470 <_isatty_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4d06      	ldr	r5, [pc, #24]	; (800848c <_isatty_r+0x1c>)
 8008474:	2300      	movs	r3, #0
 8008476:	4604      	mov	r4, r0
 8008478:	4608      	mov	r0, r1
 800847a:	602b      	str	r3, [r5, #0]
 800847c:	f7f9 f8dd 	bl	800163a <_isatty>
 8008480:	1c43      	adds	r3, r0, #1
 8008482:	d102      	bne.n	800848a <_isatty_r+0x1a>
 8008484:	682b      	ldr	r3, [r5, #0]
 8008486:	b103      	cbz	r3, 800848a <_isatty_r+0x1a>
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	bd38      	pop	{r3, r4, r5, pc}
 800848c:	20000428 	.word	0x20000428

08008490 <_init>:
 8008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008492:	bf00      	nop
 8008494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008496:	bc08      	pop	{r3}
 8008498:	469e      	mov	lr, r3
 800849a:	4770      	bx	lr

0800849c <_fini>:
 800849c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849e:	bf00      	nop
 80084a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a2:	bc08      	pop	{r3}
 80084a4:	469e      	mov	lr, r3
 80084a6:	4770      	bx	lr
