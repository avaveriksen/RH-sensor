
N32-HYT271.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fe0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08009170  08009170  00019170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095bc  080095bc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  080095bc  080095bc  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095bc  080095bc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095bc  080095bc  000195bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095c0  080095c0  000195c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080095c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          0000030c  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004e0  200004e0  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   000145df  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002cb2  00000000  00000000  00034826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001138  00000000  00000000  000374d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d7a  00000000  00000000  00038610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000040e3  00000000  00000000  0003938a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001831b  00000000  00000000  0003d46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a7b85  00000000  00000000  00055788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005a48  00000000  00000000  000fd310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00102d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009158 	.word	0x08009158

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009158 	.word	0x08009158

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <read_SHT45>:
#include "SHT45_driver.h"
#include "i2c_driver.h"
#include "main.h"

uint8_t read_SHT45(SHT45 * sensor, I2Cdriver * comm){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08c      	sub	sp, #48	; 0x30
 8000bcc:	af02      	add	r7, sp, #8
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
	// Read the data from SHT45
	// return 2: 	I2C error.
	// return 1:	Stale data.
	// return 0:	OK, fresh data.

	uint8_t addr = sensor->address;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	791b      	ldrb	r3, [r3, #4]
 8000bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	I2C_HandleTypeDef * comm_handle = comm->handle;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	61fb      	str	r3, [r7, #28]
	volatile uint8_t * comm_buff = comm->i2c_buff;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	3305      	adds	r3, #5
 8000be4:	61bb      	str	r3, [r7, #24]

	// Measurement request
	if (HAL_I2C_Master_Transmit(comm_handle, addr << 1, 0xFD, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000be6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	b299      	uxth	r1, r3
 8000bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	22fd      	movs	r2, #253	; 0xfd
 8000bfa:	69f8      	ldr	r0, [r7, #28]
 8000bfc:	f001 fbaa 	bl	8002354 <HAL_I2C_Master_Transmit>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <read_SHT45+0x42>
		return 2; // I2C error
 8000c06:	2302      	movs	r3, #2
 8000c08:	e08e      	b.n	8000d28 <read_SHT45+0x160>
	}

	HAL_Delay(10);
 8000c0a:	200a      	movs	r0, #10
 8000c0c:	f000 ff7e 	bl	8001b0c <HAL_Delay>

	// Read measurement
	if (HAL_I2C_Master_Receive(comm_handle, addr << 1, comm_buff, 6, HAL_MAX_DELAY) != HAL_OK) {
 8000c10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	b299      	uxth	r1, r3
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2306      	movs	r3, #6
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	69f8      	ldr	r0, [r7, #28]
 8000c26:	f001 fcad 	bl	8002584 <HAL_I2C_Master_Receive>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <read_SHT45+0x6c>
		return 2; // I2C error
 8000c30:	2302      	movs	r3, #2
 8000c32:	e079      	b.n	8000d28 <read_SHT45+0x160>
	}

	// Convert to real values
	uint16_t t_ticks = comm_buff[0] << 8 + comm_buff[1];
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	3308      	adds	r3, #8
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	82fb      	strh	r3, [r7, #22]
	uint8_t checksum_t = comm_buff[2];
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	3302      	adds	r3, #2
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	757b      	strb	r3, [r7, #21]
	  if (!CRC_check(t_ticks, checksum_t)) {
 8000c54:	7d7a      	ldrb	r2, [r7, #21]
 8000c56:	8afb      	ldrh	r3, [r7, #22]
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f8ae 	bl	8000dbc <CRC_check>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <read_SHT45+0xa2>
		return 3; // CRC error
 8000c66:	2303      	movs	r3, #3
 8000c68:	e05e      	b.n	8000d28 <read_SHT45+0x160>
	  }

		uint16_t rh_ticks = comm_buff[3] << 8 + comm_buff[4];
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	3303      	adds	r3, #3
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	461a      	mov	r2, r3
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	3304      	adds	r3, #4
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	3308      	adds	r3, #8
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	827b      	strh	r3, [r7, #18]
		uint8_t checksum_rh = comm_buff[5];
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	3305      	adds	r3, #5
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	747b      	strb	r3, [r7, #17]
	  if (!CRC_check(rh_ticks, checksum_rh)){
 8000c8c:	7c7a      	ldrb	r2, [r7, #17]
 8000c8e:	8a7b      	ldrh	r3, [r7, #18]
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f892 	bl	8000dbc <CRC_check>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <read_SHT45+0xda>
		return 3; // CRC error
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e042      	b.n	8000d28 <read_SHT45+0x160>
	  }

	float t_degC = -45 + 175 * t_ticks/65535;
 8000ca2:	8afb      	ldrh	r3, [r7, #22]
 8000ca4:	22af      	movs	r2, #175	; 0xaf
 8000ca6:	fb02 f303 	mul.w	r3, r2, r3
 8000caa:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <read_SHT45+0x168>)
 8000cac:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb0:	441a      	add	r2, r3
 8000cb2:	13d2      	asrs	r2, r2, #15
 8000cb4:	17db      	asrs	r3, r3, #31
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	3b2d      	subs	r3, #45	; 0x2d
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc2:	edc7 7a03 	vstr	s15, [r7, #12]
	float rh_pRH = 125 * rh_ticks / 65535 - 6;
 8000cc6:	8a7a      	ldrh	r2, [r7, #18]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	015b      	lsls	r3, r3, #5
 8000ccc:	1a9b      	subs	r3, r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <read_SHT45+0x168>)
 8000cd4:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd8:	441a      	add	r2, r3
 8000cda:	13d2      	asrs	r2, r2, #15
 8000cdc:	17db      	asrs	r3, r3, #31
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	3b06      	subs	r3, #6
 8000ce2:	ee07 3a90 	vmov	s15, r3
 8000ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if (rh_pRH > 100) {
 8000cee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000cf2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000d34 <read_SHT45+0x16c>
 8000cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfe:	dd02      	ble.n	8000d06 <read_SHT45+0x13e>
		rh_pRH = 100;
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <read_SHT45+0x170>)
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
 8000d04:	e009      	b.n	8000d1a <read_SHT45+0x152>
	} else if (rh_pRH < 0) {
 8000d06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d12:	d502      	bpl.n	8000d1a <read_SHT45+0x152>
		rh_pRH = 0;
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// store data
	sensor->RH = rh_pRH;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d1e:	60da      	str	r2, [r3, #12]
	sensor->temperature = t_degC;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	609a      	str	r2, [r3, #8]

	return 0;
 8000d26:	2300      	movs	r3, #0

}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	80008001 	.word	0x80008001
 8000d34:	42c80000 	.word	0x42c80000
 8000d38:	42c80000 	.word	0x42c80000

08000d3c <sensor_power>:
	}

	return 0;
}

void sensor_power(uint8_t state){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  // Enable or diable power to sensor(s). All sensors are powered by the same source.
  if(state){
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d007      	beq.n	8000d5c <sensor_power+0x20>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d56:	f001 fa2f 	bl	80021b8 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
  }
}
 8000d5a:	e006      	b.n	8000d6a <sensor_power+0x2e>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d66:	f001 fa27 	bl	80021b8 <HAL_GPIO_WritePin>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <heat_and_read_SHT45>:
  }
  

}

uint8_t heat_and_read_SHT45(SHT45 * sensor, I2Cdriver * comm) {
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af02      	add	r7, sp, #8
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]

	I2C_HandleTypeDef * comm_handle = comm->handle;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
    uint8_t addr = sensor->address;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	791b      	ldrb	r3, [r3, #4]
 8000d86:	72fb      	strb	r3, [r7, #11]

  // 0x24 is 110mW for 0.1 second
  if(HAL_I2C_Master_Transmit(comm_handle, addr << 1, 0x24, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000d88:	7afb      	ldrb	r3, [r7, #11]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	b299      	uxth	r1, r3
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	2224      	movs	r2, #36	; 0x24
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f001 fada 	bl	8002354 <HAL_I2C_Master_Transmit>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <heat_and_read_SHT45+0x38>
    return 2; // I2C error
 8000da6:	2302      	movs	r3, #2
 8000da8:	e003      	b.n	8000db2 <heat_and_read_SHT45+0x40>
  }

  read_SHT45(sensor, comm);
 8000daa:	6839      	ldr	r1, [r7, #0]
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ff0b 	bl	8000bc8 <read_SHT45>

}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <CRC_check>:

uint8_t CRC_check(uint16_t message, uint8_t checksum){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	80fb      	strh	r3, [r7, #6]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	717b      	strb	r3, [r7, #5]
  // Calculates the Cyclic Redundancy Checksum with polynomial 0x31
  uint8_t remainder = message % 0x31;
 8000dcc:	88f9      	ldrh	r1, [r7, #6]
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <CRC_check+0x44>)
 8000dd0:	fba3 2301 	umull	r2, r3, r3, r1
 8000dd4:	091a      	lsrs	r2, r3, #4
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	1a9b      	subs	r3, r3, r2
 8000ddc:	00da      	lsls	r2, r3, #3
 8000dde:	1ad2      	subs	r2, r2, r3
 8000de0:	1a8b      	subs	r3, r1, r2
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	73fb      	strb	r3, [r7, #15]

  if (remainder == checksum) {
 8000de6:	7bfa      	ldrb	r2, [r7, #15]
 8000de8:	797b      	ldrb	r3, [r7, #5]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d101      	bne.n	8000df2 <CRC_check+0x36>
    return 1; // success
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <CRC_check+0x38>
  } else {
    return 0; // Does NOT check out
 8000df2:	2300      	movs	r3, #0
  }
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	5397829d 	.word	0x5397829d

08000e04 <scan_i2c>:
 *      Author: Anders Eriksen
 */

#include "i2c_driver.h"

uint8_t scan_i2c(I2C_HandleTypeDef *hi2c, volatile uint8_t * devices) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
	// Scan whole range of i2c addresses to identify devices
	uint8_t identified = 0; // number of identified devices
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 128; i++) {
 8000e12:	2300      	movs	r3, #0
 8000e14:	73bb      	strb	r3, [r7, #14]
 8000e16:	e016      	b.n	8000e46 <scan_i2c+0x42>
		if (HAL_I2C_IsDeviceReady(hi2c, (uint16_t)(i<<1), 3, 5) == HAL_OK) {
 8000e18:	7bbb      	ldrb	r3, [r7, #14]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	b299      	uxth	r1, r3
 8000e20:	2305      	movs	r3, #5
 8000e22:	2203      	movs	r2, #3
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f001 fca3 	bl	8002770 <HAL_I2C_IsDeviceReady>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d107      	bne.n	8000e40 <scan_i2c+0x3c>
			*(devices + identified) = i;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	4413      	add	r3, r2
 8000e36:	7bba      	ldrb	r2, [r7, #14]
 8000e38:	701a      	strb	r2, [r3, #0]
			identified++;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 128; i++) {
 8000e40:	7bbb      	ldrb	r3, [r7, #14]
 8000e42:	3301      	adds	r3, #1
 8000e44:	73bb      	strb	r3, [r7, #14]
 8000e46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	dae4      	bge.n	8000e18 <scan_i2c+0x14>
		}
	}

	return identified;
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); // Visual cue that timer is functional
 8000e60:	2108      	movs	r1, #8
 8000e62:	482b      	ldr	r0, [pc, #172]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000e64:	f001 f9c0 	bl	80021e8 <HAL_GPIO_TogglePin>

  // Measurements and streaming
  for (uint8_t i = 0; i < i2c_bus.n_devices; i++) {
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	e044      	b.n	8000ef8 <HAL_TIM_PeriodElapsedCallback+0xa0>
    uint8_t addr = i2c_bus.devices[i];
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	4a28      	ldr	r2, [pc, #160]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e72:	4413      	add	r3, r2
 8000e74:	7b1b      	ldrb	r3, [r3, #12]
 8000e76:	737b      	strb	r3, [r7, #13]
    HAL_Delay(100);
    HYT_Read_status = read_HYT271(&hi2c1, addr, i2c_buff);
    convert_data(i2c_buff, data[i]);
    */

    if (i < 2) {
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d81e      	bhi.n	8000ebc <HAL_TIM_PeriodElapsedCallback+0x64>
    	if(sensors[i].RH > 95) {
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	4a25      	ldr	r2, [pc, #148]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	4413      	add	r3, r2
 8000e86:	330c      	adds	r3, #12
 8000e88:	edd3 7a00 	vldr	s15, [r3]
 8000e8c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000f1c <HAL_TIM_PeriodElapsedCallback+0xc4>
 8000e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e98:	dd08      	ble.n	8000eac <HAL_TIM_PeriodElapsedCallback+0x54>
    		heat_and_read_SHT45(&sensors[i], &i2c_bus);
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	011b      	lsls	r3, r3, #4
 8000e9e:	4a1e      	ldr	r2, [pc, #120]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ea0:	4413      	add	r3, r2
 8000ea2:	491c      	ldr	r1, [pc, #112]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff64 	bl	8000d72 <heat_and_read_SHT45>
 8000eaa:	e007      	b.n	8000ebc <HAL_TIM_PeriodElapsedCallback+0x64>
    	} else {
    		read_SHT45(&sensors[i], &i2c_bus);
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	011b      	lsls	r3, r3, #4
 8000eb0:	4a19      	ldr	r2, [pc, #100]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4917      	ldr	r1, [pc, #92]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fe86 	bl	8000bc8 <read_SHT45>
    	}
    }

    if (stream) {
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d016      	beq.n	8000ef2 <HAL_TIM_PeriodElapsedCallback+0x9a>
    	for (uint8_t i = 0; i < i2c_bus.n_devices;i++) {
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73bb      	strb	r3, [r7, #14]
 8000ec8:	e00a      	b.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0x88>
    		transmit_SHT45(&huart2, &sensors[i]);
 8000eca:	7bbb      	ldrb	r3, [r7, #14]
 8000ecc:	011b      	lsls	r3, r3, #4
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4813      	ldr	r0, [pc, #76]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000ed6:	f000 fa8f 	bl	80013f8 <transmit_SHT45>
    	for (uint8_t i = 0; i < i2c_bus.n_devices;i++) {
 8000eda:	7bbb      	ldrb	r3, [r7, #14]
 8000edc:	3301      	adds	r3, #1
 8000ede:	73bb      	strb	r3, [r7, #14]
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000ee2:	7adb      	ldrb	r3, [r3, #11]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	7bba      	ldrb	r2, [r7, #14]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d3ee      	bcc.n	8000eca <HAL_TIM_PeriodElapsedCallback+0x72>
    	}

      data_transfer_concluded_message(&huart2);
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000eee:	f000 faf9 	bl	80014e4 <data_transfer_concluded_message>
  for (uint8_t i = 0; i < i2c_bus.n_devices; i++) {
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000efa:	7adb      	ldrb	r3, [r3, #11]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d3b4      	bcc.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x16>
    }
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	48000400 	.word	0x48000400
 8000f14:	20000318 	.word	0x20000318
 8000f18:	20000328 	.word	0x20000328
 8000f1c:	42be0000 	.word	0x42be0000
 8000f20:	20000388 	.word	0x20000388
 8000f24:	20000290 	.word	0x20000290

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 8000f2c:	f000 fd88 	bl	8001a40 <HAL_Init>
	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();
 8000f30:	f000 f85c 	bl	8000fec <SystemClock_Config>
	  /* USER CODE BEGIN SysInit */

	  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8000f34:	f000 f96a 	bl	800120c <MX_GPIO_Init>
	  MX_I2C1_Init();
 8000f38:	f000 f8aa 	bl	8001090 <MX_I2C1_Init>
	  MX_USART2_UART_Init();
 8000f3c:	f000 f936 	bl	80011ac <MX_USART2_UART_Init>
	  MX_TIM2_Init();
 8000f40:	f000 f8e6 	bl	8001110 <MX_TIM2_Init>
	  /* USER CODE BEGIN 2 */
	  HAL_UART_Receive_IT(&huart2, uart_rx, 4); // enable UART interrupt
 8000f44:	2204      	movs	r2, #4
 8000f46:	4921      	ldr	r1, [pc, #132]	; (8000fcc <main+0xa4>)
 8000f48:	4821      	ldr	r0, [pc, #132]	; (8000fd0 <main+0xa8>)
 8000f4a:	f004 f8e9 	bl	8005120 <HAL_UART_Receive_IT>
	  HAL_TIM_Base_Start_IT(&htim2);
 8000f4e:	4821      	ldr	r0, [pc, #132]	; (8000fd4 <main+0xac>)
 8000f50:	f003 fc14 	bl	800477c <HAL_TIM_Base_Start_IT>
	  HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8000f54:	201c      	movs	r0, #28
 8000f56:	f000 ff26 	bl	8001da6 <HAL_NVIC_DisableIRQ>

	  // Sensor initialization
	  i2c_bus.handle = &hi2c1; 	// assignment must be in a function
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <main+0xb0>)
 8000f5c:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <main+0xb4>)
 8000f5e:	601a      	str	r2, [r3, #0]
	  sensor_power(1); 				// Power on sensor(s)
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff feeb 	bl	8000d3c <sensor_power>
	  i2c_bus.n_devices = scan_i2c(i2c_bus.handle, i2c_bus.devices);
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <main+0xb0>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	491d      	ldr	r1, [pc, #116]	; (8000fe0 <main+0xb8>)
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff49 	bl	8000e04 <scan_i2c>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <main+0xb0>)
 8000f78:	72da      	strb	r2, [r3, #11]
	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
  while (1)
	  while (1)
	   {
	 	  if (scan) {
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <main+0xbc>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d017      	beq.n	8000fb2 <main+0x8a>
	       // scan flag is set by incoming UART message
	 		  HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8000f82:	201c      	movs	r0, #28
 8000f84:	f000 ff0f 	bl	8001da6 <HAL_NVIC_DisableIRQ>
	 		  i2c_bus.n_devices = scan_i2c(i2c_bus.handle, i2c_bus.devices);
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <main+0xb0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4914      	ldr	r1, [pc, #80]	; (8000fe0 <main+0xb8>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff38 	bl	8000e04 <scan_i2c>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <main+0xb0>)
 8000f9a:	72da      	strb	r2, [r3, #11]
	 		  broadcast_devices(&huart2, i2c_bus.devices, i2c_bus.n_devices);
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <main+0xb0>)
 8000f9e:	7adb      	ldrb	r3, [r3, #11]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	490e      	ldr	r1, [pc, #56]	; (8000fe0 <main+0xb8>)
 8000fa6:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <main+0xa8>)
 8000fa8:	f000 fac2 	bl	8001530 <broadcast_devices>
	 		  scan = 0;
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <main+0xbc>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
	 	  }

	 	  if (stream) {
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <main+0xc0>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <main+0x9a>
	 		  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fba:	201c      	movs	r0, #28
 8000fbc:	f000 fee5 	bl	8001d8a <HAL_NVIC_EnableIRQ>
 8000fc0:	e7db      	b.n	8000f7a <main+0x52>
	 	  } else {
	 		  HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8000fc2:	201c      	movs	r0, #28
 8000fc4:	f000 feef 	bl	8001da6 <HAL_NVIC_DisableIRQ>
	 	  if (scan) {
 8000fc8:	e7d7      	b.n	8000f7a <main+0x52>
 8000fca:	bf00      	nop
 8000fcc:	20000368 	.word	0x20000368
 8000fd0:	20000290 	.word	0x20000290
 8000fd4:	20000244 	.word	0x20000244
 8000fd8:	20000318 	.word	0x20000318
 8000fdc:	200001f0 	.word	0x200001f0
 8000fe0:	20000324 	.word	0x20000324
 8000fe4:	20000389 	.word	0x20000389
 8000fe8:	20000388 	.word	0x20000388

08000fec <SystemClock_Config>:
	 /**
	   * @brief System Clock Configuration
	   * @retval None
	   */
	 void SystemClock_Config(void)
	 {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b096      	sub	sp, #88	; 0x58
 8000ff0:	af00      	add	r7, sp, #0
	   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ff6:	2228      	movs	r2, #40	; 0x28
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 ffa3 	bl	8006f46 <memset>
	   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
	   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	615a      	str	r2, [r3, #20]

	   /** Initializes the RCC Oscillators according to the specified parameters
	   * in the RCC_OscInitTypeDef structure.
	   */
	   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001020:	2302      	movs	r3, #2
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
	   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001024:	2301      	movs	r3, #1
 8001026:	643b      	str	r3, [r7, #64]	; 0x40
	   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001028:	2310      	movs	r3, #16
 800102a:	647b      	str	r3, [r7, #68]	; 0x44
	   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800102c:	2300      	movs	r3, #0
 800102e:	64fb      	str	r3, [r7, #76]	; 0x4c
	   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001030:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001034:	4618      	mov	r0, r3
 8001036:	f001 ffc5 	bl	8002fc4 <HAL_RCC_OscConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x58>
	   {
	     Error_Handler();
 8001040:	f000 f946 	bl	80012d0 <Error_Handler>
	   }

	   /** Initializes the CPU, AHB and APB buses clocks
	   */
	   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001044:	230f      	movs	r3, #15
 8001046:	61fb      	str	r3, [r7, #28]
	                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
	   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
	   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
	   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c

	   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f002 ffee 	bl	8004040 <HAL_RCC_ClockConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x82>
	   {
	     Error_Handler();
 800106a:	f000 f931 	bl	80012d0 <Error_Handler>
	   }
	   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800106e:	2320      	movs	r3, #32
 8001070:	607b      	str	r3, [r7, #4]
	   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
	   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	4618      	mov	r0, r3
 800107a:	f003 fa01 	bl	8004480 <HAL_RCCEx_PeriphCLKConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x9c>
	   {
	     Error_Handler();
 8001084:	f000 f924 	bl	80012d0 <Error_Handler>
	   }
	 }
 8001088:	bf00      	nop
 800108a:	3758      	adds	r7, #88	; 0x58
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <MX_I2C1_Init>:
	   * @brief I2C1 Initialization Function
	   * @param None
	   * @retval None
	   */
	 static void MX_I2C1_Init(void)
	 {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	   /* USER CODE END I2C1_Init 0 */

	   /* USER CODE BEGIN I2C1_Init 1 */

	   /* USER CODE END I2C1_Init 1 */
	   hi2c1.Instance = I2C1;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_I2C1_Init+0x74>)
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <MX_I2C1_Init+0x78>)
 8001098:	601a      	str	r2, [r3, #0]
	   hi2c1.Init.Timing = 0x2000090E;
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_I2C1_Init+0x74>)
 800109c:	4a1b      	ldr	r2, [pc, #108]	; (800110c <MX_I2C1_Init+0x7c>)
 800109e:	605a      	str	r2, [r3, #4]
	   hi2c1.Init.OwnAddress1 = 0;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_I2C1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
	   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_I2C1_Init+0x74>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	60da      	str	r2, [r3, #12]
	   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_I2C1_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
	   hi2c1.Init.OwnAddress2 = 0;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_I2C1_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
	   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_I2C1_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
	   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_I2C1_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	61da      	str	r2, [r3, #28]
	   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_I2C1_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
	   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ca:	480e      	ldr	r0, [pc, #56]	; (8001104 <MX_I2C1_Init+0x74>)
 80010cc:	f001 f8a6 	bl	800221c <HAL_I2C_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_I2C1_Init+0x4a>
	   {
	     Error_Handler();
 80010d6:	f000 f8fb 	bl	80012d0 <Error_Handler>
	   }

	   /** Configure Analogue filter
	   */
	   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010da:	2100      	movs	r1, #0
 80010dc:	4809      	ldr	r0, [pc, #36]	; (8001104 <MX_I2C1_Init+0x74>)
 80010de:	f001 fed9 	bl	8002e94 <HAL_I2CEx_ConfigAnalogFilter>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_I2C1_Init+0x5c>
	   {
	     Error_Handler();
 80010e8:	f000 f8f2 	bl	80012d0 <Error_Handler>
	   }

	   /** Configure Digital filter
	   */
	   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010ec:	2100      	movs	r1, #0
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_I2C1_Init+0x74>)
 80010f0:	f001 ff1b 	bl	8002f2a <HAL_I2CEx_ConfigDigitalFilter>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_I2C1_Init+0x6e>
	   {
	     Error_Handler();
 80010fa:	f000 f8e9 	bl	80012d0 <Error_Handler>
	   }
	   /* USER CODE BEGIN I2C1_Init 2 */

	   /* USER CODE END I2C1_Init 2 */

	 }
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200001f0 	.word	0x200001f0
 8001108:	40005400 	.word	0x40005400
 800110c:	2000090e 	.word	0x2000090e

08001110 <MX_TIM2_Init>:
	   * @brief TIM2 Initialization Function
	   * @param None
	   * @retval None
	   */
	 static void MX_TIM2_Init(void)
	 {
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0

	   /* USER CODE BEGIN TIM2_Init 0 */

	   /* USER CODE END TIM2_Init 0 */

	   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
	   TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]

	   /* USER CODE BEGIN TIM2_Init 1 */

	   /* USER CODE END TIM2_Init 1 */
	   htim2.Instance = TIM2;
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001130:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001134:	601a      	str	r2, [r3, #0]
	   htim2.Init.Prescaler = 7;
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001138:	2207      	movs	r2, #7
 800113a:	605a      	str	r2, [r3, #4]
	   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_TIM2_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
	   htim2.Init.Period = 999999;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001144:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <MX_TIM2_Init+0x98>)
 8001146:	60da      	str	r2, [r3, #12]
	   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_TIM2_Init+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
	   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
	   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001156:	f003 fab9 	bl	80046cc <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM2_Init+0x54>
	   {
	     Error_Handler();
 8001160:	f000 f8b6 	bl	80012d0 <Error_Handler>
	   }
	   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	613b      	str	r3, [r7, #16]
	   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001172:	f003 fc61 	bl	8004a38 <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM2_Init+0x70>
	   {
	     Error_Handler();
 800117c:	f000 f8a8 	bl	80012d0 <Error_Handler>
	   }
	   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
	   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
	   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_TIM2_Init+0x94>)
 800118e:	f003 fe63 	bl	8004e58 <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0x8c>
	   {
	     Error_Handler();
 8001198:	f000 f89a 	bl	80012d0 <Error_Handler>
	   }
	   /* USER CODE BEGIN TIM2_Init 2 */

	   /* USER CODE END TIM2_Init 2 */

	 }
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000244 	.word	0x20000244
 80011a8:	000f423f 	.word	0x000f423f

080011ac <MX_USART2_UART_Init>:
	   * @brief USART2 Initialization Function
	   * @param None
	   * @retval None
	   */
	 static void MX_USART2_UART_Init(void)
	 {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	   /* USER CODE END USART2_Init 0 */

	   /* USER CODE BEGIN USART2_Init 1 */

	   /* USER CODE END USART2_Init 1 */
	   huart2.Instance = USART2;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011b2:	4a15      	ldr	r2, [pc, #84]	; (8001208 <MX_USART2_UART_Init+0x5c>)
 80011b4:	601a      	str	r2, [r3, #0]
	   huart2.Init.BaudRate = 38400;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011b8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80011bc:	605a      	str	r2, [r3, #4]
	   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
	   huart2.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
	   huart2.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
	   huart2.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
	   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
	   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
	   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
	   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
	   if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_USART2_UART_Init+0x58>)
 80011f0:	f003 febe 	bl	8004f70 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART2_UART_Init+0x52>
	   {
	     Error_Handler();
 80011fa:	f000 f869 	bl	80012d0 <Error_Handler>
	   }
	   /* USER CODE BEGIN USART2_Init 2 */

	   /* USER CODE END USART2_Init 2 */

	 }
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000290 	.word	0x20000290
 8001208:	40004400 	.word	0x40004400

0800120c <MX_GPIO_Init>:
	   * @brief GPIO Initialization Function
	   * @param None
	   * @retval None
	   */
	 static void MX_GPIO_Init(void)
	 {
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
	   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]
	 /* USER CODE BEGIN MX_GPIO_Init_1 */
	 /* USER CODE END MX_GPIO_Init_1 */

	   /* GPIO Ports Clock Enable */
	   __HAL_RCC_GPIOF_CLK_ENABLE();
 8001222:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <MX_GPIO_Init+0xbc>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	4a28      	ldr	r2, [pc, #160]	; (80012c8 <MX_GPIO_Init+0xbc>)
 8001228:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800122c:	6153      	str	r3, [r2, #20]
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <MX_GPIO_Init+0xbc>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
	   __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <MX_GPIO_Init+0xbc>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	4a22      	ldr	r2, [pc, #136]	; (80012c8 <MX_GPIO_Init+0xbc>)
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	6153      	str	r3, [r2, #20]
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <MX_GPIO_Init+0xbc>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
	   __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_GPIO_Init+0xbc>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <MX_GPIO_Init+0xbc>)
 8001258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125c:	6153      	str	r3, [r2, #20]
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_GPIO_Init+0xbc>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

	   /*Configure GPIO pin Output Level */
	   HAL_GPIO_WritePin(LS_ENABLE_GPIO_Port, LS_ENABLE_Pin, GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001274:	f000 ffa0 	bl	80021b8 <HAL_GPIO_WritePin>

	   /*Configure GPIO pin Output Level */
	   HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2108      	movs	r1, #8
 800127c:	4813      	ldr	r0, [pc, #76]	; (80012cc <MX_GPIO_Init+0xc0>)
 800127e:	f000 ff9b 	bl	80021b8 <HAL_GPIO_WritePin>

	   /*Configure GPIO pin : LS_ENABLE_Pin */
	   GPIO_InitStruct.Pin = LS_ENABLE_Pin;
 8001282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001286:	60fb      	str	r3, [r7, #12]
	   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	613b      	str	r3, [r7, #16]
	   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
	   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
	   HAL_GPIO_Init(LS_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129e:	f000 fe19 	bl	8001ed4 <HAL_GPIO_Init>

	   /*Configure GPIO pin : LED1_Pin */
	   GPIO_InitStruct.Pin = LED1_Pin;
 80012a2:	2308      	movs	r3, #8
 80012a4:	60fb      	str	r3, [r7, #12]
	   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	613b      	str	r3, [r7, #16]
	   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012aa:	2302      	movs	r3, #2
 80012ac:	617b      	str	r3, [r7, #20]
	   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
	   HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	4619      	mov	r1, r3
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <MX_GPIO_Init+0xc0>)
 80012ba:	f000 fe0b 	bl	8001ed4 <HAL_GPIO_Init>

	 /* USER CODE BEGIN MX_GPIO_Init_2 */
	 /* USER CODE END MX_GPIO_Init_2 */
	 }
 80012be:	bf00      	nop
 80012c0:	3720      	adds	r7, #32
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	48000400 	.word	0x48000400

080012d0 <Error_Handler>:
	 /**
	   * @brief  This function is executed in case of error occurrence.
	   * @retval None
	   */
	 void Error_Handler(void)
	 {
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
	   /* USER CODE BEGIN Error_Handler_Debug */
	   /* User can add his own implementation to report the HAL error return state */
	   __disable_irq();
	   while (1)
 80012d8:	e7fe      	b.n	80012d8 <Error_Handler+0x8>
	...

080012dc <HAL_UART_RxCpltCallback>:

#include "serial_driver.h"


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	// Function to handle incoming serial messages

	uint8_t ack[] = "#!#0#\n";
 80012e4:	4a3a      	ldr	r2, [pc, #232]	; (80013d0 <HAL_UART_RxCpltCallback+0xf4>)
 80012e6:	f107 0318 	add.w	r3, r7, #24
 80012ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ee:	6018      	str	r0, [r3, #0]
 80012f0:	3304      	adds	r3, #4
 80012f2:	8019      	strh	r1, [r3, #0]
 80012f4:	3302      	adds	r3, #2
 80012f6:	0c0a      	lsrs	r2, r1, #16
 80012f8:	701a      	strb	r2, [r3, #0]
	uint8_t ack_stream[] = "#A!#\n";
 80012fa:	4a36      	ldr	r2, [pc, #216]	; (80013d4 <HAL_UART_RxCpltCallback+0xf8>)
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001304:	6018      	str	r0, [r3, #0]
 8001306:	3304      	adds	r3, #4
 8001308:	8019      	strh	r1, [r3, #0]
	uint8_t ack_stream_stop[] = "S!#\n";
 800130a:	4a33      	ldr	r2, [pc, #204]	; (80013d8 <HAL_UART_RxCpltCallback+0xfc>)
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001314:	6018      	str	r0, [r3, #0]
 8001316:	3304      	adds	r3, #4
 8001318:	7019      	strb	r1, [r3, #0]

	// do something with the data
	if (strcmp(uart_rx, "#?#\n") == 0) {
 800131a:	4930      	ldr	r1, [pc, #192]	; (80013dc <HAL_UART_RxCpltCallback+0x100>)
 800131c:	4830      	ldr	r0, [pc, #192]	; (80013e0 <HAL_UART_RxCpltCallback+0x104>)
 800131e:	f7fe ff57 	bl	80001d0 <strcmp>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10e      	bne.n	8001346 <HAL_UART_RxCpltCallback+0x6a>
		HAL_UART_Transmit(huart, ack, strlen(ack), HAL_MAX_DELAY);
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ffaf 	bl	8000290 <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	f107 0118 	add.w	r1, r7, #24
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f003 fe64 	bl	800500c <HAL_UART_Transmit>
 8001344:	e03b      	b.n	80013be <HAL_UART_RxCpltCallback+0xe2>
	} else if(strcmp(uart_rx, "#A#\n") == 0) {
 8001346:	4927      	ldr	r1, [pc, #156]	; (80013e4 <HAL_UART_RxCpltCallback+0x108>)
 8001348:	4825      	ldr	r0, [pc, #148]	; (80013e0 <HAL_UART_RxCpltCallback+0x104>)
 800134a:	f7fe ff41 	bl	80001d0 <strcmp>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d111      	bne.n	8001378 <HAL_UART_RxCpltCallback+0x9c>
		// set stream flag
		stream = 1;
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <HAL_UART_RxCpltCallback+0x10c>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(huart, ack_stream, strlen(ack), HAL_MAX_DELAY);
 800135a:	f107 0318 	add.w	r3, r7, #24
 800135e:	4618      	mov	r0, r3
 8001360:	f7fe ff96 	bl	8000290 <strlen>
 8001364:	4603      	mov	r3, r0
 8001366:	b29a      	uxth	r2, r3
 8001368:	f107 0110 	add.w	r1, r7, #16
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f003 fe4b 	bl	800500c <HAL_UART_Transmit>
 8001376:	e022      	b.n	80013be <HAL_UART_RxCpltCallback+0xe2>
	} else if (strcmp(uart_rx, "#S#\n") == 0) {
 8001378:	491c      	ldr	r1, [pc, #112]	; (80013ec <HAL_UART_RxCpltCallback+0x110>)
 800137a:	4819      	ldr	r0, [pc, #100]	; (80013e0 <HAL_UART_RxCpltCallback+0x104>)
 800137c:	f7fe ff28 	bl	80001d0 <strcmp>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d111      	bne.n	80013aa <HAL_UART_RxCpltCallback+0xce>
		// reset stream flag (stop streaming)
		stream = 0;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_UART_RxCpltCallback+0x10c>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(huart, ack_stream_stop, strlen(ack), HAL_MAX_DELAY);
 800138c:	f107 0318 	add.w	r3, r7, #24
 8001390:	4618      	mov	r0, r3
 8001392:	f7fe ff7d 	bl	8000290 <strlen>
 8001396:	4603      	mov	r3, r0
 8001398:	b29a      	uxth	r2, r3
 800139a:	f107 0108 	add.w	r1, r7, #8
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f003 fe32 	bl	800500c <HAL_UART_Transmit>
 80013a8:	e009      	b.n	80013be <HAL_UART_RxCpltCallback+0xe2>
	} else if (strcmp(uart_rx, "#s#\n") == 0) {
 80013aa:	4911      	ldr	r1, [pc, #68]	; (80013f0 <HAL_UART_RxCpltCallback+0x114>)
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <HAL_UART_RxCpltCallback+0x104>)
 80013ae:	f7fe ff0f 	bl	80001d0 <strcmp>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <HAL_UART_RxCpltCallback+0xe2>
		// set scan flag
		scan = 1;
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_UART_RxCpltCallback+0x118>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(huart, uart_rx, 4);
 80013be:	2204      	movs	r2, #4
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <HAL_UART_RxCpltCallback+0x104>)
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f003 feac 	bl	8005120 <HAL_UART_Receive_IT>
}
 80013c8:	bf00      	nop
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	08009190 	.word	0x08009190
 80013d4:	08009198 	.word	0x08009198
 80013d8:	080091a0 	.word	0x080091a0
 80013dc:	08009170 	.word	0x08009170
 80013e0:	20000368 	.word	0x20000368
 80013e4:	08009178 	.word	0x08009178
 80013e8:	20000388 	.word	0x20000388
 80013ec:	08009180 	.word	0x08009180
 80013f0:	08009188 	.word	0x08009188
 80013f4:	20000389 	.word	0x20000389

080013f8 <transmit_SHT45>:

uint8_t transmit_SHT45(UART_HandleTypeDef * huart, SHT45 * sensor){
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b08c      	sub	sp, #48	; 0x30
 80013fc:	af02      	add	r7, sp, #8
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
	char tx[21] = "#x!#0#00000#00000#\n";
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <transmit_SHT45+0xdc>)
 8001404:	f107 0410 	add.w	r4, r7, #16
 8001408:	461d      	mov	r5, r3
 800140a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140e:	682b      	ldr	r3, [r5, #0]
 8001410:	6023      	str	r3, [r4, #0]
 8001412:	2300      	movs	r3, #0
 8001414:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	char appendix[6];

	sprintf(tx, "#D#%d", sensor->ID); //'D' signifies data message
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	795b      	ldrb	r3, [r3, #5]
 800141c:	461a      	mov	r2, r3
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	492d      	ldr	r1, [pc, #180]	; (80014d8 <transmit_SHT45+0xe0>)
 8001424:	4618      	mov	r0, r3
 8001426:	f005 fd2b 	bl	8006e80 <siprintf>
	snprintf(appendix, sizeof(appendix), "#%06.2f", sensor->RH);	// Set up appendix with device address
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f89a 	bl	8000568 <__aeabi_f2d>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	f107 0008 	add.w	r0, r7, #8
 800143c:	e9cd 2300 	strd	r2, r3, [sp]
 8001440:	4a26      	ldr	r2, [pc, #152]	; (80014dc <transmit_SHT45+0xe4>)
 8001442:	2106      	movs	r1, #6
 8001444:	f005 fce8 	bl	8006e18 <sniprintf>
	strcat(tx, appendix); 						// concatenate 'appendix' to 'tx'
 8001448:	f107 0208 	add.w	r2, r7, #8
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f005 fd7f 	bl	8006f56 <strcat>
	snprintf(appendix, sizeof(appendix), "#%06.2f", sensor->temperature);	// Set up appendix with device address, format as hex
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f883 	bl	8000568 <__aeabi_f2d>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	f107 0008 	add.w	r0, r7, #8
 800146a:	e9cd 2300 	strd	r2, r3, [sp]
 800146e:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <transmit_SHT45+0xe4>)
 8001470:	2106      	movs	r1, #6
 8001472:	f005 fcd1 	bl	8006e18 <sniprintf>
	strcat(tx, appendix); 						// concatenate 'appendix' to 'tx'
 8001476:	f107 0208 	add.w	r2, r7, #8
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f005 fd68 	bl	8006f56 <strcat>


	strcat(tx, "#\n");
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe ff00 	bl	8000290 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	4413      	add	r3, r2
 800149a:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <transmit_SHT45+0xe8>)
 800149c:	8811      	ldrh	r1, [r2, #0]
 800149e:	7892      	ldrb	r2, [r2, #2]
 80014a0:	8019      	strh	r1, [r3, #0]
 80014a2:	709a      	strb	r2, [r3, #2]

	if(HAL_UART_Transmit(huart, tx, strlen(tx), HAL_MAX_DELAY) != HAL_OK) {
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe fef1 	bl	8000290 <strlen>
 80014ae:	4603      	mov	r3, r0
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	f107 0110 	add.w	r1, r7, #16
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f003 fda6 	bl	800500c <HAL_UART_Transmit>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <transmit_SHT45+0xd2>
		return 1;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <transmit_SHT45+0xd4>
	} else {
		return 0;
 80014ca:	2300      	movs	r3, #0
	}
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bdb0      	pop	{r4, r5, r7, pc}
 80014d4:	080091bc 	.word	0x080091bc
 80014d8:	080091a8 	.word	0x080091a8
 80014dc:	080091b0 	.word	0x080091b0
 80014e0:	080091b8 	.word	0x080091b8

080014e4 <data_transfer_concluded_message>:

uint8_t data_transfer_concluded_message(UART_HandleTypeDef * huart) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint8_t tx[] = "#D!#\n"; // 'D!' signifies data transmission concluded
 80014ec:	4a0f      	ldr	r2, [pc, #60]	; (800152c <data_transfer_concluded_message+0x48>)
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014f6:	6018      	str	r0, [r3, #0]
 80014f8:	3304      	adds	r3, #4
 80014fa:	8019      	strh	r1, [r3, #0]
  if(HAL_UART_Transmit(huart, tx, strlen(tx), HAL_MAX_DELAY) != HAL_OK) {
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe fec5 	bl	8000290 <strlen>
 8001506:	4603      	mov	r3, r0
 8001508:	b29a      	uxth	r2, r3
 800150a:	f107 0108 	add.w	r1, r7, #8
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f003 fd7a 	bl	800500c <HAL_UART_Transmit>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <data_transfer_concluded_message+0x3e>
    return 1;
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <data_transfer_concluded_message+0x40>
  } else {
    return 0;
 8001522:	2300      	movs	r3, #0
  };
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	080091d4 	.word	0x080091d4

08001530 <broadcast_devices>:
	} else {
		return 0;
	}
}

uint8_t broadcast_devices(UART_HandleTypeDef *huart, volatile uint8_t * devices, volatile uint8_t n_devices) {
 8001530:	b5b0      	push	{r4, r5, r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	4613      	mov	r3, r2
 800153c:	71fb      	strb	r3, [r7, #7]
	uint8_t tx[19] = "#s!#0#00#00#00#00#\n";
 800153e:	4b30      	ldr	r3, [pc, #192]	; (8001600 <broadcast_devices+0xd0>)
 8001540:	f107 0414 	add.w	r4, r7, #20
 8001544:	461d      	mov	r5, r3
 8001546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154a:	682b      	ldr	r3, [r5, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	8022      	strh	r2, [r4, #0]
 8001550:	3402      	adds	r4, #2
 8001552:	0c1b      	lsrs	r3, r3, #16
 8001554:	7023      	strb	r3, [r4, #0]
	uint8_t appendix[4];

	sprintf(tx, "#s!#%d", n_devices);
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	461a      	mov	r2, r3
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4928      	ldr	r1, [pc, #160]	; (8001604 <broadcast_devices+0xd4>)
 8001562:	4618      	mov	r0, r3
 8001564:	f005 fc8c 	bl	8006e80 <siprintf>

	for (uint8_t i = 0; i < n_devices; i++) {
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800156e:	e019      	b.n	80015a4 <broadcast_devices+0x74>

		sprintf(appendix, "#%02X", *(devices + i));	// Set up appendix with device address, format as hex
 8001570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	4413      	add	r3, r2
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	4921      	ldr	r1, [pc, #132]	; (8001608 <broadcast_devices+0xd8>)
 8001584:	4618      	mov	r0, r3
 8001586:	f005 fc7b 	bl	8006e80 <siprintf>
		strcat(tx, appendix); 						// concatenate 'appendix' to 'tx'
 800158a:	f107 0210 	add.w	r2, r7, #16
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f005 fcde 	bl	8006f56 <strcat>
	for (uint8_t i = 0; i < n_devices; i++) {
 800159a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800159e:	3301      	adds	r3, #1
 80015a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d3df      	bcc.n	8001570 <broadcast_devices+0x40>
	}

	strcat(tx, "#\n");
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe fe6b 	bl	8000290 <strlen>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4413      	add	r3, r2
 80015c4:	4a11      	ldr	r2, [pc, #68]	; (800160c <broadcast_devices+0xdc>)
 80015c6:	8811      	ldrh	r1, [r2, #0]
 80015c8:	7892      	ldrb	r2, [r2, #2]
 80015ca:	8019      	strh	r1, [r3, #0]
 80015cc:	709a      	strb	r2, [r3, #2]

	if(HAL_UART_Transmit(huart, tx, strlen(tx), HAL_MAX_DELAY) != HAL_OK) {
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe fe5c 	bl	8000290 <strlen>
 80015d8:	4603      	mov	r3, r0
 80015da:	b29a      	uxth	r2, r3
 80015dc:	f107 0114 	add.w	r1, r7, #20
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f003 fd11 	bl	800500c <HAL_UART_Transmit>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <broadcast_devices+0xc4>
		return 1;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <broadcast_devices+0xc6>
	} else {
		return 0;
 80015f4:	2300      	movs	r3, #0
	}
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bdb0      	pop	{r4, r5, r7, pc}
 80015fe:	bf00      	nop
 8001600:	08009200 	.word	0x08009200
 8001604:	080091f0 	.word	0x080091f0
 8001608:	080091f8 	.word	0x080091f8
 800160c:	080091b8 	.word	0x080091b8

08001610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <HAL_MspInit+0x44>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_MspInit+0x44>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6193      	str	r3, [r2, #24]
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_MspInit+0x44>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_MspInit+0x44>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a08      	ldr	r2, [pc, #32]	; (8001654 <HAL_MspInit+0x44>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_MspInit+0x44>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000

08001658 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <HAL_I2C_MspInit+0x7c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d127      	bne.n	80016ca <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_I2C_MspInit+0x80>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	4a16      	ldr	r2, [pc, #88]	; (80016d8 <HAL_I2C_MspInit+0x80>)
 8001680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001684:	6153      	str	r3, [r2, #20]
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <HAL_I2C_MspInit+0x80>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001692:	23c0      	movs	r3, #192	; 0xc0
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001696:	2312      	movs	r3, #18
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016a2:	2304      	movs	r3, #4
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	480b      	ldr	r0, [pc, #44]	; (80016dc <HAL_I2C_MspInit+0x84>)
 80016ae:	f000 fc11 	bl	8001ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_I2C_MspInit+0x80>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <HAL_I2C_MspInit+0x80>)
 80016b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016bc:	61d3      	str	r3, [r2, #28]
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_I2C_MspInit+0x80>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016ca:	bf00      	nop
 80016cc:	3728      	adds	r7, #40	; 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40005400 	.word	0x40005400
 80016d8:	40021000 	.word	0x40021000
 80016dc:	48000400 	.word	0x48000400

080016e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f0:	d113      	bne.n	800171a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_TIM_Base_MspInit+0x44>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <HAL_TIM_Base_MspInit+0x44>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_TIM_Base_MspInit+0x44>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	201c      	movs	r0, #28
 8001710:	f000 fb1f 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001714:	201c      	movs	r0, #28
 8001716:	f000 fb38 	bl	8001d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <HAL_UART_MspInit+0x90>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d131      	bne.n	80017ae <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <HAL_UART_MspInit+0x94>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a1b      	ldr	r2, [pc, #108]	; (80017bc <HAL_UART_MspInit+0x94>)
 8001750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_UART_MspInit+0x94>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_UART_MspInit+0x94>)
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	4a15      	ldr	r2, [pc, #84]	; (80017bc <HAL_UART_MspInit+0x94>)
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	6153      	str	r3, [r2, #20]
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <HAL_UART_MspInit+0x94>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800177a:	f248 0304 	movw	r3, #32772	; 0x8004
 800177e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800178c:	2307      	movs	r3, #7
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179a:	f000 fb9b 	bl	8001ed4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	2026      	movs	r0, #38	; 0x26
 80017a4:	f000 fad5 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017a8:	2026      	movs	r0, #38	; 0x26
 80017aa:	f000 faee 	bl	8001d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	; 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40004400 	.word	0x40004400
 80017bc:	40021000 	.word	0x40021000

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c4:	e7fe      	b.n	80017c4 <NMI_Handler+0x4>

080017c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <MemManage_Handler+0x4>

080017d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <UsageFault_Handler+0x4>

080017de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180c:	f000 f95e 	bl	8001acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}

08001814 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <TIM2_IRQHandler+0x10>)
 800181a:	f003 f80b 	bl	8004834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000244 	.word	0x20000244

08001828 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <USART2_IRQHandler+0x10>)
 800182e:	f003 fcbb 	bl	80051a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000290 	.word	0x20000290

0800183c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return 1;
 8001840:	2301      	movs	r3, #1
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_kill>:

int _kill(int pid, int sig)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001856:	f005 fbd7 	bl	8007008 <__errno>
 800185a:	4603      	mov	r3, r0
 800185c:	2216      	movs	r2, #22
 800185e:	601a      	str	r2, [r3, #0]
  return -1;
 8001860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <_exit>:

void _exit (int status)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ffe7 	bl	800184c <_kill>
  while (1) {}    /* Make sure we hang here */
 800187e:	e7fe      	b.n	800187e <_exit+0x12>

08001880 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	e00a      	b.n	80018a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001892:	f3af 8000 	nop.w
 8001896:	4601      	mov	r1, r0
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	60ba      	str	r2, [r7, #8]
 800189e:	b2ca      	uxtb	r2, r1
 80018a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	3301      	adds	r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	dbf0      	blt.n	8001892 <_read+0x12>
  }

  return len;
 80018b0:	687b      	ldr	r3, [r7, #4]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	e009      	b.n	80018e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	60ba      	str	r2, [r7, #8]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3301      	adds	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dbf1      	blt.n	80018cc <_write+0x12>
  }
  return len;
 80018e8:	687b      	ldr	r3, [r7, #4]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_close>:

int _close(int file)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800191a:	605a      	str	r2, [r3, #4]
  return 0;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <_isatty>:

int _isatty(int file)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <_sbrk+0x5c>)
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <_sbrk+0x60>)
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <_sbrk+0x64>)
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <_sbrk+0x68>)
 800197c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	429a      	cmp	r2, r3
 800198a:	d207      	bcs.n	800199c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800198c:	f005 fb3c 	bl	8007008 <__errno>
 8001990:	4603      	mov	r3, r0
 8001992:	220c      	movs	r2, #12
 8001994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	e009      	b.n	80019b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <_sbrk+0x64>)
 80019ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ae:	68fb      	ldr	r3, [r7, #12]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20003000 	.word	0x20003000
 80019bc:	00000400 	.word	0x00000400
 80019c0:	2000038c 	.word	0x2000038c
 80019c4:	200004e0 	.word	0x200004e0

080019c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <SystemInit+0x20>)
 80019ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d2:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <SystemInit+0x20>)
 80019d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
                                                    ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a24 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80019f0:	f7ff ffea 	bl	80019c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f4:	480c      	ldr	r0, [pc, #48]	; (8001a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80019f6:	490d      	ldr	r1, [pc, #52]	; (8001a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <LoopForever+0xe>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019fc:	e002      	b.n	8001a04 <LoopCopyDataInit>

080019fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a02:	3304      	adds	r3, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a08:	d3f9      	bcc.n	80019fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a0c:	4c0a      	ldr	r4, [pc, #40]	; (8001a38 <LoopForever+0x16>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a10:	e001      	b.n	8001a16 <LoopFillZerobss>

08001a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a14:	3204      	adds	r2, #4

08001a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a18:	d3fb      	bcc.n	8001a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a1a:	f005 fafb 	bl	8007014 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a1e:	f7ff fa83 	bl	8000f28 <main>

08001a22 <LoopForever>:

LoopForever:
    b LoopForever
 8001a22:	e7fe      	b.n	8001a22 <LoopForever>
                                                    ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a24:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a2c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a30:	080095c4 	.word	0x080095c4
  ldr r2, =_sbss
 8001a34:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a38:	200004e0 	.word	0x200004e0

08001a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a3c:	e7fe      	b.n	8001a3c <ADC1_2_IRQHandler>
	...

08001a40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_Init+0x28>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <HAL_Init+0x28>)
 8001a4a:	f043 0310 	orr.w	r3, r3, #16
 8001a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a50:	2003      	movs	r0, #3
 8001a52:	f000 f973 	bl	8001d3c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f000 f808 	bl	8001a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5c:	f7ff fdd8 	bl	8001610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40022000 	.word	0x40022000

08001a6c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_InitTick+0x54>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_InitTick+0x58>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f999 	bl	8001dc2 <HAL_SYSTICK_Config>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00e      	b.n	8001ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b0f      	cmp	r3, #15
 8001a9e:	d80a      	bhi.n	8001ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f000 f953 	bl	8001d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aac:	4a06      	ldr	r2, [pc, #24]	; (8001ac8 <HAL_InitTick+0x5c>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e000      	b.n	8001ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000008 	.word	0x20000008
 8001ac8:	20000004 	.word	0x20000004

08001acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_IncTick+0x20>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_IncTick+0x24>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <HAL_IncTick+0x24>)
 8001ade:	6013      	str	r3, [r2, #0]
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000008 	.word	0x20000008
 8001af0:	20000390 	.word	0x20000390

08001af4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <HAL_GetTick+0x14>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000390 	.word	0x20000390

08001b0c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff ffee 	bl	8001af4 <HAL_GetTick>
 8001b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d005      	beq.n	8001b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_Delay+0x44>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b32:	bf00      	nop
 8001b34:	f7ff ffde 	bl	8001af4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d8f7      	bhi.n	8001b34 <HAL_Delay+0x28>
  {
  }
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000008 	.word	0x20000008

08001b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b70:	4013      	ands	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b86:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	60d3      	str	r3, [r2, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	f003 0307 	and.w	r3, r3, #7
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	db0b      	blt.n	8001be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	f003 021f 	and.w	r2, r3, #31
 8001bd0:	4907      	ldr	r1, [pc, #28]	; (8001bf0 <__NVIC_EnableIRQ+0x38>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2001      	movs	r0, #1
 8001bda:	fa00 f202 	lsl.w	r2, r0, r2
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000e100 	.word	0xe000e100

08001bf4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db12      	blt.n	8001c2c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	490a      	ldr	r1, [pc, #40]	; (8001c38 <__NVIC_DisableIRQ+0x44>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	3320      	adds	r3, #32
 8001c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c20:	f3bf 8f4f 	dsb	sy
}
 8001c24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c26:	f3bf 8f6f 	isb	sy
}
 8001c2a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d08:	d301      	bcc.n	8001d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00f      	b.n	8001d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <SysTick_Config+0x40>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d16:	210f      	movs	r1, #15
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f7ff ff8e 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <SysTick_Config+0x40>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <SysTick_Config+0x40>)
 8001d28:	2207      	movs	r2, #7
 8001d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	e000e010 	.word	0xe000e010

08001d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff05 	bl	8001b54 <__NVIC_SetPriorityGrouping>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d64:	f7ff ff1a 	bl	8001b9c <__NVIC_GetPriorityGrouping>
 8001d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	6978      	ldr	r0, [r7, #20]
 8001d70:	f7ff ff8e 	bl	8001c90 <NVIC_EncodePriority>
 8001d74:	4602      	mov	r2, r0
 8001d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff5d 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d82:	bf00      	nop
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff0d 	bl	8001bb8 <__NVIC_EnableIRQ>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff1d 	bl	8001bf4 <__NVIC_DisableIRQ>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ff94 	bl	8001cf8 <SysTick_Config>
 8001dd0:	4603      	mov	r3, r0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e02e      	b.n	8001e4a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d008      	beq.n	8001e08 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2204      	movs	r2, #4
 8001dfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e020      	b.n	8001e4a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 020e 	bic.w	r2, r2, #14
 8001e16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f202 	lsl.w	r2, r1, r2
 8001e36:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d005      	beq.n	8001e78 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2204      	movs	r2, #4
 8001e70:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	e027      	b.n	8001ec8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 020e 	bic.w	r2, r2, #14
 8001e86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
    }
  }
  return status;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee2:	e14e      	b.n	8002182 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	2101      	movs	r1, #1
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8140 	beq.w	800217c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d005      	beq.n	8001f14 <HAL_GPIO_Init+0x40>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d130      	bne.n	8001f76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	f003 0201 	and.w	r2, r3, #1
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d017      	beq.n	8001fb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d123      	bne.n	8002006 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	08da      	lsrs	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3208      	adds	r2, #8
 8001fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	08da      	lsrs	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3208      	adds	r2, #8
 8002000:	6939      	ldr	r1, [r7, #16]
 8002002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	2203      	movs	r2, #3
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0203 	and.w	r2, r3, #3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 809a 	beq.w	800217c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002048:	4b55      	ldr	r3, [pc, #340]	; (80021a0 <HAL_GPIO_Init+0x2cc>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4a54      	ldr	r2, [pc, #336]	; (80021a0 <HAL_GPIO_Init+0x2cc>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6193      	str	r3, [r2, #24]
 8002054:	4b52      	ldr	r3, [pc, #328]	; (80021a0 <HAL_GPIO_Init+0x2cc>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002060:	4a50      	ldr	r2, [pc, #320]	; (80021a4 <HAL_GPIO_Init+0x2d0>)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	220f      	movs	r2, #15
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800208a:	d013      	beq.n	80020b4 <HAL_GPIO_Init+0x1e0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a46      	ldr	r2, [pc, #280]	; (80021a8 <HAL_GPIO_Init+0x2d4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d00d      	beq.n	80020b0 <HAL_GPIO_Init+0x1dc>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a45      	ldr	r2, [pc, #276]	; (80021ac <HAL_GPIO_Init+0x2d8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d007      	beq.n	80020ac <HAL_GPIO_Init+0x1d8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a44      	ldr	r2, [pc, #272]	; (80021b0 <HAL_GPIO_Init+0x2dc>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_GPIO_Init+0x1d4>
 80020a4:	2303      	movs	r3, #3
 80020a6:	e006      	b.n	80020b6 <HAL_GPIO_Init+0x1e2>
 80020a8:	2305      	movs	r3, #5
 80020aa:	e004      	b.n	80020b6 <HAL_GPIO_Init+0x1e2>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e002      	b.n	80020b6 <HAL_GPIO_Init+0x1e2>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_GPIO_Init+0x1e2>
 80020b4:	2300      	movs	r3, #0
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	f002 0203 	and.w	r2, r2, #3
 80020bc:	0092      	lsls	r2, r2, #2
 80020be:	4093      	lsls	r3, r2
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020c6:	4937      	ldr	r1, [pc, #220]	; (80021a4 <HAL_GPIO_Init+0x2d0>)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	3302      	adds	r3, #2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020d4:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <HAL_GPIO_Init+0x2e0>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020f8:	4a2e      	ldr	r2, [pc, #184]	; (80021b4 <HAL_GPIO_Init+0x2e0>)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <HAL_GPIO_Init+0x2e0>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	43db      	mvns	r3, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002122:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <HAL_GPIO_Init+0x2e0>)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002128:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <HAL_GPIO_Init+0x2e0>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43db      	mvns	r3, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800214c:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <HAL_GPIO_Init+0x2e0>)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_GPIO_Init+0x2e0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	43db      	mvns	r3, r3
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002176:	4a0f      	ldr	r2, [pc, #60]	; (80021b4 <HAL_GPIO_Init+0x2e0>)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3301      	adds	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	f47f aea9 	bne.w	8001ee4 <HAL_GPIO_Init+0x10>
  }
}
 8002192:	bf00      	nop
 8002194:	bf00      	nop
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40010000 	.word	0x40010000
 80021a8:	48000400 	.word	0x48000400
 80021ac:	48000800 	.word	0x48000800
 80021b0:	48000c00 	.word	0x48000c00
 80021b4:	40010400 	.word	0x40010400

080021b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c8:	787b      	ldrb	r3, [r7, #1]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021d4:	e002      	b.n	80021dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4013      	ands	r3, r2
 8002200:	041a      	lsls	r2, r3, #16
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43d9      	mvns	r1, r3
 8002206:	887b      	ldrh	r3, [r7, #2]
 8002208:	400b      	ands	r3, r1
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	619a      	str	r2, [r3, #24]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e08d      	b.n	800234a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff fa08 	bl	8001658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2224      	movs	r2, #36	; 0x24
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800226c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800227c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	e006      	b.n	80022a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d108      	bne.n	80022be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ba:	605a      	str	r2, [r3, #4]
 80022bc:	e007      	b.n	80022ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69d9      	ldr	r1, [r3, #28]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1a      	ldr	r2, [r3, #32]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af02      	add	r7, sp, #8
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	461a      	mov	r2, r3
 8002360:	460b      	mov	r3, r1
 8002362:	817b      	strh	r3, [r7, #10]
 8002364:	4613      	mov	r3, r2
 8002366:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b20      	cmp	r3, #32
 8002372:	f040 80fd 	bne.w	8002570 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_I2C_Master_Transmit+0x30>
 8002380:	2302      	movs	r3, #2
 8002382:	e0f6      	b.n	8002572 <HAL_I2C_Master_Transmit+0x21e>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800238c:	f7ff fbb2 	bl	8001af4 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2319      	movs	r3, #25
 8002398:	2201      	movs	r2, #1
 800239a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 faf6 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e0e1      	b.n	8002572 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2221      	movs	r2, #33	; 0x21
 80023b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2210      	movs	r2, #16
 80023ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	893a      	ldrh	r2, [r7, #8]
 80023ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2bff      	cmp	r3, #255	; 0xff
 80023de:	d906      	bls.n	80023ee <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	22ff      	movs	r2, #255	; 0xff
 80023e4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80023e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	e007      	b.n	80023fe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80023f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023fc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	2b00      	cmp	r3, #0
 8002404:	d024      	beq.n	8002450 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	b2da      	uxtb	r2, r3
 8002440:	8979      	ldrh	r1, [r7, #10]
 8002442:	4b4e      	ldr	r3, [pc, #312]	; (800257c <HAL_I2C_Master_Transmit+0x228>)
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fcf1 	bl	8002e30 <I2C_TransferConfig>
 800244e:	e066      	b.n	800251e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	b2da      	uxtb	r2, r3
 8002456:	8979      	ldrh	r1, [r7, #10]
 8002458:	4b48      	ldr	r3, [pc, #288]	; (800257c <HAL_I2C_Master_Transmit+0x228>)
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fce6 	bl	8002e30 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002464:	e05b      	b.n	800251e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	6a39      	ldr	r1, [r7, #32]
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 fae9 	bl	8002a42 <I2C_WaitOnTXISFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e07b      	b.n	8002572 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	781a      	ldrb	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d034      	beq.n	800251e <HAL_I2C_Master_Transmit+0x1ca>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d130      	bne.n	800251e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	2200      	movs	r2, #0
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 fa62 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e04d      	b.n	8002572 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2bff      	cmp	r3, #255	; 0xff
 80024de:	d90e      	bls.n	80024fe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	22ff      	movs	r2, #255	; 0xff
 80024e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	8979      	ldrh	r1, [r7, #10]
 80024ee:	2300      	movs	r3, #0
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 fc9a 	bl	8002e30 <I2C_TransferConfig>
 80024fc:	e00f      	b.n	800251e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250c:	b2da      	uxtb	r2, r3
 800250e:	8979      	ldrh	r1, [r7, #10]
 8002510:	2300      	movs	r3, #0
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fc89 	bl	8002e30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d19e      	bne.n	8002466 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	6a39      	ldr	r1, [r7, #32]
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 facf 	bl	8002ad0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e01a      	b.n	8002572 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2220      	movs	r2, #32
 8002542:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6859      	ldr	r1, [r3, #4]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <HAL_I2C_Master_Transmit+0x22c>)
 8002550:	400b      	ands	r3, r1
 8002552:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	e000      	b.n	8002572 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002570:	2302      	movs	r3, #2
  }
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	80002000 	.word	0x80002000
 8002580:	fe00e800 	.word	0xfe00e800

08002584 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af02      	add	r7, sp, #8
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	461a      	mov	r2, r3
 8002590:	460b      	mov	r3, r1
 8002592:	817b      	strh	r3, [r7, #10]
 8002594:	4613      	mov	r3, r2
 8002596:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	f040 80db 	bne.w	800275c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_I2C_Master_Receive+0x30>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e0d4      	b.n	800275e <HAL_I2C_Master_Receive+0x1da>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025bc:	f7ff fa9a 	bl	8001af4 <HAL_GetTick>
 80025c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2319      	movs	r3, #25
 80025c8:	2201      	movs	r2, #1
 80025ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f9de 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e0bf      	b.n	800275e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2222      	movs	r2, #34	; 0x22
 80025e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2210      	movs	r2, #16
 80025ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	893a      	ldrh	r2, [r7, #8]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	2bff      	cmp	r3, #255	; 0xff
 800260e:	d90e      	bls.n	800262e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261a:	b2da      	uxtb	r2, r3
 800261c:	8979      	ldrh	r1, [r7, #10]
 800261e:	4b52      	ldr	r3, [pc, #328]	; (8002768 <HAL_I2C_Master_Receive+0x1e4>)
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 fc02 	bl	8002e30 <I2C_TransferConfig>
 800262c:	e06d      	b.n	800270a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	b2da      	uxtb	r2, r3
 800263e:	8979      	ldrh	r1, [r7, #10]
 8002640:	4b49      	ldr	r3, [pc, #292]	; (8002768 <HAL_I2C_Master_Receive+0x1e4>)
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fbf1 	bl	8002e30 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800264e:	e05c      	b.n	800270a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	6a39      	ldr	r1, [r7, #32]
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fa7f 	bl	8002b58 <I2C_WaitOnRXNEFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e07c      	b.n	800275e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d034      	beq.n	800270a <HAL_I2C_Master_Receive+0x186>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d130      	bne.n	800270a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	2200      	movs	r2, #0
 80026b0:	2180      	movs	r1, #128	; 0x80
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f96c 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e04d      	b.n	800275e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2bff      	cmp	r3, #255	; 0xff
 80026ca:	d90e      	bls.n	80026ea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	22ff      	movs	r2, #255	; 0xff
 80026d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	8979      	ldrh	r1, [r7, #10]
 80026da:	2300      	movs	r3, #0
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 fba4 	bl	8002e30 <I2C_TransferConfig>
 80026e8:	e00f      	b.n	800270a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	8979      	ldrh	r1, [r7, #10]
 80026fc:	2300      	movs	r3, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fb93 	bl	8002e30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d19d      	bne.n	8002650 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	6a39      	ldr	r1, [r7, #32]
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f9d9 	bl	8002ad0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e01a      	b.n	800275e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2220      	movs	r2, #32
 800272e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b0c      	ldr	r3, [pc, #48]	; (800276c <HAL_I2C_Master_Receive+0x1e8>)
 800273c:	400b      	ands	r3, r1
 800273e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	e000      	b.n	800275e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800275c:	2302      	movs	r3, #2
  }
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	80002400 	.word	0x80002400
 800276c:	fe00e800 	.word	0xfe00e800

08002770 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	460b      	mov	r3, r1
 800277e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b20      	cmp	r3, #32
 800278e:	f040 80d6 	bne.w	800293e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800279c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027a0:	d101      	bne.n	80027a6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80027a2:	2302      	movs	r3, #2
 80027a4:	e0cc      	b.n	8002940 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_I2C_IsDeviceReady+0x44>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e0c5      	b.n	8002940 <HAL_I2C_IsDeviceReady+0x1d0>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2224      	movs	r2, #36	; 0x24
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d107      	bne.n	80027e2 <HAL_I2C_IsDeviceReady+0x72>
 80027d2:	897b      	ldrh	r3, [r7, #10]
 80027d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027e0:	e006      	b.n	80027f0 <HAL_I2C_IsDeviceReady+0x80>
 80027e2:	897b      	ldrh	r3, [r7, #10]
 80027e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027ec:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80027f6:	f7ff f97d 	bl	8001af4 <HAL_GetTick>
 80027fa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	2b20      	cmp	r3, #32
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b10      	cmp	r3, #16
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002828:	e034      	b.n	8002894 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d01a      	beq.n	8002868 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002832:	f7ff f95f 	bl	8001af4 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d302      	bcc.n	8002848 <HAL_I2C_IsDeviceReady+0xd8>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10f      	bne.n	8002868 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	f043 0220 	orr.w	r2, r3, #32
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e06b      	b.n	8002940 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b20      	cmp	r3, #32
 8002874:	bf0c      	ite	eq
 8002876:	2301      	moveq	r3, #1
 8002878:	2300      	movne	r3, #0
 800287a:	b2db      	uxtb	r3, r3
 800287c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b10      	cmp	r3, #16
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002894:	7ffb      	ldrb	r3, [r7, #31]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <HAL_I2C_IsDeviceReady+0x130>
 800289a:	7fbb      	ldrb	r3, [r7, #30]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0c4      	beq.n	800282a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d01a      	beq.n	80028e4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2200      	movs	r2, #0
 80028b6:	2120      	movs	r1, #32
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f869 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e03b      	b.n	8002940 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2220      	movs	r2, #32
 80028ce:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e02d      	b.n	8002940 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2200      	movs	r2, #0
 80028ec:	2120      	movs	r1, #32
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f84e 	bl	8002990 <I2C_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e020      	b.n	8002940 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2210      	movs	r2, #16
 8002904:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2220      	movs	r2, #32
 800290c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3301      	adds	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	429a      	cmp	r2, r3
 800291a:	f63f af56 	bhi.w	80027ca <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f043 0220 	orr.w	r2, r3, #32
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800293e:	2302      	movs	r3, #2
  }
}
 8002940:	4618      	mov	r0, r3
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d103      	bne.n	8002966 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2200      	movs	r2, #0
 8002964:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d007      	beq.n	8002984 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	619a      	str	r2, [r3, #24]
  }
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a0:	e03b      	b.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	6839      	ldr	r1, [r7, #0]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f962 	bl	8002c70 <I2C_IsErrorOccurred>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e041      	b.n	8002a3a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d02d      	beq.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7ff f899 	bl	8001af4 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d122      	bne.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	4013      	ands	r3, r2
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	bf0c      	ite	eq
 80029e4:	2301      	moveq	r3, #1
 80029e6:	2300      	movne	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d113      	bne.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f043 0220 	orr.w	r2, r3, #32
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e00f      	b.n	8002a3a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699a      	ldr	r2, [r3, #24]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4013      	ands	r3, r2
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	bf0c      	ite	eq
 8002a2a:	2301      	moveq	r3, #1
 8002a2c:	2300      	movne	r3, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d0b4      	beq.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a4e:	e033      	b.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f90b 	bl	8002c70 <I2C_IsErrorOccurred>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e031      	b.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d025      	beq.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6c:	f7ff f842 	bl	8001af4 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d302      	bcc.n	8002a82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d11a      	bne.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d013      	beq.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	f043 0220 	orr.w	r2, r3, #32
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e007      	b.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d1c4      	bne.n	8002a50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002adc:	e02f      	b.n	8002b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f8c4 	bl	8002c70 <I2C_IsErrorOccurred>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e02d      	b.n	8002b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af2:	f7fe ffff 	bl	8001af4 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d302      	bcc.n	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d11a      	bne.n	8002b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d013      	beq.n	8002b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	f043 0220 	orr.w	r2, r3, #32
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e007      	b.n	8002b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d1c8      	bne.n	8002ade <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002b68:	e071      	b.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f87e 	bl	8002c70 <I2C_IsErrorOccurred>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d13b      	bne.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d138      	bne.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d105      	bne.n	8002bac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d121      	bne.n	8002bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2210      	movs	r2, #16
 8002bc0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6859      	ldr	r1, [r3, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002bdc:	400b      	ands	r3, r1
 8002bde:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	75fb      	strb	r3, [r7, #23]
 8002bfc:	e002      	b.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002c04:	f7fe ff76 	bl	8001af4 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d302      	bcc.n	8002c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d119      	bne.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d116      	bne.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d00f      	beq.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f043 0220 	orr.w	r2, r3, #32
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d002      	beq.n	8002c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d083      	beq.n	8002b6a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	fe00e800 	.word	0xfe00e800

08002c70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	; 0x28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d068      	beq.n	8002d6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ca4:	e049      	b.n	8002d3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d045      	beq.n	8002d3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cae:	f7fe ff21 	bl	8001af4 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d302      	bcc.n	8002cc4 <I2C_IsErrorOccurred+0x54>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d13a      	bne.n	8002d3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cd6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ce6:	d121      	bne.n	8002d2c <I2C_IsErrorOccurred+0xbc>
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cee:	d01d      	beq.n	8002d2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d01a      	beq.n	8002d2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d06:	f7fe fef5 	bl	8001af4 <HAL_GetTick>
 8002d0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d0c:	e00e      	b.n	8002d2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d0e:	f7fe fef1 	bl	8001af4 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b19      	cmp	r3, #25
 8002d1a:	d907      	bls.n	8002d2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	f043 0320 	orr.w	r3, r3, #32
 8002d22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002d2a:	e006      	b.n	8002d3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d1e9      	bne.n	8002d0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d003      	beq.n	8002d50 <I2C_IsErrorOccurred+0xe0>
 8002d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0aa      	beq.n	8002ca6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	f043 0304 	orr.w	r3, r3, #4
 8002d66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00b      	beq.n	8002d98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00b      	beq.n	8002dba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	f043 0308 	orr.w	r3, r3, #8
 8002da8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00b      	beq.n	8002ddc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	f043 0302 	orr.w	r3, r3, #2
 8002dca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01c      	beq.n	8002e1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f7ff fdaf 	bl	8002948 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <I2C_IsErrorOccurred+0x1bc>)
 8002df6:	400b      	ands	r3, r1
 8002df8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3728      	adds	r7, #40	; 0x28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	fe00e800 	.word	0xfe00e800

08002e30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	817b      	strh	r3, [r7, #10]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e42:	897b      	ldrh	r3, [r7, #10]
 8002e44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e48:	7a7b      	ldrb	r3, [r7, #9]
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	0d5b      	lsrs	r3, r3, #21
 8002e6a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <I2C_TransferConfig+0x60>)
 8002e70:	430b      	orrs	r3, r1
 8002e72:	43db      	mvns	r3, r3
 8002e74:	ea02 0103 	and.w	r1, r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	03ff63ff 	.word	0x03ff63ff

08002e94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d138      	bne.n	8002f1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e032      	b.n	8002f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2224      	movs	r2, #36	; 0x24
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ee6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6819      	ldr	r1, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e000      	b.n	8002f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b085      	sub	sp, #20
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d139      	bne.n	8002fb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e033      	b.n	8002fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2224      	movs	r2, #36	; 0x24
 8002f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e000      	b.n	8002fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fb4:	2302      	movs	r3, #2
  }
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fd4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d102      	bne.n	8002fea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f001 b823 	b.w	8004030 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 817d 	beq.w	80032fa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003000:	4bbc      	ldr	r3, [pc, #752]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	2b04      	cmp	r3, #4
 800300a:	d00c      	beq.n	8003026 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800300c:	4bb9      	ldr	r3, [pc, #740]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b08      	cmp	r3, #8
 8003016:	d15c      	bne.n	80030d2 <HAL_RCC_OscConfig+0x10e>
 8003018:	4bb6      	ldr	r3, [pc, #728]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003024:	d155      	bne.n	80030d2 <HAL_RCC_OscConfig+0x10e>
 8003026:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800302a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800303a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	095b      	lsrs	r3, r3, #5
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d102      	bne.n	8003058 <HAL_RCC_OscConfig+0x94>
 8003052:	4ba8      	ldr	r3, [pc, #672]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	e015      	b.n	8003084 <HAL_RCC_OscConfig+0xc0>
 8003058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800305c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800306c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003070:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003074:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003080:	4b9c      	ldr	r3, [pc, #624]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003088:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800308c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003090:	fa92 f2a2 	rbit	r2, r2
 8003094:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003098:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800309c:	fab2 f282 	clz	r2, r2
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	f042 0220 	orr.w	r2, r2, #32
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	f002 021f 	and.w	r2, r2, #31
 80030ac:	2101      	movs	r1, #1
 80030ae:	fa01 f202 	lsl.w	r2, r1, r2
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 811f 	beq.w	80032f8 <HAL_RCC_OscConfig+0x334>
 80030ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f040 8116 	bne.w	80032f8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	f000 bfaf 	b.w	8004030 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e2:	d106      	bne.n	80030f2 <HAL_RCC_OscConfig+0x12e>
 80030e4:	4b83      	ldr	r3, [pc, #524]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a82      	ldr	r2, [pc, #520]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80030ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	e036      	b.n	8003160 <HAL_RCC_OscConfig+0x19c>
 80030f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x158>
 8003102:	4b7c      	ldr	r3, [pc, #496]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a7b      	ldr	r2, [pc, #492]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b79      	ldr	r3, [pc, #484]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a78      	ldr	r2, [pc, #480]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e021      	b.n	8003160 <HAL_RCC_OscConfig+0x19c>
 800311c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003120:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800312c:	d10c      	bne.n	8003148 <HAL_RCC_OscConfig+0x184>
 800312e:	4b71      	ldr	r3, [pc, #452]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a70      	ldr	r2, [pc, #448]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	4b6e      	ldr	r3, [pc, #440]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a6d      	ldr	r2, [pc, #436]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	e00b      	b.n	8003160 <HAL_RCC_OscConfig+0x19c>
 8003148:	4b6a      	ldr	r3, [pc, #424]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a69      	ldr	r2, [pc, #420]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800314e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	4b67      	ldr	r3, [pc, #412]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a66      	ldr	r2, [pc, #408]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800315a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800315e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003160:	4b64      	ldr	r3, [pc, #400]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	f023 020f 	bic.w	r2, r3, #15
 8003168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	495f      	ldr	r1, [pc, #380]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003176:	4313      	orrs	r3, r2
 8003178:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800317a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d059      	beq.n	800323e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318a:	f7fe fcb3 	bl	8001af4 <HAL_GetTick>
 800318e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003192:	e00a      	b.n	80031aa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003194:	f7fe fcae 	bl	8001af4 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b64      	cmp	r3, #100	; 0x64
 80031a2:	d902      	bls.n	80031aa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	f000 bf43 	b.w	8004030 <HAL_RCC_OscConfig+0x106c>
 80031aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80031be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	fab3 f383 	clz	r3, r3
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d102      	bne.n	80031dc <HAL_RCC_OscConfig+0x218>
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	e015      	b.n	8003208 <HAL_RCC_OscConfig+0x244>
 80031dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031e0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80031f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80031f8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003204:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800320c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003210:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003214:	fa92 f2a2 	rbit	r2, r2
 8003218:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800321c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003220:	fab2 f282 	clz	r2, r2
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	f042 0220 	orr.w	r2, r2, #32
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	f002 021f 	and.w	r2, r2, #31
 8003230:	2101      	movs	r1, #1
 8003232:	fa01 f202 	lsl.w	r2, r1, r2
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ab      	beq.n	8003194 <HAL_RCC_OscConfig+0x1d0>
 800323c:	e05d      	b.n	80032fa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323e:	f7fe fc59 	bl	8001af4 <HAL_GetTick>
 8003242:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003246:	e00a      	b.n	800325e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003248:	f7fe fc54 	bl	8001af4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b64      	cmp	r3, #100	; 0x64
 8003256:	d902      	bls.n	800325e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	f000 bee9 	b.w	8004030 <HAL_RCC_OscConfig+0x106c>
 800325e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003262:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800326a:	fa93 f3a3 	rbit	r3, r3
 800326e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003272:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d102      	bne.n	8003290 <HAL_RCC_OscConfig+0x2cc>
 800328a:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	e015      	b.n	80032bc <HAL_RCC_OscConfig+0x2f8>
 8003290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003294:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800329c:	fa93 f3a3 	rbit	r3, r3
 80032a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80032a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032a8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80032ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80032b0:	fa93 f3a3 	rbit	r3, r3
 80032b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80032b8:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032c0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80032c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80032c8:	fa92 f2a2 	rbit	r2, r2
 80032cc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80032d0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80032d4:	fab2 f282 	clz	r2, r2
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	f042 0220 	orr.w	r2, r2, #32
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	f002 021f 	and.w	r2, r2, #31
 80032e4:	2101      	movs	r1, #1
 80032e6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ab      	bne.n	8003248 <HAL_RCC_OscConfig+0x284>
 80032f0:	e003      	b.n	80032fa <HAL_RCC_OscConfig+0x336>
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 817d 	beq.w	800360a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003310:	4ba6      	ldr	r3, [pc, #664]	; (80035ac <HAL_RCC_OscConfig+0x5e8>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00b      	beq.n	8003334 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800331c:	4ba3      	ldr	r3, [pc, #652]	; (80035ac <HAL_RCC_OscConfig+0x5e8>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b08      	cmp	r3, #8
 8003326:	d172      	bne.n	800340e <HAL_RCC_OscConfig+0x44a>
 8003328:	4ba0      	ldr	r3, [pc, #640]	; (80035ac <HAL_RCC_OscConfig+0x5e8>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d16c      	bne.n	800340e <HAL_RCC_OscConfig+0x44a>
 8003334:	2302      	movs	r3, #2
 8003336:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800333e:	fa93 f3a3 	rbit	r3, r3
 8003342:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003346:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334a:	fab3 f383 	clz	r3, r3
 800334e:	b2db      	uxtb	r3, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d102      	bne.n	8003364 <HAL_RCC_OscConfig+0x3a0>
 800335e:	4b93      	ldr	r3, [pc, #588]	; (80035ac <HAL_RCC_OscConfig+0x5e8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	e013      	b.n	800338c <HAL_RCC_OscConfig+0x3c8>
 8003364:	2302      	movs	r3, #2
 8003366:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003376:	2302      	movs	r3, #2
 8003378:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800337c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003380:	fa93 f3a3 	rbit	r3, r3
 8003384:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003388:	4b88      	ldr	r3, [pc, #544]	; (80035ac <HAL_RCC_OscConfig+0x5e8>)
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	2202      	movs	r2, #2
 800338e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003392:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003396:	fa92 f2a2 	rbit	r2, r2
 800339a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800339e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80033a2:	fab2 f282 	clz	r2, r2
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	f042 0220 	orr.w	r2, r2, #32
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	f002 021f 	and.w	r2, r2, #31
 80033b2:	2101      	movs	r1, #1
 80033b4:	fa01 f202 	lsl.w	r2, r1, r2
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_RCC_OscConfig+0x410>
 80033be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d002      	beq.n	80033d4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f000 be2e 	b.w	8004030 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d4:	4b75      	ldr	r3, [pc, #468]	; (80035ac <HAL_RCC_OscConfig+0x5e8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	21f8      	movs	r1, #248	; 0xf8
 80033ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80033f2:	fa91 f1a1 	rbit	r1, r1
 80033f6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80033fa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80033fe:	fab1 f181 	clz	r1, r1
 8003402:	b2c9      	uxtb	r1, r1
 8003404:	408b      	lsls	r3, r1
 8003406:	4969      	ldr	r1, [pc, #420]	; (80035ac <HAL_RCC_OscConfig+0x5e8>)
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340c:	e0fd      	b.n	800360a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800340e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003412:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8088 	beq.w	8003530 <HAL_RCC_OscConfig+0x56c>
 8003420:	2301      	movs	r3, #1
 8003422:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003432:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003436:	fab3 f383 	clz	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003440:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	461a      	mov	r2, r3
 8003448:	2301      	movs	r3, #1
 800344a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fe fb52 	bl	8001af4 <HAL_GetTick>
 8003450:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003456:	f7fe fb4d 	bl	8001af4 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d902      	bls.n	800346c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	f000 bde2 	b.w	8004030 <HAL_RCC_OscConfig+0x106c>
 800346c:	2302      	movs	r3, #2
 800346e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003476:	fa93 f3a3 	rbit	r3, r3
 800347a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800347e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d102      	bne.n	800349c <HAL_RCC_OscConfig+0x4d8>
 8003496:	4b45      	ldr	r3, [pc, #276]	; (80035ac <HAL_RCC_OscConfig+0x5e8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	e013      	b.n	80034c4 <HAL_RCC_OscConfig+0x500>
 800349c:	2302      	movs	r3, #2
 800349e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80034ae:	2302      	movs	r3, #2
 80034b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80034b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80034b8:	fa93 f3a3 	rbit	r3, r3
 80034bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80034c0:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <HAL_RCC_OscConfig+0x5e8>)
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	2202      	movs	r2, #2
 80034c6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80034ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80034ce:	fa92 f2a2 	rbit	r2, r2
 80034d2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80034d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80034da:	fab2 f282 	clz	r2, r2
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	f042 0220 	orr.w	r2, r2, #32
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	f002 021f 	and.w	r2, r2, #31
 80034ea:	2101      	movs	r1, #1
 80034ec:	fa01 f202 	lsl.w	r2, r1, r2
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0af      	beq.n	8003456 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f6:	4b2d      	ldr	r3, [pc, #180]	; (80035ac <HAL_RCC_OscConfig+0x5e8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003502:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	21f8      	movs	r1, #248	; 0xf8
 800350c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003514:	fa91 f1a1 	rbit	r1, r1
 8003518:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800351c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003520:	fab1 f181 	clz	r1, r1
 8003524:	b2c9      	uxtb	r1, r1
 8003526:	408b      	lsls	r3, r1
 8003528:	4920      	ldr	r1, [pc, #128]	; (80035ac <HAL_RCC_OscConfig+0x5e8>)
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
 800352e:	e06c      	b.n	800360a <HAL_RCC_OscConfig+0x646>
 8003530:	2301      	movs	r3, #1
 8003532:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003542:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003546:	fab3 f383 	clz	r3, r3
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003550:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	461a      	mov	r2, r3
 8003558:	2300      	movs	r3, #0
 800355a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fe faca 	bl	8001af4 <HAL_GetTick>
 8003560:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003564:	e00a      	b.n	800357c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003566:	f7fe fac5 	bl	8001af4 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d902      	bls.n	800357c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	f000 bd5a 	b.w	8004030 <HAL_RCC_OscConfig+0x106c>
 800357c:	2302      	movs	r3, #2
 800357e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003586:	fa93 f3a3 	rbit	r3, r3
 800358a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800358e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	095b      	lsrs	r3, r3, #5
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d104      	bne.n	80035b0 <HAL_RCC_OscConfig+0x5ec>
 80035a6:	4b01      	ldr	r3, [pc, #4]	; (80035ac <HAL_RCC_OscConfig+0x5e8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	e015      	b.n	80035d8 <HAL_RCC_OscConfig+0x614>
 80035ac:	40021000 	.word	0x40021000
 80035b0:	2302      	movs	r3, #2
 80035b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80035c2:	2302      	movs	r3, #2
 80035c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80035c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80035d4:	4bc8      	ldr	r3, [pc, #800]	; (80038f8 <HAL_RCC_OscConfig+0x934>)
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	2202      	movs	r2, #2
 80035da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80035de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80035e2:	fa92 f2a2 	rbit	r2, r2
 80035e6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80035ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80035ee:	fab2 f282 	clz	r2, r2
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	f042 0220 	orr.w	r2, r2, #32
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	f002 021f 	and.w	r2, r2, #31
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f202 	lsl.w	r2, r1, r2
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1ad      	bne.n	8003566 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8110 	beq.w	8003840 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003624:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d079      	beq.n	8003724 <HAL_RCC_OscConfig+0x760>
 8003630:	2301      	movs	r3, #1
 8003632:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	4bab      	ldr	r3, [pc, #684]	; (80038fc <HAL_RCC_OscConfig+0x938>)
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	461a      	mov	r2, r3
 8003656:	2301      	movs	r3, #1
 8003658:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365a:	f7fe fa4b 	bl	8001af4 <HAL_GetTick>
 800365e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003662:	e00a      	b.n	800367a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003664:	f7fe fa46 	bl	8001af4 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d902      	bls.n	800367a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	f000 bcdb 	b.w	8004030 <HAL_RCC_OscConfig+0x106c>
 800367a:	2302      	movs	r3, #2
 800367c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003680:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800368c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003690:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003694:	2202      	movs	r2, #2
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	fa93 f2a3 	rbit	r2, r3
 80036a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036b8:	2202      	movs	r2, #2
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	fa93 f2a3 	rbit	r2, r3
 80036ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80036d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d4:	4b88      	ldr	r3, [pc, #544]	; (80038f8 <HAL_RCC_OscConfig+0x934>)
 80036d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80036e0:	2102      	movs	r1, #2
 80036e2:	6019      	str	r1, [r3, #0]
 80036e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	fa93 f1a3 	rbit	r1, r3
 80036f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80036fa:	6019      	str	r1, [r3, #0]
  return result;
 80036fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003700:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	fab3 f383 	clz	r3, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2101      	movs	r1, #1
 8003718:	fa01 f303 	lsl.w	r3, r1, r3
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0a0      	beq.n	8003664 <HAL_RCC_OscConfig+0x6a0>
 8003722:	e08d      	b.n	8003840 <HAL_RCC_OscConfig+0x87c>
 8003724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003728:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800372c:	2201      	movs	r2, #1
 800372e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003734:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	fa93 f2a3 	rbit	r2, r3
 800373e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003742:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003746:	601a      	str	r2, [r3, #0]
  return result;
 8003748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003750:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	4b68      	ldr	r3, [pc, #416]	; (80038fc <HAL_RCC_OscConfig+0x938>)
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	461a      	mov	r2, r3
 8003762:	2300      	movs	r3, #0
 8003764:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003766:	f7fe f9c5 	bl	8001af4 <HAL_GetTick>
 800376a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376e:	e00a      	b.n	8003786 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003770:	f7fe f9c0 	bl	8001af4 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d902      	bls.n	8003786 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	f000 bc55 	b.w	8004030 <HAL_RCC_OscConfig+0x106c>
 8003786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800378e:	2202      	movs	r2, #2
 8003790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003796:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	fa93 f2a3 	rbit	r2, r3
 80037a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037b2:	2202      	movs	r2, #2
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	fa93 f2a3 	rbit	r2, r3
 80037c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037d6:	2202      	movs	r2, #2
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	fa93 f2a3 	rbit	r2, r3
 80037e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80037f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f2:	4b41      	ldr	r3, [pc, #260]	; (80038f8 <HAL_RCC_OscConfig+0x934>)
 80037f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80037fe:	2102      	movs	r1, #2
 8003800:	6019      	str	r1, [r3, #0]
 8003802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003806:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	fa93 f1a3 	rbit	r1, r3
 8003810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003814:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003818:	6019      	str	r1, [r3, #0]
  return result;
 800381a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	2101      	movs	r1, #1
 8003836:	fa01 f303 	lsl.w	r3, r1, r3
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d197      	bne.n	8003770 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003844:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 81a1 	beq.w	8003b98 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003856:	2300      	movs	r3, #0
 8003858:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385c:	4b26      	ldr	r3, [pc, #152]	; (80038f8 <HAL_RCC_OscConfig+0x934>)
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d116      	bne.n	8003896 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003868:	4b23      	ldr	r3, [pc, #140]	; (80038f8 <HAL_RCC_OscConfig+0x934>)
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	4a22      	ldr	r2, [pc, #136]	; (80038f8 <HAL_RCC_OscConfig+0x934>)
 800386e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003872:	61d3      	str	r3, [r2, #28]
 8003874:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_RCC_OscConfig+0x934>)
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800387c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003880:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800388e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003890:	2301      	movs	r3, #1
 8003892:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003896:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <HAL_RCC_OscConfig+0x93c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d11a      	bne.n	80038d8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038a2:	4b17      	ldr	r3, [pc, #92]	; (8003900 <HAL_RCC_OscConfig+0x93c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a16      	ldr	r2, [pc, #88]	; (8003900 <HAL_RCC_OscConfig+0x93c>)
 80038a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ae:	f7fe f921 	bl	8001af4 <HAL_GetTick>
 80038b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b6:	e009      	b.n	80038cc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b8:	f7fe f91c 	bl	8001af4 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b64      	cmp	r3, #100	; 0x64
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e3b1      	b.n	8004030 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038cc:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <HAL_RCC_OscConfig+0x93c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0ef      	beq.n	80038b8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d10d      	bne.n	8003904 <HAL_RCC_OscConfig+0x940>
 80038e8:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <HAL_RCC_OscConfig+0x934>)
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	4a02      	ldr	r2, [pc, #8]	; (80038f8 <HAL_RCC_OscConfig+0x934>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	6213      	str	r3, [r2, #32]
 80038f4:	e03c      	b.n	8003970 <HAL_RCC_OscConfig+0x9ac>
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	10908120 	.word	0x10908120
 8003900:	40007000 	.word	0x40007000
 8003904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003908:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10c      	bne.n	800392e <HAL_RCC_OscConfig+0x96a>
 8003914:	4bc1      	ldr	r3, [pc, #772]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	4ac0      	ldr	r2, [pc, #768]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	6213      	str	r3, [r2, #32]
 8003920:	4bbe      	ldr	r3, [pc, #760]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	4abd      	ldr	r2, [pc, #756]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 8003926:	f023 0304 	bic.w	r3, r3, #4
 800392a:	6213      	str	r3, [r2, #32]
 800392c:	e020      	b.n	8003970 <HAL_RCC_OscConfig+0x9ac>
 800392e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003932:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0x994>
 800393e:	4bb7      	ldr	r3, [pc, #732]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	4ab6      	ldr	r2, [pc, #728]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 8003944:	f043 0304 	orr.w	r3, r3, #4
 8003948:	6213      	str	r3, [r2, #32]
 800394a:	4bb4      	ldr	r3, [pc, #720]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	4ab3      	ldr	r2, [pc, #716]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6213      	str	r3, [r2, #32]
 8003956:	e00b      	b.n	8003970 <HAL_RCC_OscConfig+0x9ac>
 8003958:	4bb0      	ldr	r3, [pc, #704]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	4aaf      	ldr	r2, [pc, #700]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 800395e:	f023 0301 	bic.w	r3, r3, #1
 8003962:	6213      	str	r3, [r2, #32]
 8003964:	4bad      	ldr	r3, [pc, #692]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	4aac      	ldr	r2, [pc, #688]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 800396a:	f023 0304 	bic.w	r3, r3, #4
 800396e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003974:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 8081 	beq.w	8003a84 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003982:	f7fe f8b7 	bl	8001af4 <HAL_GetTick>
 8003986:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398a:	e00b      	b.n	80039a4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800398c:	f7fe f8b2 	bl	8001af4 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	f241 3288 	movw	r2, #5000	; 0x1388
 800399c:	4293      	cmp	r3, r2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e345      	b.n	8004030 <HAL_RCC_OscConfig+0x106c>
 80039a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80039ac:	2202      	movs	r2, #2
 80039ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	fa93 f2a3 	rbit	r2, r3
 80039be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80039d0:	2202      	movs	r2, #2
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	fa93 f2a3 	rbit	r2, r3
 80039e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80039ea:	601a      	str	r2, [r3, #0]
  return result;
 80039ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80039f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f043 0302 	orr.w	r3, r3, #2
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d102      	bne.n	8003a10 <HAL_RCC_OscConfig+0xa4c>
 8003a0a:	4b84      	ldr	r3, [pc, #528]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	e013      	b.n	8003a38 <HAL_RCC_OscConfig+0xa74>
 8003a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a14:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a18:	2202      	movs	r2, #2
 8003a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a20:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	fa93 f2a3 	rbit	r2, r3
 8003a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	4b79      	ldr	r3, [pc, #484]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a3c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003a40:	2102      	movs	r1, #2
 8003a42:	6011      	str	r1, [r2, #0]
 8003a44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a48:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003a4c:	6812      	ldr	r2, [r2, #0]
 8003a4e:	fa92 f1a2 	rbit	r1, r2
 8003a52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a56:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a5a:	6011      	str	r1, [r2, #0]
  return result;
 8003a5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a60:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a64:	6812      	ldr	r2, [r2, #0]
 8003a66:	fab2 f282 	clz	r2, r2
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	f002 021f 	and.w	r2, r2, #31
 8003a76:	2101      	movs	r1, #1
 8003a78:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d084      	beq.n	800398c <HAL_RCC_OscConfig+0x9c8>
 8003a82:	e07f      	b.n	8003b84 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a84:	f7fe f836 	bl	8001af4 <HAL_GetTick>
 8003a88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8c:	e00b      	b.n	8003aa6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fe f831 	bl	8001af4 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e2c4      	b.n	8004030 <HAL_RCC_OscConfig+0x106c>
 8003aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aaa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003aae:	2202      	movs	r2, #2
 8003ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	fa93 f2a3 	rbit	r2, r3
 8003ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ace:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ada:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	fa93 f2a3 	rbit	r2, r3
 8003ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003aec:	601a      	str	r2, [r3, #0]
  return result;
 8003aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003af6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af8:	fab3 f383 	clz	r3, r3
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f043 0302 	orr.w	r3, r3, #2
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d102      	bne.n	8003b12 <HAL_RCC_OscConfig+0xb4e>
 8003b0c:	4b43      	ldr	r3, [pc, #268]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	e013      	b.n	8003b3a <HAL_RCC_OscConfig+0xb76>
 8003b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b16:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b22:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	fa93 f2a3 	rbit	r2, r3
 8003b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b30:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	4b39      	ldr	r3, [pc, #228]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b3e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003b42:	2102      	movs	r1, #2
 8003b44:	6011      	str	r1, [r2, #0]
 8003b46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b4a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	fa92 f1a2 	rbit	r1, r2
 8003b54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b58:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b5c:	6011      	str	r1, [r2, #0]
  return result;
 8003b5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b62:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	fab2 f282 	clz	r2, r2
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	f002 021f 	and.w	r2, r2, #31
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d184      	bne.n	8003a8e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b84:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d105      	bne.n	8003b98 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8c:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	4a22      	ldr	r2, [pc, #136]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 8003b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8242 	beq.w	800402e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003baa:	4b1c      	ldr	r3, [pc, #112]	; (8003c1c <HAL_RCC_OscConfig+0xc58>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	f000 8213 	beq.w	8003fde <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	f040 8162 	bne.w	8003e8e <HAL_RCC_OscConfig+0xeca>
 8003bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003bd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bdc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	fa93 f2a3 	rbit	r2, r3
 8003be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003bee:	601a      	str	r2, [r3, #0]
  return result;
 8003bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003bf8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfa:	fab3 f383 	clz	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c10:	f7fd ff70 	bl	8001af4 <HAL_GetTick>
 8003c14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c18:	e00c      	b.n	8003c34 <HAL_RCC_OscConfig+0xc70>
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c20:	f7fd ff68 	bl	8001af4 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e1fd      	b.n	8004030 <HAL_RCC_OscConfig+0x106c>
 8003c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c38:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c46:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	fa93 f2a3 	rbit	r2, r3
 8003c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c54:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c58:	601a      	str	r2, [r3, #0]
  return result;
 8003c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c64:	fab3 f383 	clz	r3, r3
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d102      	bne.n	8003c7e <HAL_RCC_OscConfig+0xcba>
 8003c78:	4bb0      	ldr	r3, [pc, #704]	; (8003f3c <HAL_RCC_OscConfig+0xf78>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	e027      	b.n	8003cce <HAL_RCC_OscConfig+0xd0a>
 8003c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c82:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c90:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	fa93 f2a3 	rbit	r2, r3
 8003c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	fa93 f2a3 	rbit	r2, r3
 8003cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	4b9c      	ldr	r3, [pc, #624]	; (8003f3c <HAL_RCC_OscConfig+0xf78>)
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cd2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003cd6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003cda:	6011      	str	r1, [r2, #0]
 8003cdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ce0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	fa92 f1a2 	rbit	r1, r2
 8003cea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003cf2:	6011      	str	r1, [r2, #0]
  return result;
 8003cf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cf8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003cfc:	6812      	ldr	r2, [r2, #0]
 8003cfe:	fab2 f282 	clz	r2, r2
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	f042 0220 	orr.w	r2, r2, #32
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	f002 021f 	and.w	r2, r2, #31
 8003d0e:	2101      	movs	r1, #1
 8003d10:	fa01 f202 	lsl.w	r2, r1, r2
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d182      	bne.n	8003c20 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d1a:	4b88      	ldr	r3, [pc, #544]	; (8003f3c <HAL_RCC_OscConfig+0xf78>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	497f      	ldr	r1, [pc, #508]	; (8003f3c <HAL_RCC_OscConfig+0xf78>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	604b      	str	r3, [r1, #4]
 8003d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d46:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003d4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d54:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	fa93 f2a3 	rbit	r2, r3
 8003d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d62:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003d66:	601a      	str	r2, [r3, #0]
  return result;
 8003d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003d70:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	461a      	mov	r2, r3
 8003d84:	2301      	movs	r3, #1
 8003d86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d88:	f7fd feb4 	bl	8001af4 <HAL_GetTick>
 8003d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d90:	e009      	b.n	8003da6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d92:	f7fd feaf 	bl	8001af4 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e144      	b.n	8004030 <HAL_RCC_OscConfig+0x106c>
 8003da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003daa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003dae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	fa93 f2a3 	rbit	r2, r3
 8003dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003dca:	601a      	str	r2, [r3, #0]
  return result;
 8003dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003dd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dd6:	fab3 f383 	clz	r3, r3
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d102      	bne.n	8003df0 <HAL_RCC_OscConfig+0xe2c>
 8003dea:	4b54      	ldr	r3, [pc, #336]	; (8003f3c <HAL_RCC_OscConfig+0xf78>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	e027      	b.n	8003e40 <HAL_RCC_OscConfig+0xe7c>
 8003df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003df8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e02:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	fa93 f2a3 	rbit	r2, r3
 8003e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e10:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e28:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	fa93 f2a3 	rbit	r2, r3
 8003e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e36:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	4b3f      	ldr	r3, [pc, #252]	; (8003f3c <HAL_RCC_OscConfig+0xf78>)
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e44:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003e48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e4c:	6011      	str	r1, [r2, #0]
 8003e4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e52:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	fa92 f1a2 	rbit	r1, r2
 8003e5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e60:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003e64:	6011      	str	r1, [r2, #0]
  return result;
 8003e66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e6a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	fab2 f282 	clz	r2, r2
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	f042 0220 	orr.w	r2, r2, #32
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	f002 021f 	and.w	r2, r2, #31
 8003e80:	2101      	movs	r1, #1
 8003e82:	fa01 f202 	lsl.w	r2, r1, r2
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d082      	beq.n	8003d92 <HAL_RCC_OscConfig+0xdce>
 8003e8c:	e0cf      	b.n	800402e <HAL_RCC_OscConfig+0x106a>
 8003e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e92:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003e96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	fa93 f2a3 	rbit	r2, r3
 8003eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003eb2:	601a      	str	r2, [r3, #0]
  return result;
 8003eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ebc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ec8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	461a      	mov	r2, r3
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fd fe0e 	bl	8001af4 <HAL_GetTick>
 8003ed8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003edc:	e009      	b.n	8003ef2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ede:	f7fd fe09 	bl	8001af4 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e09e      	b.n	8004030 <HAL_RCC_OscConfig+0x106c>
 8003ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003efa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f04:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	fa93 f2a3 	rbit	r2, r3
 8003f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f12:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f16:	601a      	str	r2, [r3, #0]
  return result;
 8003f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f22:	fab3 f383 	clz	r3, r3
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d104      	bne.n	8003f40 <HAL_RCC_OscConfig+0xf7c>
 8003f36:	4b01      	ldr	r3, [pc, #4]	; (8003f3c <HAL_RCC_OscConfig+0xf78>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	e029      	b.n	8003f90 <HAL_RCC_OscConfig+0xfcc>
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f44:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f52:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	fa93 f2a3 	rbit	r2, r3
 8003f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f60:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003f6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f78:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	fa93 f2a3 	rbit	r2, r3
 8003f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f86:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	4b2b      	ldr	r3, [pc, #172]	; (800403c <HAL_RCC_OscConfig+0x1078>)
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f94:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003f98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f9c:	6011      	str	r1, [r2, #0]
 8003f9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fa2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	fa92 f1a2 	rbit	r1, r2
 8003fac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fb0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003fb4:	6011      	str	r1, [r2, #0]
  return result;
 8003fb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	fab2 f282 	clz	r2, r2
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	f042 0220 	orr.w	r2, r2, #32
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	f002 021f 	and.w	r2, r2, #31
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d180      	bne.n	8003ede <HAL_RCC_OscConfig+0xf1a>
 8003fdc:	e027      	b.n	800402e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e01e      	b.n	8004030 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <HAL_RCC_OscConfig+0x1078>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ffa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ffe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	429a      	cmp	r2, r3
 8004010:	d10b      	bne.n	800402a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004012:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004016:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800401a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004026:	429a      	cmp	r2, r3
 8004028:	d001      	beq.n	800402e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40021000 	.word	0x40021000

08004040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b09e      	sub	sp, #120	; 0x78
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e162      	b.n	800431e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004058:	4b90      	ldr	r3, [pc, #576]	; (800429c <HAL_RCC_ClockConfig+0x25c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d910      	bls.n	8004088 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004066:	4b8d      	ldr	r3, [pc, #564]	; (800429c <HAL_RCC_ClockConfig+0x25c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 0207 	bic.w	r2, r3, #7
 800406e:	498b      	ldr	r1, [pc, #556]	; (800429c <HAL_RCC_ClockConfig+0x25c>)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	4313      	orrs	r3, r2
 8004074:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004076:	4b89      	ldr	r3, [pc, #548]	; (800429c <HAL_RCC_ClockConfig+0x25c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d001      	beq.n	8004088 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e14a      	b.n	800431e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004094:	4b82      	ldr	r3, [pc, #520]	; (80042a0 <HAL_RCC_ClockConfig+0x260>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	497f      	ldr	r1, [pc, #508]	; (80042a0 <HAL_RCC_ClockConfig+0x260>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 80dc 	beq.w	800426c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d13c      	bne.n	8004136 <HAL_RCC_ClockConfig+0xf6>
 80040bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040c4:	fa93 f3a3 	rbit	r3, r3
 80040c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80040ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040cc:	fab3 f383 	clz	r3, r3
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d102      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xa6>
 80040e0:	4b6f      	ldr	r3, [pc, #444]	; (80042a0 <HAL_RCC_ClockConfig+0x260>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	e00f      	b.n	8004106 <HAL_RCC_ClockConfig+0xc6>
 80040e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040ee:	fa93 f3a3 	rbit	r3, r3
 80040f2:	667b      	str	r3, [r7, #100]	; 0x64
 80040f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040f8:	663b      	str	r3, [r7, #96]	; 0x60
 80040fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004102:	4b67      	ldr	r3, [pc, #412]	; (80042a0 <HAL_RCC_ClockConfig+0x260>)
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800410a:	65ba      	str	r2, [r7, #88]	; 0x58
 800410c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800410e:	fa92 f2a2 	rbit	r2, r2
 8004112:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004114:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004116:	fab2 f282 	clz	r2, r2
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	f042 0220 	orr.w	r2, r2, #32
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	f002 021f 	and.w	r2, r2, #31
 8004126:	2101      	movs	r1, #1
 8004128:	fa01 f202 	lsl.w	r2, r1, r2
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d17b      	bne.n	800422a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e0f3      	b.n	800431e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d13c      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x178>
 800413e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004142:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004146:	fa93 f3a3 	rbit	r3, r3
 800414a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800414c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	d102      	bne.n	8004168 <HAL_RCC_ClockConfig+0x128>
 8004162:	4b4f      	ldr	r3, [pc, #316]	; (80042a0 <HAL_RCC_ClockConfig+0x260>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	e00f      	b.n	8004188 <HAL_RCC_ClockConfig+0x148>
 8004168:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800416c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004170:	fa93 f3a3 	rbit	r3, r3
 8004174:	647b      	str	r3, [r7, #68]	; 0x44
 8004176:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800417a:	643b      	str	r3, [r7, #64]	; 0x40
 800417c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004184:	4b46      	ldr	r3, [pc, #280]	; (80042a0 <HAL_RCC_ClockConfig+0x260>)
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800418c:	63ba      	str	r2, [r7, #56]	; 0x38
 800418e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004190:	fa92 f2a2 	rbit	r2, r2
 8004194:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004198:	fab2 f282 	clz	r2, r2
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	f042 0220 	orr.w	r2, r2, #32
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	f002 021f 	and.w	r2, r2, #31
 80041a8:	2101      	movs	r1, #1
 80041aa:	fa01 f202 	lsl.w	r2, r1, r2
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d13a      	bne.n	800422a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0b2      	b.n	800431e <HAL_RCC_ClockConfig+0x2de>
 80041b8:	2302      	movs	r3, #2
 80041ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d102      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x1a0>
 80041da:	4b31      	ldr	r3, [pc, #196]	; (80042a0 <HAL_RCC_ClockConfig+0x260>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	e00d      	b.n	80041fc <HAL_RCC_ClockConfig+0x1bc>
 80041e0:	2302      	movs	r3, #2
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	fa93 f3a3 	rbit	r3, r3
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
 80041ec:	2302      	movs	r3, #2
 80041ee:	623b      	str	r3, [r7, #32]
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	fa93 f3a3 	rbit	r3, r3
 80041f6:	61fb      	str	r3, [r7, #28]
 80041f8:	4b29      	ldr	r3, [pc, #164]	; (80042a0 <HAL_RCC_ClockConfig+0x260>)
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	2202      	movs	r2, #2
 80041fe:	61ba      	str	r2, [r7, #24]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	fa92 f2a2 	rbit	r2, r2
 8004206:	617a      	str	r2, [r7, #20]
  return result;
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	fab2 f282 	clz	r2, r2
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	f042 0220 	orr.w	r2, r2, #32
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	f002 021f 	and.w	r2, r2, #31
 800421a:	2101      	movs	r1, #1
 800421c:	fa01 f202 	lsl.w	r2, r1, r2
 8004220:	4013      	ands	r3, r2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e079      	b.n	800431e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800422a:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <HAL_RCC_ClockConfig+0x260>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f023 0203 	bic.w	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	491a      	ldr	r1, [pc, #104]	; (80042a0 <HAL_RCC_ClockConfig+0x260>)
 8004238:	4313      	orrs	r3, r2
 800423a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800423c:	f7fd fc5a 	bl	8001af4 <HAL_GetTick>
 8004240:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	e00a      	b.n	800425a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004244:	f7fd fc56 	bl	8001af4 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004252:	4293      	cmp	r3, r2
 8004254:	d901      	bls.n	800425a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e061      	b.n	800431e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <HAL_RCC_ClockConfig+0x260>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 020c 	and.w	r2, r3, #12
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	429a      	cmp	r2, r3
 800426a:	d1eb      	bne.n	8004244 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800426c:	4b0b      	ldr	r3, [pc, #44]	; (800429c <HAL_RCC_ClockConfig+0x25c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d214      	bcs.n	80042a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427a:	4b08      	ldr	r3, [pc, #32]	; (800429c <HAL_RCC_ClockConfig+0x25c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 0207 	bic.w	r2, r3, #7
 8004282:	4906      	ldr	r1, [pc, #24]	; (800429c <HAL_RCC_ClockConfig+0x25c>)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	4313      	orrs	r3, r2
 8004288:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800428a:	4b04      	ldr	r3, [pc, #16]	; (800429c <HAL_RCC_ClockConfig+0x25c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d005      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e040      	b.n	800431e <HAL_RCC_ClockConfig+0x2de>
 800429c:	40022000 	.word	0x40022000
 80042a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b0:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <HAL_RCC_ClockConfig+0x2e8>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	491a      	ldr	r1, [pc, #104]	; (8004328 <HAL_RCC_ClockConfig+0x2e8>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d009      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ce:	4b16      	ldr	r3, [pc, #88]	; (8004328 <HAL_RCC_ClockConfig+0x2e8>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4912      	ldr	r1, [pc, #72]	; (8004328 <HAL_RCC_ClockConfig+0x2e8>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042e2:	f000 f829 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 80042e6:	4601      	mov	r1, r0
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <HAL_RCC_ClockConfig+0x2e8>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042f0:	22f0      	movs	r2, #240	; 0xf0
 80042f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	fa92 f2a2 	rbit	r2, r2
 80042fa:	60fa      	str	r2, [r7, #12]
  return result;
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	fab2 f282 	clz	r2, r2
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	40d3      	lsrs	r3, r2
 8004306:	4a09      	ldr	r2, [pc, #36]	; (800432c <HAL_RCC_ClockConfig+0x2ec>)
 8004308:	5cd3      	ldrb	r3, [r2, r3]
 800430a:	fa21 f303 	lsr.w	r3, r1, r3
 800430e:	4a08      	ldr	r2, [pc, #32]	; (8004330 <HAL_RCC_ClockConfig+0x2f0>)
 8004310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <HAL_RCC_ClockConfig+0x2f4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7fd fba8 	bl	8001a6c <HAL_InitTick>
  
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3778      	adds	r7, #120	; 0x78
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40021000 	.word	0x40021000
 800432c:	08009214 	.word	0x08009214
 8004330:	20000000 	.word	0x20000000
 8004334:	20000004 	.word	0x20000004

08004338 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	2300      	movs	r3, #0
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	2300      	movs	r3, #0
 800434c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004352:	4b1e      	ldr	r3, [pc, #120]	; (80043cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b04      	cmp	r3, #4
 8004360:	d002      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0x30>
 8004362:	2b08      	cmp	r3, #8
 8004364:	d003      	beq.n	800436e <HAL_RCC_GetSysClockFreq+0x36>
 8004366:	e026      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004368:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800436a:	613b      	str	r3, [r7, #16]
      break;
 800436c:	e026      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	0c9b      	lsrs	r3, r3, #18
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	4a17      	ldr	r2, [pc, #92]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004378:	5cd3      	ldrb	r3, [r2, r3]
 800437a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800437c:	4b13      	ldr	r3, [pc, #76]	; (80043cc <HAL_RCC_GetSysClockFreq+0x94>)
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004386:	5cd3      	ldrb	r3, [r2, r3]
 8004388:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004394:	4a0e      	ldr	r2, [pc, #56]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	fbb2 f2f3 	udiv	r2, r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	e004      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a0c      	ldr	r2, [pc, #48]	; (80043dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	613b      	str	r3, [r7, #16]
      break;
 80043b4:	e002      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80043b8:	613b      	str	r3, [r7, #16]
      break;
 80043ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043bc:	693b      	ldr	r3, [r7, #16]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000
 80043d0:	007a1200 	.word	0x007a1200
 80043d4:	0800922c 	.word	0x0800922c
 80043d8:	0800923c 	.word	0x0800923c
 80043dc:	003d0900 	.word	0x003d0900

080043e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043e6:	681b      	ldr	r3, [r3, #0]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000000 	.word	0x20000000

080043f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80043fe:	f7ff ffef 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 8004402:	4601      	mov	r1, r0
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800440c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004410:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	fa92 f2a2 	rbit	r2, r2
 8004418:	603a      	str	r2, [r7, #0]
  return result;
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	fab2 f282 	clz	r2, r2
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	40d3      	lsrs	r3, r2
 8004424:	4a04      	ldr	r2, [pc, #16]	; (8004438 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004426:	5cd3      	ldrb	r3, [r2, r3]
 8004428:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	08009224 	.word	0x08009224

0800443c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004442:	f7ff ffcd 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 8004446:	4601      	mov	r1, r0
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004450:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004454:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	fa92 f2a2 	rbit	r2, r2
 800445c:	603a      	str	r2, [r7, #0]
  return result;
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	fab2 f282 	clz	r2, r2
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	40d3      	lsrs	r3, r2
 8004468:	4a04      	ldr	r2, [pc, #16]	; (800447c <HAL_RCC_GetPCLK2Freq+0x40>)
 800446a:	5cd3      	ldrb	r3, [r2, r3]
 800446c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40021000 	.word	0x40021000
 800447c:	08009224 	.word	0x08009224

08004480 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b092      	sub	sp, #72	; 0x48
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004490:	2300      	movs	r3, #0
 8004492:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 80cd 	beq.w	800463e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a4:	4b86      	ldr	r3, [pc, #536]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10e      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b0:	4b83      	ldr	r3, [pc, #524]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	4a82      	ldr	r2, [pc, #520]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ba:	61d3      	str	r3, [r2, #28]
 80044bc:	4b80      	ldr	r3, [pc, #512]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ce:	4b7d      	ldr	r3, [pc, #500]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d118      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044da:	4b7a      	ldr	r3, [pc, #488]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a79      	ldr	r2, [pc, #484]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e6:	f7fd fb05 	bl	8001af4 <HAL_GetTick>
 80044ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ec:	e008      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ee:	f7fd fb01 	bl	8001af4 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b64      	cmp	r3, #100	; 0x64
 80044fa:	d901      	bls.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e0db      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004500:	4b70      	ldr	r3, [pc, #448]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f0      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800450c:	4b6c      	ldr	r3, [pc, #432]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004514:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d07d      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004524:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004526:	429a      	cmp	r2, r3
 8004528:	d076      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800452a:	4b65      	ldr	r3, [pc, #404]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004538:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453c:	fa93 f3a3 	rbit	r3, r3
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004544:	fab3 f383 	clz	r3, r3
 8004548:	b2db      	uxtb	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	4b5e      	ldr	r3, [pc, #376]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	461a      	mov	r2, r3
 8004554:	2301      	movs	r3, #1
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800455c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	fa93 f3a3 	rbit	r3, r3
 8004564:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004568:	fab3 f383 	clz	r3, r3
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	4b55      	ldr	r3, [pc, #340]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	461a      	mov	r2, r3
 8004578:	2300      	movs	r3, #0
 800457a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800457c:	4a50      	ldr	r2, [pc, #320]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800457e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004580:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d045      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fd fab2 	bl	8001af4 <HAL_GetTick>
 8004590:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004592:	e00a      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004594:	f7fd faae 	bl	8001af4 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e086      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80045aa:	2302      	movs	r3, #2
 80045ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	fa93 f3a3 	rbit	r3, r3
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
 80045b6:	2302      	movs	r3, #2
 80045b8:	623b      	str	r3, [r7, #32]
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	fa93 f3a3 	rbit	r3, r3
 80045c0:	61fb      	str	r3, [r7, #28]
  return result;
 80045c2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c4:	fab3 f383 	clz	r3, r3
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	f043 0302 	orr.w	r3, r3, #2
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d102      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80045d8:	4b39      	ldr	r3, [pc, #228]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	e007      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80045de:	2302      	movs	r3, #2
 80045e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	fa93 f3a3 	rbit	r3, r3
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	4b35      	ldr	r3, [pc, #212]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2202      	movs	r2, #2
 80045f0:	613a      	str	r2, [r7, #16]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	fa92 f2a2 	rbit	r2, r2
 80045f8:	60fa      	str	r2, [r7, #12]
  return result;
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	fab2 f282 	clz	r2, r2
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	f002 021f 	and.w	r2, r2, #31
 800460c:	2101      	movs	r1, #1
 800460e:	fa01 f202 	lsl.w	r2, r1, r2
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0bd      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004618:	4b29      	ldr	r3, [pc, #164]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	4926      	ldr	r1, [pc, #152]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004626:	4313      	orrs	r3, r2
 8004628:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800462a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800462e:	2b01      	cmp	r3, #1
 8004630:	d105      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004632:	4b23      	ldr	r3, [pc, #140]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	4a22      	ldr	r2, [pc, #136]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800463c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800464a:	4b1d      	ldr	r3, [pc, #116]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	f023 0203 	bic.w	r2, r3, #3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	491a      	ldr	r1, [pc, #104]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004658:	4313      	orrs	r3, r2
 800465a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d008      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004668:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	f023 0210 	bic.w	r2, r3, #16
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4912      	ldr	r1, [pc, #72]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004676:	4313      	orrs	r3, r2
 8004678:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004682:	2b00      	cmp	r3, #0
 8004684:	d008      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004686:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	490b      	ldr	r1, [pc, #44]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004694:	4313      	orrs	r3, r2
 8004696:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80046a4:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	4903      	ldr	r1, [pc, #12]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3748      	adds	r7, #72	; 0x48
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40021000 	.word	0x40021000
 80046c4:	40007000 	.word	0x40007000
 80046c8:	10908100 	.word	0x10908100

080046cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e049      	b.n	8004772 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fc fff4 	bl	80016e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3304      	adds	r3, #4
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f000 fa86 	bl	8004c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	d001      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e040      	b.n	8004816 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1c      	ldr	r2, [pc, #112]	; (8004824 <HAL_TIM_Base_Start_IT+0xa8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00e      	beq.n	80047d4 <HAL_TIM_Base_Start_IT+0x58>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047be:	d009      	beq.n	80047d4 <HAL_TIM_Base_Start_IT+0x58>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a18      	ldr	r2, [pc, #96]	; (8004828 <HAL_TIM_Base_Start_IT+0xac>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d004      	beq.n	80047d4 <HAL_TIM_Base_Start_IT+0x58>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a17      	ldr	r2, [pc, #92]	; (800482c <HAL_TIM_Base_Start_IT+0xb0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d115      	bne.n	8004800 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	4b15      	ldr	r3, [pc, #84]	; (8004830 <HAL_TIM_Base_Start_IT+0xb4>)
 80047dc:	4013      	ands	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b06      	cmp	r3, #6
 80047e4:	d015      	beq.n	8004812 <HAL_TIM_Base_Start_IT+0x96>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ec:	d011      	beq.n	8004812 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0201 	orr.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fe:	e008      	b.n	8004812 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e000      	b.n	8004814 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004812:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40000400 	.word	0x40000400
 800482c:	40014000 	.word	0x40014000
 8004830:	00010007 	.word	0x00010007

08004834 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d020      	beq.n	8004898 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01b      	beq.n	8004898 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0202 	mvn.w	r2, #2
 8004868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f9ad 	bl	8004bde <HAL_TIM_IC_CaptureCallback>
 8004884:	e005      	b.n	8004892 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f99f 	bl	8004bca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f9b0 	bl	8004bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d020      	beq.n	80048e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01b      	beq.n	80048e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0204 	mvn.w	r2, #4
 80048b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2202      	movs	r2, #2
 80048ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f987 	bl	8004bde <HAL_TIM_IC_CaptureCallback>
 80048d0:	e005      	b.n	80048de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f979 	bl	8004bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f98a 	bl	8004bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d020      	beq.n	8004930 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01b      	beq.n	8004930 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0208 	mvn.w	r2, #8
 8004900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2204      	movs	r2, #4
 8004906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f961 	bl	8004bde <HAL_TIM_IC_CaptureCallback>
 800491c:	e005      	b.n	800492a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f953 	bl	8004bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f964 	bl	8004bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	2b00      	cmp	r3, #0
 8004938:	d020      	beq.n	800497c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01b      	beq.n	800497c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0210 	mvn.w	r2, #16
 800494c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2208      	movs	r2, #8
 8004952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f93b 	bl	8004bde <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f92d 	bl	8004bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f93e 	bl	8004bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00c      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d007      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0201 	mvn.w	r2, #1
 8004998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fc fa5c 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00c      	beq.n	80049c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d007      	beq.n	80049c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fac2 	bl	8004f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00c      	beq.n	80049e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 faba 	bl	8004f5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00c      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d007      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f8fd 	bl	8004c06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00c      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0220 	mvn.w	r2, #32
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fa82 	bl	8004f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_TIM_ConfigClockSource+0x1c>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e0b6      	b.n	8004bc2 <HAL_TIM_ConfigClockSource+0x18a>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a90:	d03e      	beq.n	8004b10 <HAL_TIM_ConfigClockSource+0xd8>
 8004a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a96:	f200 8087 	bhi.w	8004ba8 <HAL_TIM_ConfigClockSource+0x170>
 8004a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9e:	f000 8086 	beq.w	8004bae <HAL_TIM_ConfigClockSource+0x176>
 8004aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa6:	d87f      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x170>
 8004aa8:	2b70      	cmp	r3, #112	; 0x70
 8004aaa:	d01a      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0xaa>
 8004aac:	2b70      	cmp	r3, #112	; 0x70
 8004aae:	d87b      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x170>
 8004ab0:	2b60      	cmp	r3, #96	; 0x60
 8004ab2:	d050      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x11e>
 8004ab4:	2b60      	cmp	r3, #96	; 0x60
 8004ab6:	d877      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x170>
 8004ab8:	2b50      	cmp	r3, #80	; 0x50
 8004aba:	d03c      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0xfe>
 8004abc:	2b50      	cmp	r3, #80	; 0x50
 8004abe:	d873      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x170>
 8004ac0:	2b40      	cmp	r3, #64	; 0x40
 8004ac2:	d058      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x13e>
 8004ac4:	2b40      	cmp	r3, #64	; 0x40
 8004ac6:	d86f      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x170>
 8004ac8:	2b30      	cmp	r3, #48	; 0x30
 8004aca:	d064      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x15e>
 8004acc:	2b30      	cmp	r3, #48	; 0x30
 8004ace:	d86b      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x170>
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d060      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x15e>
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d867      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x170>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d05c      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x15e>
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d05a      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x15e>
 8004ae0:	e062      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004af2:	f000 f991 	bl	8004e18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	609a      	str	r2, [r3, #8]
      break;
 8004b0e:	e04f      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b20:	f000 f97a 	bl	8004e18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b32:	609a      	str	r2, [r3, #8]
      break;
 8004b34:	e03c      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b42:	461a      	mov	r2, r3
 8004b44:	f000 f8ee 	bl	8004d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2150      	movs	r1, #80	; 0x50
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f947 	bl	8004de2 <TIM_ITRx_SetConfig>
      break;
 8004b54:	e02c      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b62:	461a      	mov	r2, r3
 8004b64:	f000 f90d 	bl	8004d82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2160      	movs	r1, #96	; 0x60
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f937 	bl	8004de2 <TIM_ITRx_SetConfig>
      break;
 8004b74:	e01c      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b82:	461a      	mov	r2, r3
 8004b84:	f000 f8ce 	bl	8004d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2140      	movs	r1, #64	; 0x40
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f927 	bl	8004de2 <TIM_ITRx_SetConfig>
      break;
 8004b94:	e00c      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f000 f91e 	bl	8004de2 <TIM_ITRx_SetConfig>
      break;
 8004ba6:	e003      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
      break;
 8004bac:	e000      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004bae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a38      	ldr	r2, [pc, #224]	; (8004d10 <TIM_Base_SetConfig+0xf4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d007      	beq.n	8004c44 <TIM_Base_SetConfig+0x28>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3a:	d003      	beq.n	8004c44 <TIM_Base_SetConfig+0x28>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a35      	ldr	r2, [pc, #212]	; (8004d14 <TIM_Base_SetConfig+0xf8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d108      	bne.n	8004c56 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2d      	ldr	r2, [pc, #180]	; (8004d10 <TIM_Base_SetConfig+0xf4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <TIM_Base_SetConfig+0x6a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c64:	d00f      	beq.n	8004c86 <TIM_Base_SetConfig+0x6a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a2a      	ldr	r2, [pc, #168]	; (8004d14 <TIM_Base_SetConfig+0xf8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00b      	beq.n	8004c86 <TIM_Base_SetConfig+0x6a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a29      	ldr	r2, [pc, #164]	; (8004d18 <TIM_Base_SetConfig+0xfc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d007      	beq.n	8004c86 <TIM_Base_SetConfig+0x6a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a28      	ldr	r2, [pc, #160]	; (8004d1c <TIM_Base_SetConfig+0x100>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d003      	beq.n	8004c86 <TIM_Base_SetConfig+0x6a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a27      	ldr	r2, [pc, #156]	; (8004d20 <TIM_Base_SetConfig+0x104>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d108      	bne.n	8004c98 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a14      	ldr	r2, [pc, #80]	; (8004d10 <TIM_Base_SetConfig+0xf4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00b      	beq.n	8004cdc <TIM_Base_SetConfig+0xc0>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <TIM_Base_SetConfig+0xfc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d007      	beq.n	8004cdc <TIM_Base_SetConfig+0xc0>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a13      	ldr	r2, [pc, #76]	; (8004d1c <TIM_Base_SetConfig+0x100>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <TIM_Base_SetConfig+0xc0>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a12      	ldr	r2, [pc, #72]	; (8004d20 <TIM_Base_SetConfig+0x104>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d103      	bne.n	8004ce4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d105      	bne.n	8004d02 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f023 0201 	bic.w	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	611a      	str	r2, [r3, #16]
  }
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40012c00 	.word	0x40012c00
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	40014400 	.word	0x40014400
 8004d20:	40014800 	.word	0x40014800

08004d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f023 0201 	bic.w	r2, r3, #1
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f023 030a 	bic.w	r3, r3, #10
 8004d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b087      	sub	sp, #28
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	f023 0210 	bic.w	r2, r3, #16
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	031b      	lsls	r3, r3, #12
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	621a      	str	r2, [r3, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b085      	sub	sp, #20
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f043 0307 	orr.w	r3, r3, #7
 8004e04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	609a      	str	r2, [r3, #8]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	021a      	lsls	r2, r3, #8
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	609a      	str	r2, [r3, #8]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e054      	b.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a24      	ldr	r2, [pc, #144]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d108      	bne.n	8004eac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ea0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a17      	ldr	r2, [pc, #92]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00e      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed8:	d009      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a13      	ldr	r2, [pc, #76]	; (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d004      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a11      	ldr	r2, [pc, #68]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d10c      	bne.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40012c00 	.word	0x40012c00
 8004f2c:	40000400 	.word	0x40000400
 8004f30:	40014000 	.word	0x40014000

08004f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e040      	b.n	8005004 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fc fbc8 	bl	8001728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2224      	movs	r2, #36	; 0x24
 8004f9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0201 	bic.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fd32 	bl	8005a20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fbf9 	bl	80057b4 <UART_SetConfig>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e01b      	b.n	8005004 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fdb1 	bl	8005b64 <UART_CheckIdleState>
 8005002:	4603      	mov	r3, r0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08a      	sub	sp, #40	; 0x28
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	4613      	mov	r3, r2
 800501a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005020:	2b20      	cmp	r3, #32
 8005022:	d178      	bne.n	8005116 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_UART_Transmit+0x24>
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e071      	b.n	8005118 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2221      	movs	r2, #33	; 0x21
 8005040:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005042:	f7fc fd57 	bl	8001af4 <HAL_GetTick>
 8005046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	88fa      	ldrh	r2, [r7, #6]
 8005054:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005060:	d108      	bne.n	8005074 <HAL_UART_Transmit+0x68>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d104      	bne.n	8005074 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	61bb      	str	r3, [r7, #24]
 8005072:	e003      	b.n	800507c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005078:	2300      	movs	r3, #0
 800507a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800507c:	e030      	b.n	80050e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2200      	movs	r2, #0
 8005086:	2180      	movs	r1, #128	; 0x80
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fe13 	bl	8005cb4 <UART_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d004      	beq.n	800509e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e03c      	b.n	8005118 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10b      	bne.n	80050bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	881a      	ldrh	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050b0:	b292      	uxth	r2, r2
 80050b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	3302      	adds	r3, #2
 80050b8:	61bb      	str	r3, [r7, #24]
 80050ba:	e008      	b.n	80050ce <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	781a      	ldrb	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	b292      	uxth	r2, r2
 80050c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	3301      	adds	r3, #1
 80050cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1c8      	bne.n	800507e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2200      	movs	r2, #0
 80050f4:	2140      	movs	r1, #64	; 0x40
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 fddc 	bl	8005cb4 <UART_WaitOnFlagUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d004      	beq.n	800510c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e005      	b.n	8005118 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2220      	movs	r2, #32
 8005110:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	e000      	b.n	8005118 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005116:	2302      	movs	r3, #2
  }
}
 8005118:	4618      	mov	r0, r3
 800511a:	3720      	adds	r7, #32
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08a      	sub	sp, #40	; 0x28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	4613      	mov	r3, r2
 800512c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005134:	2b20      	cmp	r3, #32
 8005136:	d132      	bne.n	800519e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_UART_Receive_IT+0x24>
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e02b      	b.n	80051a0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d018      	beq.n	800518e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	613b      	str	r3, [r7, #16]
   return(result);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	623b      	str	r3, [r7, #32]
 800517c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	69f9      	ldr	r1, [r7, #28]
 8005180:	6a3a      	ldr	r2, [r7, #32]
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	61bb      	str	r3, [r7, #24]
   return(result);
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e6      	bne.n	800515c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	461a      	mov	r2, r3
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 fdfb 	bl	8005d90 <UART_Start_Receive_IT>
 800519a:	4603      	mov	r3, r0
 800519c:	e000      	b.n	80051a0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800519e:	2302      	movs	r3, #2
  }
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3728      	adds	r7, #40	; 0x28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b0ba      	sub	sp, #232	; 0xe8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80051d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80051d6:	4013      	ands	r3, r2
 80051d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80051dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d115      	bne.n	8005210 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80051e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e8:	f003 0320 	and.w	r3, r3, #32
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00f      	beq.n	8005210 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d009      	beq.n	8005210 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 82ab 	beq.w	800575c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	4798      	blx	r3
      }
      return;
 800520e:	e2a5      	b.n	800575c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 8117 	beq.w	8005448 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800521a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d106      	bne.n	8005234 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005226:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800522a:	4b85      	ldr	r3, [pc, #532]	; (8005440 <HAL_UART_IRQHandler+0x298>)
 800522c:	4013      	ands	r3, r2
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 810a 	beq.w	8005448 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d011      	beq.n	8005264 <HAL_UART_IRQHandler+0xbc>
 8005240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00b      	beq.n	8005264 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2201      	movs	r2, #1
 8005252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525a:	f043 0201 	orr.w	r2, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d011      	beq.n	8005294 <HAL_UART_IRQHandler+0xec>
 8005270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00b      	beq.n	8005294 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2202      	movs	r2, #2
 8005282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528a:	f043 0204 	orr.w	r2, r3, #4
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d011      	beq.n	80052c4 <HAL_UART_IRQHandler+0x11c>
 80052a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00b      	beq.n	80052c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2204      	movs	r2, #4
 80052b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ba:	f043 0202 	orr.w	r2, r3, #2
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d017      	beq.n	8005300 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d4:	f003 0320 	and.w	r3, r3, #32
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d105      	bne.n	80052e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80052dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00b      	beq.n	8005300 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2208      	movs	r2, #8
 80052ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f6:	f043 0208 	orr.w	r2, r3, #8
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005308:	2b00      	cmp	r3, #0
 800530a:	d012      	beq.n	8005332 <HAL_UART_IRQHandler+0x18a>
 800530c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00c      	beq.n	8005332 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005328:	f043 0220 	orr.w	r2, r3, #32
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 8211 	beq.w	8005760 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800533e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00d      	beq.n	8005366 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800534a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b00      	cmp	r3, #0
 8005354:	d007      	beq.n	8005366 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800536c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537a:	2b40      	cmp	r3, #64	; 0x40
 800537c:	d005      	beq.n	800538a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800537e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005382:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005386:	2b00      	cmp	r3, #0
 8005388:	d04f      	beq.n	800542a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fdc6 	bl	8005f1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539a:	2b40      	cmp	r3, #64	; 0x40
 800539c:	d141      	bne.n	8005422 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3308      	adds	r3, #8
 80053a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3308      	adds	r3, #8
 80053c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1d9      	bne.n	800539e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d013      	beq.n	800541a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f6:	4a13      	ldr	r2, [pc, #76]	; (8005444 <HAL_UART_IRQHandler+0x29c>)
 80053f8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fc fd29 	bl	8001e56 <HAL_DMA_Abort_IT>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d017      	beq.n	800543a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800540e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005414:	4610      	mov	r0, r2
 8005416:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005418:	e00f      	b.n	800543a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f9b4 	bl	8005788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005420:	e00b      	b.n	800543a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f9b0 	bl	8005788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005428:	e007      	b.n	800543a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f9ac 	bl	8005788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005438:	e192      	b.n	8005760 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543a:	bf00      	nop
    return;
 800543c:	e190      	b.n	8005760 <HAL_UART_IRQHandler+0x5b8>
 800543e:	bf00      	nop
 8005440:	04000120 	.word	0x04000120
 8005444:	08005fe5 	.word	0x08005fe5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544c:	2b01      	cmp	r3, #1
 800544e:	f040 814b 	bne.w	80056e8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005456:	f003 0310 	and.w	r3, r3, #16
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 8144 	beq.w	80056e8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005464:	f003 0310 	and.w	r3, r3, #16
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 813d 	beq.w	80056e8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2210      	movs	r2, #16
 8005474:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005480:	2b40      	cmp	r3, #64	; 0x40
 8005482:	f040 80b5 	bne.w	80055f0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005492:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 8164 	beq.w	8005764 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054a6:	429a      	cmp	r2, r3
 80054a8:	f080 815c 	bcs.w	8005764 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	2b20      	cmp	r3, #32
 80054be:	f000 8086 	beq.w	80055ce <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054f0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1da      	bne.n	80054c2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3308      	adds	r3, #8
 8005512:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800551c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800551e:	f023 0301 	bic.w	r3, r3, #1
 8005522:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3308      	adds	r3, #8
 800552c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005530:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005534:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005538:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e1      	bne.n	800550c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3308      	adds	r3, #8
 800554e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800555a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3308      	adds	r3, #8
 8005568:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800556c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800556e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005570:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005572:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005574:	e841 2300 	strex	r3, r2, [r1]
 8005578:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800557a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1e3      	bne.n	8005548 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800559c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800559e:	f023 0310 	bic.w	r3, r3, #16
 80055a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80055b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e4      	bne.n	800558e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fc fc06 	bl	8001dda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2202      	movs	r2, #2
 80055d2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f8d7 	bl	800579c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055ee:	e0b9      	b.n	8005764 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800560a:	b29b      	uxth	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 80ab 	beq.w	8005768 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005612:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 80a6 	beq.w	8005768 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800562a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005630:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800563e:	647b      	str	r3, [r7, #68]	; 0x44
 8005640:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005644:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005646:	e841 2300 	strex	r3, r2, [r1]
 800564a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800564c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1e4      	bne.n	800561c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3308      	adds	r3, #8
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	623b      	str	r3, [r7, #32]
   return(result);
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3308      	adds	r3, #8
 8005672:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005676:	633a      	str	r2, [r7, #48]	; 0x30
 8005678:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800567c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e3      	bne.n	8005652 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0310 	bic.w	r3, r3, #16
 80056b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056c0:	61fb      	str	r3, [r7, #28]
 80056c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	69b9      	ldr	r1, [r7, #24]
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	617b      	str	r3, [r7, #20]
   return(result);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e4      	bne.n	800569e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f85b 	bl	800579c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056e6:	e03f      	b.n	8005768 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00e      	beq.n	8005712 <HAL_UART_IRQHandler+0x56a>
 80056f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005708:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fe52 	bl	80063b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005710:	e02d      	b.n	800576e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00e      	beq.n	800573c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800571e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005726:	2b00      	cmp	r3, #0
 8005728:	d008      	beq.n	800573c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800572e:	2b00      	cmp	r3, #0
 8005730:	d01c      	beq.n	800576c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	4798      	blx	r3
    }
    return;
 800573a:	e017      	b.n	800576c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800573c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005744:	2b00      	cmp	r3, #0
 8005746:	d012      	beq.n	800576e <HAL_UART_IRQHandler+0x5c6>
 8005748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800574c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00c      	beq.n	800576e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fc5b 	bl	8006010 <UART_EndTransmit_IT>
    return;
 800575a:	e008      	b.n	800576e <HAL_UART_IRQHandler+0x5c6>
      return;
 800575c:	bf00      	nop
 800575e:	e006      	b.n	800576e <HAL_UART_IRQHandler+0x5c6>
    return;
 8005760:	bf00      	nop
 8005762:	e004      	b.n	800576e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005764:	bf00      	nop
 8005766:	e002      	b.n	800576e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005768:	bf00      	nop
 800576a:	e000      	b.n	800576e <HAL_UART_IRQHandler+0x5c6>
    return;
 800576c:	bf00      	nop
  }

}
 800576e:	37e8      	adds	r7, #232	; 0xe8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	431a      	orrs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	4b8a      	ldr	r3, [pc, #552]	; (8005a08 <UART_SetConfig+0x254>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6812      	ldr	r2, [r2, #0]
 80057e6:	6979      	ldr	r1, [r7, #20]
 80057e8:	430b      	orrs	r3, r1
 80057ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	430a      	orrs	r2, r1
 8005824:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a78      	ldr	r2, [pc, #480]	; (8005a0c <UART_SetConfig+0x258>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d120      	bne.n	8005872 <UART_SetConfig+0xbe>
 8005830:	4b77      	ldr	r3, [pc, #476]	; (8005a10 <UART_SetConfig+0x25c>)
 8005832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005834:	f003 0303 	and.w	r3, r3, #3
 8005838:	2b03      	cmp	r3, #3
 800583a:	d817      	bhi.n	800586c <UART_SetConfig+0xb8>
 800583c:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <UART_SetConfig+0x90>)
 800583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005842:	bf00      	nop
 8005844:	08005855 	.word	0x08005855
 8005848:	08005861 	.word	0x08005861
 800584c:	08005867 	.word	0x08005867
 8005850:	0800585b 	.word	0x0800585b
 8005854:	2300      	movs	r3, #0
 8005856:	77fb      	strb	r3, [r7, #31]
 8005858:	e01d      	b.n	8005896 <UART_SetConfig+0xe2>
 800585a:	2302      	movs	r3, #2
 800585c:	77fb      	strb	r3, [r7, #31]
 800585e:	e01a      	b.n	8005896 <UART_SetConfig+0xe2>
 8005860:	2304      	movs	r3, #4
 8005862:	77fb      	strb	r3, [r7, #31]
 8005864:	e017      	b.n	8005896 <UART_SetConfig+0xe2>
 8005866:	2308      	movs	r3, #8
 8005868:	77fb      	strb	r3, [r7, #31]
 800586a:	e014      	b.n	8005896 <UART_SetConfig+0xe2>
 800586c:	2310      	movs	r3, #16
 800586e:	77fb      	strb	r3, [r7, #31]
 8005870:	e011      	b.n	8005896 <UART_SetConfig+0xe2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a67      	ldr	r2, [pc, #412]	; (8005a14 <UART_SetConfig+0x260>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d102      	bne.n	8005882 <UART_SetConfig+0xce>
 800587c:	2300      	movs	r3, #0
 800587e:	77fb      	strb	r3, [r7, #31]
 8005880:	e009      	b.n	8005896 <UART_SetConfig+0xe2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a64      	ldr	r2, [pc, #400]	; (8005a18 <UART_SetConfig+0x264>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d102      	bne.n	8005892 <UART_SetConfig+0xde>
 800588c:	2300      	movs	r3, #0
 800588e:	77fb      	strb	r3, [r7, #31]
 8005890:	e001      	b.n	8005896 <UART_SetConfig+0xe2>
 8005892:	2310      	movs	r3, #16
 8005894:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800589e:	d15a      	bne.n	8005956 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80058a0:	7ffb      	ldrb	r3, [r7, #31]
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d827      	bhi.n	80058f6 <UART_SetConfig+0x142>
 80058a6:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <UART_SetConfig+0xf8>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058d1 	.word	0x080058d1
 80058b0:	080058d9 	.word	0x080058d9
 80058b4:	080058e1 	.word	0x080058e1
 80058b8:	080058f7 	.word	0x080058f7
 80058bc:	080058e7 	.word	0x080058e7
 80058c0:	080058f7 	.word	0x080058f7
 80058c4:	080058f7 	.word	0x080058f7
 80058c8:	080058f7 	.word	0x080058f7
 80058cc:	080058ef 	.word	0x080058ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d0:	f7fe fd92 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 80058d4:	61b8      	str	r0, [r7, #24]
        break;
 80058d6:	e013      	b.n	8005900 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058d8:	f7fe fdb0 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 80058dc:	61b8      	str	r0, [r7, #24]
        break;
 80058de:	e00f      	b.n	8005900 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e0:	4b4e      	ldr	r3, [pc, #312]	; (8005a1c <UART_SetConfig+0x268>)
 80058e2:	61bb      	str	r3, [r7, #24]
        break;
 80058e4:	e00c      	b.n	8005900 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058e6:	f7fe fd27 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 80058ea:	61b8      	str	r0, [r7, #24]
        break;
 80058ec:	e008      	b.n	8005900 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058f2:	61bb      	str	r3, [r7, #24]
        break;
 80058f4:	e004      	b.n	8005900 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	77bb      	strb	r3, [r7, #30]
        break;
 80058fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d074      	beq.n	80059f0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	005a      	lsls	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	441a      	add	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	fbb2 f3f3 	udiv	r3, r2, r3
 800591a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2b0f      	cmp	r3, #15
 8005920:	d916      	bls.n	8005950 <UART_SetConfig+0x19c>
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005928:	d212      	bcs.n	8005950 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	b29b      	uxth	r3, r3
 800592e:	f023 030f 	bic.w	r3, r3, #15
 8005932:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	085b      	lsrs	r3, r3, #1
 8005938:	b29b      	uxth	r3, r3
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	b29a      	uxth	r2, r3
 8005940:	89fb      	ldrh	r3, [r7, #14]
 8005942:	4313      	orrs	r3, r2
 8005944:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	89fa      	ldrh	r2, [r7, #14]
 800594c:	60da      	str	r2, [r3, #12]
 800594e:	e04f      	b.n	80059f0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	77bb      	strb	r3, [r7, #30]
 8005954:	e04c      	b.n	80059f0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005956:	7ffb      	ldrb	r3, [r7, #31]
 8005958:	2b08      	cmp	r3, #8
 800595a:	d828      	bhi.n	80059ae <UART_SetConfig+0x1fa>
 800595c:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <UART_SetConfig+0x1b0>)
 800595e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005962:	bf00      	nop
 8005964:	08005989 	.word	0x08005989
 8005968:	08005991 	.word	0x08005991
 800596c:	08005999 	.word	0x08005999
 8005970:	080059af 	.word	0x080059af
 8005974:	0800599f 	.word	0x0800599f
 8005978:	080059af 	.word	0x080059af
 800597c:	080059af 	.word	0x080059af
 8005980:	080059af 	.word	0x080059af
 8005984:	080059a7 	.word	0x080059a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005988:	f7fe fd36 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 800598c:	61b8      	str	r0, [r7, #24]
        break;
 800598e:	e013      	b.n	80059b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005990:	f7fe fd54 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 8005994:	61b8      	str	r0, [r7, #24]
        break;
 8005996:	e00f      	b.n	80059b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005998:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <UART_SetConfig+0x268>)
 800599a:	61bb      	str	r3, [r7, #24]
        break;
 800599c:	e00c      	b.n	80059b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800599e:	f7fe fccb 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 80059a2:	61b8      	str	r0, [r7, #24]
        break;
 80059a4:	e008      	b.n	80059b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059aa:	61bb      	str	r3, [r7, #24]
        break;
 80059ac:	e004      	b.n	80059b8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	77bb      	strb	r3, [r7, #30]
        break;
 80059b6:	bf00      	nop
    }

    if (pclk != 0U)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d018      	beq.n	80059f0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	085a      	lsrs	r2, r3, #1
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	441a      	add	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b0f      	cmp	r3, #15
 80059d6:	d909      	bls.n	80059ec <UART_SetConfig+0x238>
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059de:	d205      	bcs.n	80059ec <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	e001      	b.n	80059f0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80059fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3720      	adds	r7, #32
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	efff69f3 	.word	0xefff69f3
 8005a0c:	40013800 	.word	0x40013800
 8005a10:	40021000 	.word	0x40021000
 8005a14:	40004400 	.word	0x40004400
 8005a18:	40004800 	.word	0x40004800
 8005a1c:	007a1200 	.word	0x007a1200

08005a20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01a      	beq.n	8005b36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b1e:	d10a      	bne.n	8005b36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00a      	beq.n	8005b58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	605a      	str	r2, [r3, #4]
  }
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b098      	sub	sp, #96	; 0x60
 8005b68:	af02      	add	r7, sp, #8
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b74:	f7fb ffbe 	bl	8001af4 <HAL_GetTick>
 8005b78:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d12e      	bne.n	8005be6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b90:	2200      	movs	r2, #0
 8005b92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f88c 	bl	8005cb4 <UART_WaitOnFlagUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d021      	beq.n	8005be6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bb6:	653b      	str	r3, [r7, #80]	; 0x50
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8005bc2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e6      	bne.n	8005ba2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e062      	b.n	8005cac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d149      	bne.n	8005c88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f856 	bl	8005cb4 <UART_WaitOnFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d03c      	beq.n	8005c88 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e6      	bne.n	8005c0e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3308      	adds	r3, #8
 8005c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c60:	61fa      	str	r2, [r7, #28]
 8005c62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	69b9      	ldr	r1, [r7, #24]
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e5      	bne.n	8005c40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e011      	b.n	8005cac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3758      	adds	r7, #88	; 0x58
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	603b      	str	r3, [r7, #0]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc4:	e04f      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ccc:	d04b      	beq.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cce:	f7fb ff11 	bl	8001af4 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d302      	bcc.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e04e      	b.n	8005d86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0304 	and.w	r3, r3, #4
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d037      	beq.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2b80      	cmp	r3, #128	; 0x80
 8005cfa:	d034      	beq.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b40      	cmp	r3, #64	; 0x40
 8005d00:	d031      	beq.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	f003 0308 	and.w	r3, r3, #8
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	d110      	bne.n	8005d32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2208      	movs	r2, #8
 8005d16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 f8ff 	bl	8005f1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2208      	movs	r2, #8
 8005d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e029      	b.n	8005d86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d40:	d111      	bne.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f8e5 	bl	8005f1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e00f      	b.n	8005d86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69da      	ldr	r2, [r3, #28]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	bf0c      	ite	eq
 8005d76:	2301      	moveq	r3, #1
 8005d78:	2300      	movne	r3, #0
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	79fb      	ldrb	r3, [r7, #7]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d0a0      	beq.n	8005cc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b097      	sub	sp, #92	; 0x5c
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	88fa      	ldrh	r2, [r7, #6]
 8005da8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	88fa      	ldrh	r2, [r7, #6]
 8005db0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc2:	d10e      	bne.n	8005de2 <UART_Start_Receive_IT+0x52>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d105      	bne.n	8005dd8 <UART_Start_Receive_IT+0x48>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005dd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dd6:	e02d      	b.n	8005e34 <UART_Start_Receive_IT+0xa4>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	22ff      	movs	r2, #255	; 0xff
 8005ddc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005de0:	e028      	b.n	8005e34 <UART_Start_Receive_IT+0xa4>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10d      	bne.n	8005e06 <UART_Start_Receive_IT+0x76>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d104      	bne.n	8005dfc <UART_Start_Receive_IT+0x6c>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	22ff      	movs	r2, #255	; 0xff
 8005df6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dfa:	e01b      	b.n	8005e34 <UART_Start_Receive_IT+0xa4>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	227f      	movs	r2, #127	; 0x7f
 8005e00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e04:	e016      	b.n	8005e34 <UART_Start_Receive_IT+0xa4>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e0e:	d10d      	bne.n	8005e2c <UART_Start_Receive_IT+0x9c>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d104      	bne.n	8005e22 <UART_Start_Receive_IT+0x92>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	227f      	movs	r2, #127	; 0x7f
 8005e1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e20:	e008      	b.n	8005e34 <UART_Start_Receive_IT+0xa4>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	223f      	movs	r2, #63	; 0x3f
 8005e26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e2a:	e003      	b.n	8005e34 <UART_Start_Receive_IT+0xa4>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2222      	movs	r2, #34	; 0x22
 8005e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3308      	adds	r3, #8
 8005e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4e:	e853 3f00 	ldrex	r3, [r3]
 8005e52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e56:	f043 0301 	orr.w	r3, r3, #1
 8005e5a:	657b      	str	r3, [r7, #84]	; 0x54
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3308      	adds	r3, #8
 8005e62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e64:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e66:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e6c:	e841 2300 	strex	r3, r2, [r1]
 8005e70:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1e5      	bne.n	8005e44 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e80:	d107      	bne.n	8005e92 <UART_Start_Receive_IT+0x102>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d103      	bne.n	8005e92 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4a21      	ldr	r2, [pc, #132]	; (8005f14 <UART_Start_Receive_IT+0x184>)
 8005e8e:	669a      	str	r2, [r3, #104]	; 0x68
 8005e90:	e002      	b.n	8005e98 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4a20      	ldr	r2, [pc, #128]	; (8005f18 <UART_Start_Receive_IT+0x188>)
 8005e96:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d019      	beq.n	8005ed4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e6      	bne.n	8005ea0 <UART_Start_Receive_IT+0x110>
 8005ed2:	e018      	b.n	8005f06 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f043 0320 	orr.w	r3, r3, #32
 8005ee8:	653b      	str	r3, [r7, #80]	; 0x50
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef2:	623b      	str	r3, [r7, #32]
 8005ef4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	69f9      	ldr	r1, [r7, #28]
 8005ef8:	6a3a      	ldr	r2, [r7, #32]
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e6      	bne.n	8005ed4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	375c      	adds	r7, #92	; 0x5c
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	0800620d 	.word	0x0800620d
 8005f18:	08006065 	.word	0x08006065

08005f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b095      	sub	sp, #84	; 0x54
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f42:	643b      	str	r3, [r7, #64]	; 0x40
 8005f44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e6      	bne.n	8005f24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	f023 0301 	bic.w	r3, r3, #1
 8005f6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3308      	adds	r3, #8
 8005f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e5      	bne.n	8005f56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d118      	bne.n	8005fc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f023 0310 	bic.w	r3, r3, #16
 8005fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	461a      	mov	r2, r3
 8005fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	6979      	ldr	r1, [r7, #20]
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e6      	bne.n	8005f92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005fd8:	bf00      	nop
 8005fda:	3754      	adds	r7, #84	; 0x54
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f7ff fbc0 	bl	8005788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006008:	bf00      	nop
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	60bb      	str	r3, [r7, #8]
   return(result);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602c:	61fb      	str	r3, [r7, #28]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	61bb      	str	r3, [r7, #24]
 8006038:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	6979      	ldr	r1, [r7, #20]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	613b      	str	r3, [r7, #16]
   return(result);
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e6      	bne.n	8006018 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff fb8c 	bl	8005774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800605c:	bf00      	nop
 800605e:	3720      	adds	r7, #32
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b09c      	sub	sp, #112	; 0x70
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006072:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800607c:	2b22      	cmp	r3, #34	; 0x22
 800607e:	f040 80b9 	bne.w	80061f4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006088:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800608c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006090:	b2d9      	uxtb	r1, r3
 8006092:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006096:	b2da      	uxtb	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609c:	400a      	ands	r2, r1
 800609e:	b2d2      	uxtb	r2, r2
 80060a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f040 809c 	bne.w	8006204 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80060ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e6      	bne.n	80060cc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3308      	adds	r3, #8
 8006104:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800610e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	667b      	str	r3, [r7, #100]	; 0x64
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3308      	adds	r3, #8
 800611c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800611e:	647a      	str	r2, [r7, #68]	; 0x44
 8006120:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006122:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006124:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800612c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e5      	bne.n	80060fe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2220      	movs	r2, #32
 8006136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d018      	beq.n	8006186 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	623b      	str	r3, [r7, #32]
   return(result);
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006168:	663b      	str	r3, [r7, #96]	; 0x60
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006172:	633b      	str	r3, [r7, #48]	; 0x30
 8006174:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e6      	bne.n	8006154 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800618a:	2b01      	cmp	r3, #1
 800618c:	d12e      	bne.n	80061ec <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f023 0310 	bic.w	r3, r3, #16
 80061a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	69b9      	ldr	r1, [r7, #24]
 80061b8:	69fa      	ldr	r2, [r7, #28]
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	617b      	str	r3, [r7, #20]
   return(result);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e6      	bne.n	8006194 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b10      	cmp	r3, #16
 80061d2:	d103      	bne.n	80061dc <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2210      	movs	r2, #16
 80061da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff fad9 	bl	800579c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061ea:	e00b      	b.n	8006204 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7fb f875 	bl	80012dc <HAL_UART_RxCpltCallback>
}
 80061f2:	e007      	b.n	8006204 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0208 	orr.w	r2, r2, #8
 8006202:	619a      	str	r2, [r3, #24]
}
 8006204:	bf00      	nop
 8006206:	3770      	adds	r7, #112	; 0x70
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b09c      	sub	sp, #112	; 0x70
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800621a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006224:	2b22      	cmp	r3, #34	; 0x22
 8006226:	f040 80b9 	bne.w	800639c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006230:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006238:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800623a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800623e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006242:	4013      	ands	r3, r2
 8006244:	b29a      	uxth	r2, r3
 8006246:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006248:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624e:	1c9a      	adds	r2, r3, #2
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800626c:	b29b      	uxth	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	f040 809c 	bne.w	80063ac <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800627c:	e853 3f00 	ldrex	r3, [r3]
 8006280:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006284:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006288:	667b      	str	r3, [r7, #100]	; 0x64
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006292:	657b      	str	r3, [r7, #84]	; 0x54
 8006294:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006296:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006298:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800629a:	e841 2300 	strex	r3, r2, [r1]
 800629e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1e6      	bne.n	8006274 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3308      	adds	r3, #8
 80062ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	f023 0301 	bic.w	r3, r3, #1
 80062bc:	663b      	str	r3, [r7, #96]	; 0x60
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3308      	adds	r3, #8
 80062c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062c6:	643a      	str	r2, [r7, #64]	; 0x40
 80062c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e5      	bne.n	80062a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d018      	beq.n	800632e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	61fb      	str	r3, [r7, #28]
   return(result);
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006310:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800631a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800631c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006322:	e841 2300 	strex	r3, r2, [r1]
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1e6      	bne.n	80062fc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006332:	2b01      	cmp	r3, #1
 8006334:	d12e      	bne.n	8006394 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	60bb      	str	r3, [r7, #8]
   return(result);
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f023 0310 	bic.w	r3, r3, #16
 8006350:	65bb      	str	r3, [r7, #88]	; 0x58
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800635a:	61bb      	str	r3, [r7, #24]
 800635c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	6979      	ldr	r1, [r7, #20]
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	613b      	str	r3, [r7, #16]
   return(result);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e6      	bne.n	800633c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b10      	cmp	r3, #16
 800637a:	d103      	bne.n	8006384 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2210      	movs	r2, #16
 8006382:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800638a:	4619      	mov	r1, r3
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff fa05 	bl	800579c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006392:	e00b      	b.n	80063ac <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7fa ffa1 	bl	80012dc <HAL_UART_RxCpltCallback>
}
 800639a:	e007      	b.n	80063ac <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0208 	orr.w	r2, r2, #8
 80063aa:	619a      	str	r2, [r3, #24]
}
 80063ac:	bf00      	nop
 80063ae:	3770      	adds	r7, #112	; 0x70
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <__cvt>:
 80063c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063cc:	ec55 4b10 	vmov	r4, r5, d0
 80063d0:	2d00      	cmp	r5, #0
 80063d2:	460e      	mov	r6, r1
 80063d4:	4619      	mov	r1, r3
 80063d6:	462b      	mov	r3, r5
 80063d8:	bfbb      	ittet	lt
 80063da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80063de:	461d      	movlt	r5, r3
 80063e0:	2300      	movge	r3, #0
 80063e2:	232d      	movlt	r3, #45	; 0x2d
 80063e4:	700b      	strb	r3, [r1, #0]
 80063e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80063ec:	4691      	mov	r9, r2
 80063ee:	f023 0820 	bic.w	r8, r3, #32
 80063f2:	bfbc      	itt	lt
 80063f4:	4622      	movlt	r2, r4
 80063f6:	4614      	movlt	r4, r2
 80063f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063fc:	d005      	beq.n	800640a <__cvt+0x42>
 80063fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006402:	d100      	bne.n	8006406 <__cvt+0x3e>
 8006404:	3601      	adds	r6, #1
 8006406:	2102      	movs	r1, #2
 8006408:	e000      	b.n	800640c <__cvt+0x44>
 800640a:	2103      	movs	r1, #3
 800640c:	ab03      	add	r3, sp, #12
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	ab02      	add	r3, sp, #8
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	ec45 4b10 	vmov	d0, r4, r5
 8006418:	4653      	mov	r3, sl
 800641a:	4632      	mov	r2, r6
 800641c:	f000 feac 	bl	8007178 <_dtoa_r>
 8006420:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006424:	4607      	mov	r7, r0
 8006426:	d102      	bne.n	800642e <__cvt+0x66>
 8006428:	f019 0f01 	tst.w	r9, #1
 800642c:	d022      	beq.n	8006474 <__cvt+0xac>
 800642e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006432:	eb07 0906 	add.w	r9, r7, r6
 8006436:	d110      	bne.n	800645a <__cvt+0x92>
 8006438:	783b      	ldrb	r3, [r7, #0]
 800643a:	2b30      	cmp	r3, #48	; 0x30
 800643c:	d10a      	bne.n	8006454 <__cvt+0x8c>
 800643e:	2200      	movs	r2, #0
 8006440:	2300      	movs	r3, #0
 8006442:	4620      	mov	r0, r4
 8006444:	4629      	mov	r1, r5
 8006446:	f7fa fb4f 	bl	8000ae8 <__aeabi_dcmpeq>
 800644a:	b918      	cbnz	r0, 8006454 <__cvt+0x8c>
 800644c:	f1c6 0601 	rsb	r6, r6, #1
 8006450:	f8ca 6000 	str.w	r6, [sl]
 8006454:	f8da 3000 	ldr.w	r3, [sl]
 8006458:	4499      	add	r9, r3
 800645a:	2200      	movs	r2, #0
 800645c:	2300      	movs	r3, #0
 800645e:	4620      	mov	r0, r4
 8006460:	4629      	mov	r1, r5
 8006462:	f7fa fb41 	bl	8000ae8 <__aeabi_dcmpeq>
 8006466:	b108      	cbz	r0, 800646c <__cvt+0xa4>
 8006468:	f8cd 900c 	str.w	r9, [sp, #12]
 800646c:	2230      	movs	r2, #48	; 0x30
 800646e:	9b03      	ldr	r3, [sp, #12]
 8006470:	454b      	cmp	r3, r9
 8006472:	d307      	bcc.n	8006484 <__cvt+0xbc>
 8006474:	9b03      	ldr	r3, [sp, #12]
 8006476:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006478:	1bdb      	subs	r3, r3, r7
 800647a:	4638      	mov	r0, r7
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	b004      	add	sp, #16
 8006480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006484:	1c59      	adds	r1, r3, #1
 8006486:	9103      	str	r1, [sp, #12]
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	e7f0      	b.n	800646e <__cvt+0xa6>

0800648c <__exponent>:
 800648c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800648e:	4603      	mov	r3, r0
 8006490:	2900      	cmp	r1, #0
 8006492:	bfb8      	it	lt
 8006494:	4249      	neglt	r1, r1
 8006496:	f803 2b02 	strb.w	r2, [r3], #2
 800649a:	bfb4      	ite	lt
 800649c:	222d      	movlt	r2, #45	; 0x2d
 800649e:	222b      	movge	r2, #43	; 0x2b
 80064a0:	2909      	cmp	r1, #9
 80064a2:	7042      	strb	r2, [r0, #1]
 80064a4:	dd2a      	ble.n	80064fc <__exponent+0x70>
 80064a6:	f10d 0207 	add.w	r2, sp, #7
 80064aa:	4617      	mov	r7, r2
 80064ac:	260a      	movs	r6, #10
 80064ae:	4694      	mov	ip, r2
 80064b0:	fb91 f5f6 	sdiv	r5, r1, r6
 80064b4:	fb06 1415 	mls	r4, r6, r5, r1
 80064b8:	3430      	adds	r4, #48	; 0x30
 80064ba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80064be:	460c      	mov	r4, r1
 80064c0:	2c63      	cmp	r4, #99	; 0x63
 80064c2:	f102 32ff 	add.w	r2, r2, #4294967295
 80064c6:	4629      	mov	r1, r5
 80064c8:	dcf1      	bgt.n	80064ae <__exponent+0x22>
 80064ca:	3130      	adds	r1, #48	; 0x30
 80064cc:	f1ac 0402 	sub.w	r4, ip, #2
 80064d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80064d4:	1c41      	adds	r1, r0, #1
 80064d6:	4622      	mov	r2, r4
 80064d8:	42ba      	cmp	r2, r7
 80064da:	d30a      	bcc.n	80064f2 <__exponent+0x66>
 80064dc:	f10d 0209 	add.w	r2, sp, #9
 80064e0:	eba2 020c 	sub.w	r2, r2, ip
 80064e4:	42bc      	cmp	r4, r7
 80064e6:	bf88      	it	hi
 80064e8:	2200      	movhi	r2, #0
 80064ea:	4413      	add	r3, r2
 80064ec:	1a18      	subs	r0, r3, r0
 80064ee:	b003      	add	sp, #12
 80064f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80064f6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80064fa:	e7ed      	b.n	80064d8 <__exponent+0x4c>
 80064fc:	2330      	movs	r3, #48	; 0x30
 80064fe:	3130      	adds	r1, #48	; 0x30
 8006500:	7083      	strb	r3, [r0, #2]
 8006502:	70c1      	strb	r1, [r0, #3]
 8006504:	1d03      	adds	r3, r0, #4
 8006506:	e7f1      	b.n	80064ec <__exponent+0x60>

08006508 <_printf_float>:
 8006508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	ed2d 8b02 	vpush	{d8}
 8006510:	b08d      	sub	sp, #52	; 0x34
 8006512:	460c      	mov	r4, r1
 8006514:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006518:	4616      	mov	r6, r2
 800651a:	461f      	mov	r7, r3
 800651c:	4605      	mov	r5, r0
 800651e:	f000 fd29 	bl	8006f74 <_localeconv_r>
 8006522:	f8d0 a000 	ldr.w	sl, [r0]
 8006526:	4650      	mov	r0, sl
 8006528:	f7f9 feb2 	bl	8000290 <strlen>
 800652c:	2300      	movs	r3, #0
 800652e:	930a      	str	r3, [sp, #40]	; 0x28
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	9305      	str	r3, [sp, #20]
 8006534:	f8d8 3000 	ldr.w	r3, [r8]
 8006538:	f894 b018 	ldrb.w	fp, [r4, #24]
 800653c:	3307      	adds	r3, #7
 800653e:	f023 0307 	bic.w	r3, r3, #7
 8006542:	f103 0208 	add.w	r2, r3, #8
 8006546:	f8c8 2000 	str.w	r2, [r8]
 800654a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800654e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006552:	9307      	str	r3, [sp, #28]
 8006554:	f8cd 8018 	str.w	r8, [sp, #24]
 8006558:	ee08 0a10 	vmov	s16, r0
 800655c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006560:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006564:	4b9e      	ldr	r3, [pc, #632]	; (80067e0 <_printf_float+0x2d8>)
 8006566:	f04f 32ff 	mov.w	r2, #4294967295
 800656a:	f7fa faef 	bl	8000b4c <__aeabi_dcmpun>
 800656e:	bb88      	cbnz	r0, 80065d4 <_printf_float+0xcc>
 8006570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006574:	4b9a      	ldr	r3, [pc, #616]	; (80067e0 <_printf_float+0x2d8>)
 8006576:	f04f 32ff 	mov.w	r2, #4294967295
 800657a:	f7fa fac9 	bl	8000b10 <__aeabi_dcmple>
 800657e:	bb48      	cbnz	r0, 80065d4 <_printf_float+0xcc>
 8006580:	2200      	movs	r2, #0
 8006582:	2300      	movs	r3, #0
 8006584:	4640      	mov	r0, r8
 8006586:	4649      	mov	r1, r9
 8006588:	f7fa fab8 	bl	8000afc <__aeabi_dcmplt>
 800658c:	b110      	cbz	r0, 8006594 <_printf_float+0x8c>
 800658e:	232d      	movs	r3, #45	; 0x2d
 8006590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006594:	4a93      	ldr	r2, [pc, #588]	; (80067e4 <_printf_float+0x2dc>)
 8006596:	4b94      	ldr	r3, [pc, #592]	; (80067e8 <_printf_float+0x2e0>)
 8006598:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800659c:	bf94      	ite	ls
 800659e:	4690      	movls	r8, r2
 80065a0:	4698      	movhi	r8, r3
 80065a2:	2303      	movs	r3, #3
 80065a4:	6123      	str	r3, [r4, #16]
 80065a6:	9b05      	ldr	r3, [sp, #20]
 80065a8:	f023 0304 	bic.w	r3, r3, #4
 80065ac:	6023      	str	r3, [r4, #0]
 80065ae:	f04f 0900 	mov.w	r9, #0
 80065b2:	9700      	str	r7, [sp, #0]
 80065b4:	4633      	mov	r3, r6
 80065b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80065b8:	4621      	mov	r1, r4
 80065ba:	4628      	mov	r0, r5
 80065bc:	f000 f9da 	bl	8006974 <_printf_common>
 80065c0:	3001      	adds	r0, #1
 80065c2:	f040 8090 	bne.w	80066e6 <_printf_float+0x1de>
 80065c6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ca:	b00d      	add	sp, #52	; 0x34
 80065cc:	ecbd 8b02 	vpop	{d8}
 80065d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d4:	4642      	mov	r2, r8
 80065d6:	464b      	mov	r3, r9
 80065d8:	4640      	mov	r0, r8
 80065da:	4649      	mov	r1, r9
 80065dc:	f7fa fab6 	bl	8000b4c <__aeabi_dcmpun>
 80065e0:	b140      	cbz	r0, 80065f4 <_printf_float+0xec>
 80065e2:	464b      	mov	r3, r9
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	bfbc      	itt	lt
 80065e8:	232d      	movlt	r3, #45	; 0x2d
 80065ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80065ee:	4a7f      	ldr	r2, [pc, #508]	; (80067ec <_printf_float+0x2e4>)
 80065f0:	4b7f      	ldr	r3, [pc, #508]	; (80067f0 <_printf_float+0x2e8>)
 80065f2:	e7d1      	b.n	8006598 <_printf_float+0x90>
 80065f4:	6863      	ldr	r3, [r4, #4]
 80065f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80065fa:	9206      	str	r2, [sp, #24]
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	d13f      	bne.n	8006680 <_printf_float+0x178>
 8006600:	2306      	movs	r3, #6
 8006602:	6063      	str	r3, [r4, #4]
 8006604:	9b05      	ldr	r3, [sp, #20]
 8006606:	6861      	ldr	r1, [r4, #4]
 8006608:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800660c:	2300      	movs	r3, #0
 800660e:	9303      	str	r3, [sp, #12]
 8006610:	ab0a      	add	r3, sp, #40	; 0x28
 8006612:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006616:	ab09      	add	r3, sp, #36	; 0x24
 8006618:	ec49 8b10 	vmov	d0, r8, r9
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	6022      	str	r2, [r4, #0]
 8006620:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006624:	4628      	mov	r0, r5
 8006626:	f7ff fecf 	bl	80063c8 <__cvt>
 800662a:	9b06      	ldr	r3, [sp, #24]
 800662c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800662e:	2b47      	cmp	r3, #71	; 0x47
 8006630:	4680      	mov	r8, r0
 8006632:	d108      	bne.n	8006646 <_printf_float+0x13e>
 8006634:	1cc8      	adds	r0, r1, #3
 8006636:	db02      	blt.n	800663e <_printf_float+0x136>
 8006638:	6863      	ldr	r3, [r4, #4]
 800663a:	4299      	cmp	r1, r3
 800663c:	dd41      	ble.n	80066c2 <_printf_float+0x1ba>
 800663e:	f1ab 0302 	sub.w	r3, fp, #2
 8006642:	fa5f fb83 	uxtb.w	fp, r3
 8006646:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800664a:	d820      	bhi.n	800668e <_printf_float+0x186>
 800664c:	3901      	subs	r1, #1
 800664e:	465a      	mov	r2, fp
 8006650:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006654:	9109      	str	r1, [sp, #36]	; 0x24
 8006656:	f7ff ff19 	bl	800648c <__exponent>
 800665a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800665c:	1813      	adds	r3, r2, r0
 800665e:	2a01      	cmp	r2, #1
 8006660:	4681      	mov	r9, r0
 8006662:	6123      	str	r3, [r4, #16]
 8006664:	dc02      	bgt.n	800666c <_printf_float+0x164>
 8006666:	6822      	ldr	r2, [r4, #0]
 8006668:	07d2      	lsls	r2, r2, #31
 800666a:	d501      	bpl.n	8006670 <_printf_float+0x168>
 800666c:	3301      	adds	r3, #1
 800666e:	6123      	str	r3, [r4, #16]
 8006670:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006674:	2b00      	cmp	r3, #0
 8006676:	d09c      	beq.n	80065b2 <_printf_float+0xaa>
 8006678:	232d      	movs	r3, #45	; 0x2d
 800667a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800667e:	e798      	b.n	80065b2 <_printf_float+0xaa>
 8006680:	9a06      	ldr	r2, [sp, #24]
 8006682:	2a47      	cmp	r2, #71	; 0x47
 8006684:	d1be      	bne.n	8006604 <_printf_float+0xfc>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1bc      	bne.n	8006604 <_printf_float+0xfc>
 800668a:	2301      	movs	r3, #1
 800668c:	e7b9      	b.n	8006602 <_printf_float+0xfa>
 800668e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006692:	d118      	bne.n	80066c6 <_printf_float+0x1be>
 8006694:	2900      	cmp	r1, #0
 8006696:	6863      	ldr	r3, [r4, #4]
 8006698:	dd0b      	ble.n	80066b2 <_printf_float+0x1aa>
 800669a:	6121      	str	r1, [r4, #16]
 800669c:	b913      	cbnz	r3, 80066a4 <_printf_float+0x19c>
 800669e:	6822      	ldr	r2, [r4, #0]
 80066a0:	07d0      	lsls	r0, r2, #31
 80066a2:	d502      	bpl.n	80066aa <_printf_float+0x1a2>
 80066a4:	3301      	adds	r3, #1
 80066a6:	440b      	add	r3, r1
 80066a8:	6123      	str	r3, [r4, #16]
 80066aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80066ac:	f04f 0900 	mov.w	r9, #0
 80066b0:	e7de      	b.n	8006670 <_printf_float+0x168>
 80066b2:	b913      	cbnz	r3, 80066ba <_printf_float+0x1b2>
 80066b4:	6822      	ldr	r2, [r4, #0]
 80066b6:	07d2      	lsls	r2, r2, #31
 80066b8:	d501      	bpl.n	80066be <_printf_float+0x1b6>
 80066ba:	3302      	adds	r3, #2
 80066bc:	e7f4      	b.n	80066a8 <_printf_float+0x1a0>
 80066be:	2301      	movs	r3, #1
 80066c0:	e7f2      	b.n	80066a8 <_printf_float+0x1a0>
 80066c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80066c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c8:	4299      	cmp	r1, r3
 80066ca:	db05      	blt.n	80066d8 <_printf_float+0x1d0>
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	6121      	str	r1, [r4, #16]
 80066d0:	07d8      	lsls	r0, r3, #31
 80066d2:	d5ea      	bpl.n	80066aa <_printf_float+0x1a2>
 80066d4:	1c4b      	adds	r3, r1, #1
 80066d6:	e7e7      	b.n	80066a8 <_printf_float+0x1a0>
 80066d8:	2900      	cmp	r1, #0
 80066da:	bfd4      	ite	le
 80066dc:	f1c1 0202 	rsble	r2, r1, #2
 80066e0:	2201      	movgt	r2, #1
 80066e2:	4413      	add	r3, r2
 80066e4:	e7e0      	b.n	80066a8 <_printf_float+0x1a0>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	055a      	lsls	r2, r3, #21
 80066ea:	d407      	bmi.n	80066fc <_printf_float+0x1f4>
 80066ec:	6923      	ldr	r3, [r4, #16]
 80066ee:	4642      	mov	r2, r8
 80066f0:	4631      	mov	r1, r6
 80066f2:	4628      	mov	r0, r5
 80066f4:	47b8      	blx	r7
 80066f6:	3001      	adds	r0, #1
 80066f8:	d12c      	bne.n	8006754 <_printf_float+0x24c>
 80066fa:	e764      	b.n	80065c6 <_printf_float+0xbe>
 80066fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006700:	f240 80e0 	bls.w	80068c4 <_printf_float+0x3bc>
 8006704:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006708:	2200      	movs	r2, #0
 800670a:	2300      	movs	r3, #0
 800670c:	f7fa f9ec 	bl	8000ae8 <__aeabi_dcmpeq>
 8006710:	2800      	cmp	r0, #0
 8006712:	d034      	beq.n	800677e <_printf_float+0x276>
 8006714:	4a37      	ldr	r2, [pc, #220]	; (80067f4 <_printf_float+0x2ec>)
 8006716:	2301      	movs	r3, #1
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	47b8      	blx	r7
 800671e:	3001      	adds	r0, #1
 8006720:	f43f af51 	beq.w	80065c6 <_printf_float+0xbe>
 8006724:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006728:	429a      	cmp	r2, r3
 800672a:	db02      	blt.n	8006732 <_printf_float+0x22a>
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	07d8      	lsls	r0, r3, #31
 8006730:	d510      	bpl.n	8006754 <_printf_float+0x24c>
 8006732:	ee18 3a10 	vmov	r3, s16
 8006736:	4652      	mov	r2, sl
 8006738:	4631      	mov	r1, r6
 800673a:	4628      	mov	r0, r5
 800673c:	47b8      	blx	r7
 800673e:	3001      	adds	r0, #1
 8006740:	f43f af41 	beq.w	80065c6 <_printf_float+0xbe>
 8006744:	f04f 0800 	mov.w	r8, #0
 8006748:	f104 091a 	add.w	r9, r4, #26
 800674c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800674e:	3b01      	subs	r3, #1
 8006750:	4543      	cmp	r3, r8
 8006752:	dc09      	bgt.n	8006768 <_printf_float+0x260>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	079b      	lsls	r3, r3, #30
 8006758:	f100 8107 	bmi.w	800696a <_printf_float+0x462>
 800675c:	68e0      	ldr	r0, [r4, #12]
 800675e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006760:	4298      	cmp	r0, r3
 8006762:	bfb8      	it	lt
 8006764:	4618      	movlt	r0, r3
 8006766:	e730      	b.n	80065ca <_printf_float+0xc2>
 8006768:	2301      	movs	r3, #1
 800676a:	464a      	mov	r2, r9
 800676c:	4631      	mov	r1, r6
 800676e:	4628      	mov	r0, r5
 8006770:	47b8      	blx	r7
 8006772:	3001      	adds	r0, #1
 8006774:	f43f af27 	beq.w	80065c6 <_printf_float+0xbe>
 8006778:	f108 0801 	add.w	r8, r8, #1
 800677c:	e7e6      	b.n	800674c <_printf_float+0x244>
 800677e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	dc39      	bgt.n	80067f8 <_printf_float+0x2f0>
 8006784:	4a1b      	ldr	r2, [pc, #108]	; (80067f4 <_printf_float+0x2ec>)
 8006786:	2301      	movs	r3, #1
 8006788:	4631      	mov	r1, r6
 800678a:	4628      	mov	r0, r5
 800678c:	47b8      	blx	r7
 800678e:	3001      	adds	r0, #1
 8006790:	f43f af19 	beq.w	80065c6 <_printf_float+0xbe>
 8006794:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006798:	4313      	orrs	r3, r2
 800679a:	d102      	bne.n	80067a2 <_printf_float+0x29a>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	07d9      	lsls	r1, r3, #31
 80067a0:	d5d8      	bpl.n	8006754 <_printf_float+0x24c>
 80067a2:	ee18 3a10 	vmov	r3, s16
 80067a6:	4652      	mov	r2, sl
 80067a8:	4631      	mov	r1, r6
 80067aa:	4628      	mov	r0, r5
 80067ac:	47b8      	blx	r7
 80067ae:	3001      	adds	r0, #1
 80067b0:	f43f af09 	beq.w	80065c6 <_printf_float+0xbe>
 80067b4:	f04f 0900 	mov.w	r9, #0
 80067b8:	f104 0a1a 	add.w	sl, r4, #26
 80067bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067be:	425b      	negs	r3, r3
 80067c0:	454b      	cmp	r3, r9
 80067c2:	dc01      	bgt.n	80067c8 <_printf_float+0x2c0>
 80067c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067c6:	e792      	b.n	80066ee <_printf_float+0x1e6>
 80067c8:	2301      	movs	r3, #1
 80067ca:	4652      	mov	r2, sl
 80067cc:	4631      	mov	r1, r6
 80067ce:	4628      	mov	r0, r5
 80067d0:	47b8      	blx	r7
 80067d2:	3001      	adds	r0, #1
 80067d4:	f43f aef7 	beq.w	80065c6 <_printf_float+0xbe>
 80067d8:	f109 0901 	add.w	r9, r9, #1
 80067dc:	e7ee      	b.n	80067bc <_printf_float+0x2b4>
 80067de:	bf00      	nop
 80067e0:	7fefffff 	.word	0x7fefffff
 80067e4:	0800924c 	.word	0x0800924c
 80067e8:	08009250 	.word	0x08009250
 80067ec:	08009254 	.word	0x08009254
 80067f0:	08009258 	.word	0x08009258
 80067f4:	0800925c 	.word	0x0800925c
 80067f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067fc:	429a      	cmp	r2, r3
 80067fe:	bfa8      	it	ge
 8006800:	461a      	movge	r2, r3
 8006802:	2a00      	cmp	r2, #0
 8006804:	4691      	mov	r9, r2
 8006806:	dc37      	bgt.n	8006878 <_printf_float+0x370>
 8006808:	f04f 0b00 	mov.w	fp, #0
 800680c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006810:	f104 021a 	add.w	r2, r4, #26
 8006814:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006816:	9305      	str	r3, [sp, #20]
 8006818:	eba3 0309 	sub.w	r3, r3, r9
 800681c:	455b      	cmp	r3, fp
 800681e:	dc33      	bgt.n	8006888 <_printf_float+0x380>
 8006820:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006824:	429a      	cmp	r2, r3
 8006826:	db3b      	blt.n	80068a0 <_printf_float+0x398>
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	07da      	lsls	r2, r3, #31
 800682c:	d438      	bmi.n	80068a0 <_printf_float+0x398>
 800682e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006832:	eba2 0903 	sub.w	r9, r2, r3
 8006836:	9b05      	ldr	r3, [sp, #20]
 8006838:	1ad2      	subs	r2, r2, r3
 800683a:	4591      	cmp	r9, r2
 800683c:	bfa8      	it	ge
 800683e:	4691      	movge	r9, r2
 8006840:	f1b9 0f00 	cmp.w	r9, #0
 8006844:	dc35      	bgt.n	80068b2 <_printf_float+0x3aa>
 8006846:	f04f 0800 	mov.w	r8, #0
 800684a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800684e:	f104 0a1a 	add.w	sl, r4, #26
 8006852:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006856:	1a9b      	subs	r3, r3, r2
 8006858:	eba3 0309 	sub.w	r3, r3, r9
 800685c:	4543      	cmp	r3, r8
 800685e:	f77f af79 	ble.w	8006754 <_printf_float+0x24c>
 8006862:	2301      	movs	r3, #1
 8006864:	4652      	mov	r2, sl
 8006866:	4631      	mov	r1, r6
 8006868:	4628      	mov	r0, r5
 800686a:	47b8      	blx	r7
 800686c:	3001      	adds	r0, #1
 800686e:	f43f aeaa 	beq.w	80065c6 <_printf_float+0xbe>
 8006872:	f108 0801 	add.w	r8, r8, #1
 8006876:	e7ec      	b.n	8006852 <_printf_float+0x34a>
 8006878:	4613      	mov	r3, r2
 800687a:	4631      	mov	r1, r6
 800687c:	4642      	mov	r2, r8
 800687e:	4628      	mov	r0, r5
 8006880:	47b8      	blx	r7
 8006882:	3001      	adds	r0, #1
 8006884:	d1c0      	bne.n	8006808 <_printf_float+0x300>
 8006886:	e69e      	b.n	80065c6 <_printf_float+0xbe>
 8006888:	2301      	movs	r3, #1
 800688a:	4631      	mov	r1, r6
 800688c:	4628      	mov	r0, r5
 800688e:	9205      	str	r2, [sp, #20]
 8006890:	47b8      	blx	r7
 8006892:	3001      	adds	r0, #1
 8006894:	f43f ae97 	beq.w	80065c6 <_printf_float+0xbe>
 8006898:	9a05      	ldr	r2, [sp, #20]
 800689a:	f10b 0b01 	add.w	fp, fp, #1
 800689e:	e7b9      	b.n	8006814 <_printf_float+0x30c>
 80068a0:	ee18 3a10 	vmov	r3, s16
 80068a4:	4652      	mov	r2, sl
 80068a6:	4631      	mov	r1, r6
 80068a8:	4628      	mov	r0, r5
 80068aa:	47b8      	blx	r7
 80068ac:	3001      	adds	r0, #1
 80068ae:	d1be      	bne.n	800682e <_printf_float+0x326>
 80068b0:	e689      	b.n	80065c6 <_printf_float+0xbe>
 80068b2:	9a05      	ldr	r2, [sp, #20]
 80068b4:	464b      	mov	r3, r9
 80068b6:	4442      	add	r2, r8
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	47b8      	blx	r7
 80068be:	3001      	adds	r0, #1
 80068c0:	d1c1      	bne.n	8006846 <_printf_float+0x33e>
 80068c2:	e680      	b.n	80065c6 <_printf_float+0xbe>
 80068c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068c6:	2a01      	cmp	r2, #1
 80068c8:	dc01      	bgt.n	80068ce <_printf_float+0x3c6>
 80068ca:	07db      	lsls	r3, r3, #31
 80068cc:	d53a      	bpl.n	8006944 <_printf_float+0x43c>
 80068ce:	2301      	movs	r3, #1
 80068d0:	4642      	mov	r2, r8
 80068d2:	4631      	mov	r1, r6
 80068d4:	4628      	mov	r0, r5
 80068d6:	47b8      	blx	r7
 80068d8:	3001      	adds	r0, #1
 80068da:	f43f ae74 	beq.w	80065c6 <_printf_float+0xbe>
 80068de:	ee18 3a10 	vmov	r3, s16
 80068e2:	4652      	mov	r2, sl
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f ae6b 	beq.w	80065c6 <_printf_float+0xbe>
 80068f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068f4:	2200      	movs	r2, #0
 80068f6:	2300      	movs	r3, #0
 80068f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80068fc:	f7fa f8f4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006900:	b9d8      	cbnz	r0, 800693a <_printf_float+0x432>
 8006902:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006906:	f108 0201 	add.w	r2, r8, #1
 800690a:	4631      	mov	r1, r6
 800690c:	4628      	mov	r0, r5
 800690e:	47b8      	blx	r7
 8006910:	3001      	adds	r0, #1
 8006912:	d10e      	bne.n	8006932 <_printf_float+0x42a>
 8006914:	e657      	b.n	80065c6 <_printf_float+0xbe>
 8006916:	2301      	movs	r3, #1
 8006918:	4652      	mov	r2, sl
 800691a:	4631      	mov	r1, r6
 800691c:	4628      	mov	r0, r5
 800691e:	47b8      	blx	r7
 8006920:	3001      	adds	r0, #1
 8006922:	f43f ae50 	beq.w	80065c6 <_printf_float+0xbe>
 8006926:	f108 0801 	add.w	r8, r8, #1
 800692a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800692c:	3b01      	subs	r3, #1
 800692e:	4543      	cmp	r3, r8
 8006930:	dcf1      	bgt.n	8006916 <_printf_float+0x40e>
 8006932:	464b      	mov	r3, r9
 8006934:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006938:	e6da      	b.n	80066f0 <_printf_float+0x1e8>
 800693a:	f04f 0800 	mov.w	r8, #0
 800693e:	f104 0a1a 	add.w	sl, r4, #26
 8006942:	e7f2      	b.n	800692a <_printf_float+0x422>
 8006944:	2301      	movs	r3, #1
 8006946:	4642      	mov	r2, r8
 8006948:	e7df      	b.n	800690a <_printf_float+0x402>
 800694a:	2301      	movs	r3, #1
 800694c:	464a      	mov	r2, r9
 800694e:	4631      	mov	r1, r6
 8006950:	4628      	mov	r0, r5
 8006952:	47b8      	blx	r7
 8006954:	3001      	adds	r0, #1
 8006956:	f43f ae36 	beq.w	80065c6 <_printf_float+0xbe>
 800695a:	f108 0801 	add.w	r8, r8, #1
 800695e:	68e3      	ldr	r3, [r4, #12]
 8006960:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006962:	1a5b      	subs	r3, r3, r1
 8006964:	4543      	cmp	r3, r8
 8006966:	dcf0      	bgt.n	800694a <_printf_float+0x442>
 8006968:	e6f8      	b.n	800675c <_printf_float+0x254>
 800696a:	f04f 0800 	mov.w	r8, #0
 800696e:	f104 0919 	add.w	r9, r4, #25
 8006972:	e7f4      	b.n	800695e <_printf_float+0x456>

08006974 <_printf_common>:
 8006974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006978:	4616      	mov	r6, r2
 800697a:	4699      	mov	r9, r3
 800697c:	688a      	ldr	r2, [r1, #8]
 800697e:	690b      	ldr	r3, [r1, #16]
 8006980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006984:	4293      	cmp	r3, r2
 8006986:	bfb8      	it	lt
 8006988:	4613      	movlt	r3, r2
 800698a:	6033      	str	r3, [r6, #0]
 800698c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006990:	4607      	mov	r7, r0
 8006992:	460c      	mov	r4, r1
 8006994:	b10a      	cbz	r2, 800699a <_printf_common+0x26>
 8006996:	3301      	adds	r3, #1
 8006998:	6033      	str	r3, [r6, #0]
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	0699      	lsls	r1, r3, #26
 800699e:	bf42      	ittt	mi
 80069a0:	6833      	ldrmi	r3, [r6, #0]
 80069a2:	3302      	addmi	r3, #2
 80069a4:	6033      	strmi	r3, [r6, #0]
 80069a6:	6825      	ldr	r5, [r4, #0]
 80069a8:	f015 0506 	ands.w	r5, r5, #6
 80069ac:	d106      	bne.n	80069bc <_printf_common+0x48>
 80069ae:	f104 0a19 	add.w	sl, r4, #25
 80069b2:	68e3      	ldr	r3, [r4, #12]
 80069b4:	6832      	ldr	r2, [r6, #0]
 80069b6:	1a9b      	subs	r3, r3, r2
 80069b8:	42ab      	cmp	r3, r5
 80069ba:	dc26      	bgt.n	8006a0a <_printf_common+0x96>
 80069bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069c0:	1e13      	subs	r3, r2, #0
 80069c2:	6822      	ldr	r2, [r4, #0]
 80069c4:	bf18      	it	ne
 80069c6:	2301      	movne	r3, #1
 80069c8:	0692      	lsls	r2, r2, #26
 80069ca:	d42b      	bmi.n	8006a24 <_printf_common+0xb0>
 80069cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069d0:	4649      	mov	r1, r9
 80069d2:	4638      	mov	r0, r7
 80069d4:	47c0      	blx	r8
 80069d6:	3001      	adds	r0, #1
 80069d8:	d01e      	beq.n	8006a18 <_printf_common+0xa4>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	6922      	ldr	r2, [r4, #16]
 80069de:	f003 0306 	and.w	r3, r3, #6
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	bf02      	ittt	eq
 80069e6:	68e5      	ldreq	r5, [r4, #12]
 80069e8:	6833      	ldreq	r3, [r6, #0]
 80069ea:	1aed      	subeq	r5, r5, r3
 80069ec:	68a3      	ldr	r3, [r4, #8]
 80069ee:	bf0c      	ite	eq
 80069f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069f4:	2500      	movne	r5, #0
 80069f6:	4293      	cmp	r3, r2
 80069f8:	bfc4      	itt	gt
 80069fa:	1a9b      	subgt	r3, r3, r2
 80069fc:	18ed      	addgt	r5, r5, r3
 80069fe:	2600      	movs	r6, #0
 8006a00:	341a      	adds	r4, #26
 8006a02:	42b5      	cmp	r5, r6
 8006a04:	d11a      	bne.n	8006a3c <_printf_common+0xc8>
 8006a06:	2000      	movs	r0, #0
 8006a08:	e008      	b.n	8006a1c <_printf_common+0xa8>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4652      	mov	r2, sl
 8006a0e:	4649      	mov	r1, r9
 8006a10:	4638      	mov	r0, r7
 8006a12:	47c0      	blx	r8
 8006a14:	3001      	adds	r0, #1
 8006a16:	d103      	bne.n	8006a20 <_printf_common+0xac>
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a20:	3501      	adds	r5, #1
 8006a22:	e7c6      	b.n	80069b2 <_printf_common+0x3e>
 8006a24:	18e1      	adds	r1, r4, r3
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	2030      	movs	r0, #48	; 0x30
 8006a2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a2e:	4422      	add	r2, r4
 8006a30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a38:	3302      	adds	r3, #2
 8006a3a:	e7c7      	b.n	80069cc <_printf_common+0x58>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	4622      	mov	r2, r4
 8006a40:	4649      	mov	r1, r9
 8006a42:	4638      	mov	r0, r7
 8006a44:	47c0      	blx	r8
 8006a46:	3001      	adds	r0, #1
 8006a48:	d0e6      	beq.n	8006a18 <_printf_common+0xa4>
 8006a4a:	3601      	adds	r6, #1
 8006a4c:	e7d9      	b.n	8006a02 <_printf_common+0x8e>
	...

08006a50 <_printf_i>:
 8006a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	7e0f      	ldrb	r7, [r1, #24]
 8006a56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a58:	2f78      	cmp	r7, #120	; 0x78
 8006a5a:	4691      	mov	r9, r2
 8006a5c:	4680      	mov	r8, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	469a      	mov	sl, r3
 8006a62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a66:	d807      	bhi.n	8006a78 <_printf_i+0x28>
 8006a68:	2f62      	cmp	r7, #98	; 0x62
 8006a6a:	d80a      	bhi.n	8006a82 <_printf_i+0x32>
 8006a6c:	2f00      	cmp	r7, #0
 8006a6e:	f000 80d4 	beq.w	8006c1a <_printf_i+0x1ca>
 8006a72:	2f58      	cmp	r7, #88	; 0x58
 8006a74:	f000 80c0 	beq.w	8006bf8 <_printf_i+0x1a8>
 8006a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a80:	e03a      	b.n	8006af8 <_printf_i+0xa8>
 8006a82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a86:	2b15      	cmp	r3, #21
 8006a88:	d8f6      	bhi.n	8006a78 <_printf_i+0x28>
 8006a8a:	a101      	add	r1, pc, #4	; (adr r1, 8006a90 <_printf_i+0x40>)
 8006a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a90:	08006ae9 	.word	0x08006ae9
 8006a94:	08006afd 	.word	0x08006afd
 8006a98:	08006a79 	.word	0x08006a79
 8006a9c:	08006a79 	.word	0x08006a79
 8006aa0:	08006a79 	.word	0x08006a79
 8006aa4:	08006a79 	.word	0x08006a79
 8006aa8:	08006afd 	.word	0x08006afd
 8006aac:	08006a79 	.word	0x08006a79
 8006ab0:	08006a79 	.word	0x08006a79
 8006ab4:	08006a79 	.word	0x08006a79
 8006ab8:	08006a79 	.word	0x08006a79
 8006abc:	08006c01 	.word	0x08006c01
 8006ac0:	08006b29 	.word	0x08006b29
 8006ac4:	08006bbb 	.word	0x08006bbb
 8006ac8:	08006a79 	.word	0x08006a79
 8006acc:	08006a79 	.word	0x08006a79
 8006ad0:	08006c23 	.word	0x08006c23
 8006ad4:	08006a79 	.word	0x08006a79
 8006ad8:	08006b29 	.word	0x08006b29
 8006adc:	08006a79 	.word	0x08006a79
 8006ae0:	08006a79 	.word	0x08006a79
 8006ae4:	08006bc3 	.word	0x08006bc3
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	1d1a      	adds	r2, r3, #4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	602a      	str	r2, [r5, #0]
 8006af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006af8:	2301      	movs	r3, #1
 8006afa:	e09f      	b.n	8006c3c <_printf_i+0x1ec>
 8006afc:	6820      	ldr	r0, [r4, #0]
 8006afe:	682b      	ldr	r3, [r5, #0]
 8006b00:	0607      	lsls	r7, r0, #24
 8006b02:	f103 0104 	add.w	r1, r3, #4
 8006b06:	6029      	str	r1, [r5, #0]
 8006b08:	d501      	bpl.n	8006b0e <_printf_i+0xbe>
 8006b0a:	681e      	ldr	r6, [r3, #0]
 8006b0c:	e003      	b.n	8006b16 <_printf_i+0xc6>
 8006b0e:	0646      	lsls	r6, r0, #25
 8006b10:	d5fb      	bpl.n	8006b0a <_printf_i+0xba>
 8006b12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	da03      	bge.n	8006b22 <_printf_i+0xd2>
 8006b1a:	232d      	movs	r3, #45	; 0x2d
 8006b1c:	4276      	negs	r6, r6
 8006b1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b22:	485a      	ldr	r0, [pc, #360]	; (8006c8c <_printf_i+0x23c>)
 8006b24:	230a      	movs	r3, #10
 8006b26:	e012      	b.n	8006b4e <_printf_i+0xfe>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	6820      	ldr	r0, [r4, #0]
 8006b2c:	1d19      	adds	r1, r3, #4
 8006b2e:	6029      	str	r1, [r5, #0]
 8006b30:	0605      	lsls	r5, r0, #24
 8006b32:	d501      	bpl.n	8006b38 <_printf_i+0xe8>
 8006b34:	681e      	ldr	r6, [r3, #0]
 8006b36:	e002      	b.n	8006b3e <_printf_i+0xee>
 8006b38:	0641      	lsls	r1, r0, #25
 8006b3a:	d5fb      	bpl.n	8006b34 <_printf_i+0xe4>
 8006b3c:	881e      	ldrh	r6, [r3, #0]
 8006b3e:	4853      	ldr	r0, [pc, #332]	; (8006c8c <_printf_i+0x23c>)
 8006b40:	2f6f      	cmp	r7, #111	; 0x6f
 8006b42:	bf0c      	ite	eq
 8006b44:	2308      	moveq	r3, #8
 8006b46:	230a      	movne	r3, #10
 8006b48:	2100      	movs	r1, #0
 8006b4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b4e:	6865      	ldr	r5, [r4, #4]
 8006b50:	60a5      	str	r5, [r4, #8]
 8006b52:	2d00      	cmp	r5, #0
 8006b54:	bfa2      	ittt	ge
 8006b56:	6821      	ldrge	r1, [r4, #0]
 8006b58:	f021 0104 	bicge.w	r1, r1, #4
 8006b5c:	6021      	strge	r1, [r4, #0]
 8006b5e:	b90e      	cbnz	r6, 8006b64 <_printf_i+0x114>
 8006b60:	2d00      	cmp	r5, #0
 8006b62:	d04b      	beq.n	8006bfc <_printf_i+0x1ac>
 8006b64:	4615      	mov	r5, r2
 8006b66:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b6a:	fb03 6711 	mls	r7, r3, r1, r6
 8006b6e:	5dc7      	ldrb	r7, [r0, r7]
 8006b70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b74:	4637      	mov	r7, r6
 8006b76:	42bb      	cmp	r3, r7
 8006b78:	460e      	mov	r6, r1
 8006b7a:	d9f4      	bls.n	8006b66 <_printf_i+0x116>
 8006b7c:	2b08      	cmp	r3, #8
 8006b7e:	d10b      	bne.n	8006b98 <_printf_i+0x148>
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	07de      	lsls	r6, r3, #31
 8006b84:	d508      	bpl.n	8006b98 <_printf_i+0x148>
 8006b86:	6923      	ldr	r3, [r4, #16]
 8006b88:	6861      	ldr	r1, [r4, #4]
 8006b8a:	4299      	cmp	r1, r3
 8006b8c:	bfde      	ittt	le
 8006b8e:	2330      	movle	r3, #48	; 0x30
 8006b90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b98:	1b52      	subs	r2, r2, r5
 8006b9a:	6122      	str	r2, [r4, #16]
 8006b9c:	f8cd a000 	str.w	sl, [sp]
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	aa03      	add	r2, sp, #12
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	4640      	mov	r0, r8
 8006ba8:	f7ff fee4 	bl	8006974 <_printf_common>
 8006bac:	3001      	adds	r0, #1
 8006bae:	d14a      	bne.n	8006c46 <_printf_i+0x1f6>
 8006bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb4:	b004      	add	sp, #16
 8006bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	f043 0320 	orr.w	r3, r3, #32
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	4833      	ldr	r0, [pc, #204]	; (8006c90 <_printf_i+0x240>)
 8006bc4:	2778      	movs	r7, #120	; 0x78
 8006bc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	6829      	ldr	r1, [r5, #0]
 8006bce:	061f      	lsls	r7, r3, #24
 8006bd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006bd4:	d402      	bmi.n	8006bdc <_printf_i+0x18c>
 8006bd6:	065f      	lsls	r7, r3, #25
 8006bd8:	bf48      	it	mi
 8006bda:	b2b6      	uxthmi	r6, r6
 8006bdc:	07df      	lsls	r7, r3, #31
 8006bde:	bf48      	it	mi
 8006be0:	f043 0320 	orrmi.w	r3, r3, #32
 8006be4:	6029      	str	r1, [r5, #0]
 8006be6:	bf48      	it	mi
 8006be8:	6023      	strmi	r3, [r4, #0]
 8006bea:	b91e      	cbnz	r6, 8006bf4 <_printf_i+0x1a4>
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	f023 0320 	bic.w	r3, r3, #32
 8006bf2:	6023      	str	r3, [r4, #0]
 8006bf4:	2310      	movs	r3, #16
 8006bf6:	e7a7      	b.n	8006b48 <_printf_i+0xf8>
 8006bf8:	4824      	ldr	r0, [pc, #144]	; (8006c8c <_printf_i+0x23c>)
 8006bfa:	e7e4      	b.n	8006bc6 <_printf_i+0x176>
 8006bfc:	4615      	mov	r5, r2
 8006bfe:	e7bd      	b.n	8006b7c <_printf_i+0x12c>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	6826      	ldr	r6, [r4, #0]
 8006c04:	6961      	ldr	r1, [r4, #20]
 8006c06:	1d18      	adds	r0, r3, #4
 8006c08:	6028      	str	r0, [r5, #0]
 8006c0a:	0635      	lsls	r5, r6, #24
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	d501      	bpl.n	8006c14 <_printf_i+0x1c4>
 8006c10:	6019      	str	r1, [r3, #0]
 8006c12:	e002      	b.n	8006c1a <_printf_i+0x1ca>
 8006c14:	0670      	lsls	r0, r6, #25
 8006c16:	d5fb      	bpl.n	8006c10 <_printf_i+0x1c0>
 8006c18:	8019      	strh	r1, [r3, #0]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	6123      	str	r3, [r4, #16]
 8006c1e:	4615      	mov	r5, r2
 8006c20:	e7bc      	b.n	8006b9c <_printf_i+0x14c>
 8006c22:	682b      	ldr	r3, [r5, #0]
 8006c24:	1d1a      	adds	r2, r3, #4
 8006c26:	602a      	str	r2, [r5, #0]
 8006c28:	681d      	ldr	r5, [r3, #0]
 8006c2a:	6862      	ldr	r2, [r4, #4]
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f7f9 fade 	bl	80001f0 <memchr>
 8006c34:	b108      	cbz	r0, 8006c3a <_printf_i+0x1ea>
 8006c36:	1b40      	subs	r0, r0, r5
 8006c38:	6060      	str	r0, [r4, #4]
 8006c3a:	6863      	ldr	r3, [r4, #4]
 8006c3c:	6123      	str	r3, [r4, #16]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c44:	e7aa      	b.n	8006b9c <_printf_i+0x14c>
 8006c46:	6923      	ldr	r3, [r4, #16]
 8006c48:	462a      	mov	r2, r5
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	4640      	mov	r0, r8
 8006c4e:	47d0      	blx	sl
 8006c50:	3001      	adds	r0, #1
 8006c52:	d0ad      	beq.n	8006bb0 <_printf_i+0x160>
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	079b      	lsls	r3, r3, #30
 8006c58:	d413      	bmi.n	8006c82 <_printf_i+0x232>
 8006c5a:	68e0      	ldr	r0, [r4, #12]
 8006c5c:	9b03      	ldr	r3, [sp, #12]
 8006c5e:	4298      	cmp	r0, r3
 8006c60:	bfb8      	it	lt
 8006c62:	4618      	movlt	r0, r3
 8006c64:	e7a6      	b.n	8006bb4 <_printf_i+0x164>
 8006c66:	2301      	movs	r3, #1
 8006c68:	4632      	mov	r2, r6
 8006c6a:	4649      	mov	r1, r9
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	47d0      	blx	sl
 8006c70:	3001      	adds	r0, #1
 8006c72:	d09d      	beq.n	8006bb0 <_printf_i+0x160>
 8006c74:	3501      	adds	r5, #1
 8006c76:	68e3      	ldr	r3, [r4, #12]
 8006c78:	9903      	ldr	r1, [sp, #12]
 8006c7a:	1a5b      	subs	r3, r3, r1
 8006c7c:	42ab      	cmp	r3, r5
 8006c7e:	dcf2      	bgt.n	8006c66 <_printf_i+0x216>
 8006c80:	e7eb      	b.n	8006c5a <_printf_i+0x20a>
 8006c82:	2500      	movs	r5, #0
 8006c84:	f104 0619 	add.w	r6, r4, #25
 8006c88:	e7f5      	b.n	8006c76 <_printf_i+0x226>
 8006c8a:	bf00      	nop
 8006c8c:	0800925e 	.word	0x0800925e
 8006c90:	0800926f 	.word	0x0800926f

08006c94 <std>:
 8006c94:	2300      	movs	r3, #0
 8006c96:	b510      	push	{r4, lr}
 8006c98:	4604      	mov	r4, r0
 8006c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ca2:	6083      	str	r3, [r0, #8]
 8006ca4:	8181      	strh	r1, [r0, #12]
 8006ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ca8:	81c2      	strh	r2, [r0, #14]
 8006caa:	6183      	str	r3, [r0, #24]
 8006cac:	4619      	mov	r1, r3
 8006cae:	2208      	movs	r2, #8
 8006cb0:	305c      	adds	r0, #92	; 0x5c
 8006cb2:	f000 f948 	bl	8006f46 <memset>
 8006cb6:	4b0d      	ldr	r3, [pc, #52]	; (8006cec <std+0x58>)
 8006cb8:	6263      	str	r3, [r4, #36]	; 0x24
 8006cba:	4b0d      	ldr	r3, [pc, #52]	; (8006cf0 <std+0x5c>)
 8006cbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <std+0x60>)
 8006cc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cc2:	4b0d      	ldr	r3, [pc, #52]	; (8006cf8 <std+0x64>)
 8006cc4:	6323      	str	r3, [r4, #48]	; 0x30
 8006cc6:	4b0d      	ldr	r3, [pc, #52]	; (8006cfc <std+0x68>)
 8006cc8:	6224      	str	r4, [r4, #32]
 8006cca:	429c      	cmp	r4, r3
 8006ccc:	d006      	beq.n	8006cdc <std+0x48>
 8006cce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006cd2:	4294      	cmp	r4, r2
 8006cd4:	d002      	beq.n	8006cdc <std+0x48>
 8006cd6:	33d0      	adds	r3, #208	; 0xd0
 8006cd8:	429c      	cmp	r4, r3
 8006cda:	d105      	bne.n	8006ce8 <std+0x54>
 8006cdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ce4:	f000 b9ba 	b.w	800705c <__retarget_lock_init_recursive>
 8006ce8:	bd10      	pop	{r4, pc}
 8006cea:	bf00      	nop
 8006cec:	08006ec1 	.word	0x08006ec1
 8006cf0:	08006ee3 	.word	0x08006ee3
 8006cf4:	08006f1b 	.word	0x08006f1b
 8006cf8:	08006f3f 	.word	0x08006f3f
 8006cfc:	20000394 	.word	0x20000394

08006d00 <stdio_exit_handler>:
 8006d00:	4a02      	ldr	r2, [pc, #8]	; (8006d0c <stdio_exit_handler+0xc>)
 8006d02:	4903      	ldr	r1, [pc, #12]	; (8006d10 <stdio_exit_handler+0x10>)
 8006d04:	4803      	ldr	r0, [pc, #12]	; (8006d14 <stdio_exit_handler+0x14>)
 8006d06:	f000 b869 	b.w	8006ddc <_fwalk_sglue>
 8006d0a:	bf00      	nop
 8006d0c:	2000000c 	.word	0x2000000c
 8006d10:	08008a11 	.word	0x08008a11
 8006d14:	20000018 	.word	0x20000018

08006d18 <cleanup_stdio>:
 8006d18:	6841      	ldr	r1, [r0, #4]
 8006d1a:	4b0c      	ldr	r3, [pc, #48]	; (8006d4c <cleanup_stdio+0x34>)
 8006d1c:	4299      	cmp	r1, r3
 8006d1e:	b510      	push	{r4, lr}
 8006d20:	4604      	mov	r4, r0
 8006d22:	d001      	beq.n	8006d28 <cleanup_stdio+0x10>
 8006d24:	f001 fe74 	bl	8008a10 <_fflush_r>
 8006d28:	68a1      	ldr	r1, [r4, #8]
 8006d2a:	4b09      	ldr	r3, [pc, #36]	; (8006d50 <cleanup_stdio+0x38>)
 8006d2c:	4299      	cmp	r1, r3
 8006d2e:	d002      	beq.n	8006d36 <cleanup_stdio+0x1e>
 8006d30:	4620      	mov	r0, r4
 8006d32:	f001 fe6d 	bl	8008a10 <_fflush_r>
 8006d36:	68e1      	ldr	r1, [r4, #12]
 8006d38:	4b06      	ldr	r3, [pc, #24]	; (8006d54 <cleanup_stdio+0x3c>)
 8006d3a:	4299      	cmp	r1, r3
 8006d3c:	d004      	beq.n	8006d48 <cleanup_stdio+0x30>
 8006d3e:	4620      	mov	r0, r4
 8006d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d44:	f001 be64 	b.w	8008a10 <_fflush_r>
 8006d48:	bd10      	pop	{r4, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000394 	.word	0x20000394
 8006d50:	200003fc 	.word	0x200003fc
 8006d54:	20000464 	.word	0x20000464

08006d58 <global_stdio_init.part.0>:
 8006d58:	b510      	push	{r4, lr}
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <global_stdio_init.part.0+0x30>)
 8006d5c:	4c0b      	ldr	r4, [pc, #44]	; (8006d8c <global_stdio_init.part.0+0x34>)
 8006d5e:	4a0c      	ldr	r2, [pc, #48]	; (8006d90 <global_stdio_init.part.0+0x38>)
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	4620      	mov	r0, r4
 8006d64:	2200      	movs	r2, #0
 8006d66:	2104      	movs	r1, #4
 8006d68:	f7ff ff94 	bl	8006c94 <std>
 8006d6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006d70:	2201      	movs	r2, #1
 8006d72:	2109      	movs	r1, #9
 8006d74:	f7ff ff8e 	bl	8006c94 <std>
 8006d78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d82:	2112      	movs	r1, #18
 8006d84:	f7ff bf86 	b.w	8006c94 <std>
 8006d88:	200004cc 	.word	0x200004cc
 8006d8c:	20000394 	.word	0x20000394
 8006d90:	08006d01 	.word	0x08006d01

08006d94 <__sfp_lock_acquire>:
 8006d94:	4801      	ldr	r0, [pc, #4]	; (8006d9c <__sfp_lock_acquire+0x8>)
 8006d96:	f000 b962 	b.w	800705e <__retarget_lock_acquire_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	200004d5 	.word	0x200004d5

08006da0 <__sfp_lock_release>:
 8006da0:	4801      	ldr	r0, [pc, #4]	; (8006da8 <__sfp_lock_release+0x8>)
 8006da2:	f000 b95d 	b.w	8007060 <__retarget_lock_release_recursive>
 8006da6:	bf00      	nop
 8006da8:	200004d5 	.word	0x200004d5

08006dac <__sinit>:
 8006dac:	b510      	push	{r4, lr}
 8006dae:	4604      	mov	r4, r0
 8006db0:	f7ff fff0 	bl	8006d94 <__sfp_lock_acquire>
 8006db4:	6a23      	ldr	r3, [r4, #32]
 8006db6:	b11b      	cbz	r3, 8006dc0 <__sinit+0x14>
 8006db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dbc:	f7ff bff0 	b.w	8006da0 <__sfp_lock_release>
 8006dc0:	4b04      	ldr	r3, [pc, #16]	; (8006dd4 <__sinit+0x28>)
 8006dc2:	6223      	str	r3, [r4, #32]
 8006dc4:	4b04      	ldr	r3, [pc, #16]	; (8006dd8 <__sinit+0x2c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1f5      	bne.n	8006db8 <__sinit+0xc>
 8006dcc:	f7ff ffc4 	bl	8006d58 <global_stdio_init.part.0>
 8006dd0:	e7f2      	b.n	8006db8 <__sinit+0xc>
 8006dd2:	bf00      	nop
 8006dd4:	08006d19 	.word	0x08006d19
 8006dd8:	200004cc 	.word	0x200004cc

08006ddc <_fwalk_sglue>:
 8006ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de0:	4607      	mov	r7, r0
 8006de2:	4688      	mov	r8, r1
 8006de4:	4614      	mov	r4, r2
 8006de6:	2600      	movs	r6, #0
 8006de8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dec:	f1b9 0901 	subs.w	r9, r9, #1
 8006df0:	d505      	bpl.n	8006dfe <_fwalk_sglue+0x22>
 8006df2:	6824      	ldr	r4, [r4, #0]
 8006df4:	2c00      	cmp	r4, #0
 8006df6:	d1f7      	bne.n	8006de8 <_fwalk_sglue+0xc>
 8006df8:	4630      	mov	r0, r6
 8006dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dfe:	89ab      	ldrh	r3, [r5, #12]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d907      	bls.n	8006e14 <_fwalk_sglue+0x38>
 8006e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	d003      	beq.n	8006e14 <_fwalk_sglue+0x38>
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	4638      	mov	r0, r7
 8006e10:	47c0      	blx	r8
 8006e12:	4306      	orrs	r6, r0
 8006e14:	3568      	adds	r5, #104	; 0x68
 8006e16:	e7e9      	b.n	8006dec <_fwalk_sglue+0x10>

08006e18 <sniprintf>:
 8006e18:	b40c      	push	{r2, r3}
 8006e1a:	b530      	push	{r4, r5, lr}
 8006e1c:	4b17      	ldr	r3, [pc, #92]	; (8006e7c <sniprintf+0x64>)
 8006e1e:	1e0c      	subs	r4, r1, #0
 8006e20:	681d      	ldr	r5, [r3, #0]
 8006e22:	b09d      	sub	sp, #116	; 0x74
 8006e24:	da08      	bge.n	8006e38 <sniprintf+0x20>
 8006e26:	238b      	movs	r3, #139	; 0x8b
 8006e28:	602b      	str	r3, [r5, #0]
 8006e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2e:	b01d      	add	sp, #116	; 0x74
 8006e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e34:	b002      	add	sp, #8
 8006e36:	4770      	bx	lr
 8006e38:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006e3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e40:	bf14      	ite	ne
 8006e42:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006e46:	4623      	moveq	r3, r4
 8006e48:	9304      	str	r3, [sp, #16]
 8006e4a:	9307      	str	r3, [sp, #28]
 8006e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e50:	9002      	str	r0, [sp, #8]
 8006e52:	9006      	str	r0, [sp, #24]
 8006e54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006e5a:	ab21      	add	r3, sp, #132	; 0x84
 8006e5c:	a902      	add	r1, sp, #8
 8006e5e:	4628      	mov	r0, r5
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	f001 fc51 	bl	8008708 <_svfiprintf_r>
 8006e66:	1c43      	adds	r3, r0, #1
 8006e68:	bfbc      	itt	lt
 8006e6a:	238b      	movlt	r3, #139	; 0x8b
 8006e6c:	602b      	strlt	r3, [r5, #0]
 8006e6e:	2c00      	cmp	r4, #0
 8006e70:	d0dd      	beq.n	8006e2e <sniprintf+0x16>
 8006e72:	9b02      	ldr	r3, [sp, #8]
 8006e74:	2200      	movs	r2, #0
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	e7d9      	b.n	8006e2e <sniprintf+0x16>
 8006e7a:	bf00      	nop
 8006e7c:	20000064 	.word	0x20000064

08006e80 <siprintf>:
 8006e80:	b40e      	push	{r1, r2, r3}
 8006e82:	b500      	push	{lr}
 8006e84:	b09c      	sub	sp, #112	; 0x70
 8006e86:	ab1d      	add	r3, sp, #116	; 0x74
 8006e88:	9002      	str	r0, [sp, #8]
 8006e8a:	9006      	str	r0, [sp, #24]
 8006e8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e90:	4809      	ldr	r0, [pc, #36]	; (8006eb8 <siprintf+0x38>)
 8006e92:	9107      	str	r1, [sp, #28]
 8006e94:	9104      	str	r1, [sp, #16]
 8006e96:	4909      	ldr	r1, [pc, #36]	; (8006ebc <siprintf+0x3c>)
 8006e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e9c:	9105      	str	r1, [sp, #20]
 8006e9e:	6800      	ldr	r0, [r0, #0]
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	a902      	add	r1, sp, #8
 8006ea4:	f001 fc30 	bl	8008708 <_svfiprintf_r>
 8006ea8:	9b02      	ldr	r3, [sp, #8]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	701a      	strb	r2, [r3, #0]
 8006eae:	b01c      	add	sp, #112	; 0x70
 8006eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eb4:	b003      	add	sp, #12
 8006eb6:	4770      	bx	lr
 8006eb8:	20000064 	.word	0x20000064
 8006ebc:	ffff0208 	.word	0xffff0208

08006ec0 <__sread>:
 8006ec0:	b510      	push	{r4, lr}
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ec8:	f000 f87a 	bl	8006fc0 <_read_r>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	bfab      	itete	ge
 8006ed0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ed4:	181b      	addge	r3, r3, r0
 8006ed6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006eda:	bfac      	ite	ge
 8006edc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ede:	81a3      	strhlt	r3, [r4, #12]
 8006ee0:	bd10      	pop	{r4, pc}

08006ee2 <__swrite>:
 8006ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee6:	461f      	mov	r7, r3
 8006ee8:	898b      	ldrh	r3, [r1, #12]
 8006eea:	05db      	lsls	r3, r3, #23
 8006eec:	4605      	mov	r5, r0
 8006eee:	460c      	mov	r4, r1
 8006ef0:	4616      	mov	r6, r2
 8006ef2:	d505      	bpl.n	8006f00 <__swrite+0x1e>
 8006ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef8:	2302      	movs	r3, #2
 8006efa:	2200      	movs	r2, #0
 8006efc:	f000 f84e 	bl	8006f9c <_lseek_r>
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f0a:	81a3      	strh	r3, [r4, #12]
 8006f0c:	4632      	mov	r2, r6
 8006f0e:	463b      	mov	r3, r7
 8006f10:	4628      	mov	r0, r5
 8006f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f16:	f000 b865 	b.w	8006fe4 <_write_r>

08006f1a <__sseek>:
 8006f1a:	b510      	push	{r4, lr}
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f22:	f000 f83b 	bl	8006f9c <_lseek_r>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	89a3      	ldrh	r3, [r4, #12]
 8006f2a:	bf15      	itete	ne
 8006f2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f36:	81a3      	strheq	r3, [r4, #12]
 8006f38:	bf18      	it	ne
 8006f3a:	81a3      	strhne	r3, [r4, #12]
 8006f3c:	bd10      	pop	{r4, pc}

08006f3e <__sclose>:
 8006f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f42:	f000 b81b 	b.w	8006f7c <_close_r>

08006f46 <memset>:
 8006f46:	4402      	add	r2, r0
 8006f48:	4603      	mov	r3, r0
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d100      	bne.n	8006f50 <memset+0xa>
 8006f4e:	4770      	bx	lr
 8006f50:	f803 1b01 	strb.w	r1, [r3], #1
 8006f54:	e7f9      	b.n	8006f4a <memset+0x4>

08006f56 <strcat>:
 8006f56:	b510      	push	{r4, lr}
 8006f58:	4602      	mov	r2, r0
 8006f5a:	7814      	ldrb	r4, [r2, #0]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	3201      	adds	r2, #1
 8006f60:	2c00      	cmp	r4, #0
 8006f62:	d1fa      	bne.n	8006f5a <strcat+0x4>
 8006f64:	3b01      	subs	r3, #1
 8006f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f6e:	2a00      	cmp	r2, #0
 8006f70:	d1f9      	bne.n	8006f66 <strcat+0x10>
 8006f72:	bd10      	pop	{r4, pc}

08006f74 <_localeconv_r>:
 8006f74:	4800      	ldr	r0, [pc, #0]	; (8006f78 <_localeconv_r+0x4>)
 8006f76:	4770      	bx	lr
 8006f78:	20000158 	.word	0x20000158

08006f7c <_close_r>:
 8006f7c:	b538      	push	{r3, r4, r5, lr}
 8006f7e:	4d06      	ldr	r5, [pc, #24]	; (8006f98 <_close_r+0x1c>)
 8006f80:	2300      	movs	r3, #0
 8006f82:	4604      	mov	r4, r0
 8006f84:	4608      	mov	r0, r1
 8006f86:	602b      	str	r3, [r5, #0]
 8006f88:	f7fa fcb3 	bl	80018f2 <_close>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d102      	bne.n	8006f96 <_close_r+0x1a>
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	b103      	cbz	r3, 8006f96 <_close_r+0x1a>
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	200004d0 	.word	0x200004d0

08006f9c <_lseek_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4d07      	ldr	r5, [pc, #28]	; (8006fbc <_lseek_r+0x20>)
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	4608      	mov	r0, r1
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	602a      	str	r2, [r5, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f7fa fcc8 	bl	8001940 <_lseek>
 8006fb0:	1c43      	adds	r3, r0, #1
 8006fb2:	d102      	bne.n	8006fba <_lseek_r+0x1e>
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	b103      	cbz	r3, 8006fba <_lseek_r+0x1e>
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	bd38      	pop	{r3, r4, r5, pc}
 8006fbc:	200004d0 	.word	0x200004d0

08006fc0 <_read_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4d07      	ldr	r5, [pc, #28]	; (8006fe0 <_read_r+0x20>)
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	4608      	mov	r0, r1
 8006fc8:	4611      	mov	r1, r2
 8006fca:	2200      	movs	r2, #0
 8006fcc:	602a      	str	r2, [r5, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f7fa fc56 	bl	8001880 <_read>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d102      	bne.n	8006fde <_read_r+0x1e>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	b103      	cbz	r3, 8006fde <_read_r+0x1e>
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	bd38      	pop	{r3, r4, r5, pc}
 8006fe0:	200004d0 	.word	0x200004d0

08006fe4 <_write_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	4d07      	ldr	r5, [pc, #28]	; (8007004 <_write_r+0x20>)
 8006fe8:	4604      	mov	r4, r0
 8006fea:	4608      	mov	r0, r1
 8006fec:	4611      	mov	r1, r2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	602a      	str	r2, [r5, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f7fa fc61 	bl	80018ba <_write>
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	d102      	bne.n	8007002 <_write_r+0x1e>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	b103      	cbz	r3, 8007002 <_write_r+0x1e>
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	bd38      	pop	{r3, r4, r5, pc}
 8007004:	200004d0 	.word	0x200004d0

08007008 <__errno>:
 8007008:	4b01      	ldr	r3, [pc, #4]	; (8007010 <__errno+0x8>)
 800700a:	6818      	ldr	r0, [r3, #0]
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	20000064 	.word	0x20000064

08007014 <__libc_init_array>:
 8007014:	b570      	push	{r4, r5, r6, lr}
 8007016:	4d0d      	ldr	r5, [pc, #52]	; (800704c <__libc_init_array+0x38>)
 8007018:	4c0d      	ldr	r4, [pc, #52]	; (8007050 <__libc_init_array+0x3c>)
 800701a:	1b64      	subs	r4, r4, r5
 800701c:	10a4      	asrs	r4, r4, #2
 800701e:	2600      	movs	r6, #0
 8007020:	42a6      	cmp	r6, r4
 8007022:	d109      	bne.n	8007038 <__libc_init_array+0x24>
 8007024:	4d0b      	ldr	r5, [pc, #44]	; (8007054 <__libc_init_array+0x40>)
 8007026:	4c0c      	ldr	r4, [pc, #48]	; (8007058 <__libc_init_array+0x44>)
 8007028:	f002 f896 	bl	8009158 <_init>
 800702c:	1b64      	subs	r4, r4, r5
 800702e:	10a4      	asrs	r4, r4, #2
 8007030:	2600      	movs	r6, #0
 8007032:	42a6      	cmp	r6, r4
 8007034:	d105      	bne.n	8007042 <__libc_init_array+0x2e>
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	f855 3b04 	ldr.w	r3, [r5], #4
 800703c:	4798      	blx	r3
 800703e:	3601      	adds	r6, #1
 8007040:	e7ee      	b.n	8007020 <__libc_init_array+0xc>
 8007042:	f855 3b04 	ldr.w	r3, [r5], #4
 8007046:	4798      	blx	r3
 8007048:	3601      	adds	r6, #1
 800704a:	e7f2      	b.n	8007032 <__libc_init_array+0x1e>
 800704c:	080095bc 	.word	0x080095bc
 8007050:	080095bc 	.word	0x080095bc
 8007054:	080095bc 	.word	0x080095bc
 8007058:	080095c0 	.word	0x080095c0

0800705c <__retarget_lock_init_recursive>:
 800705c:	4770      	bx	lr

0800705e <__retarget_lock_acquire_recursive>:
 800705e:	4770      	bx	lr

08007060 <__retarget_lock_release_recursive>:
 8007060:	4770      	bx	lr

08007062 <quorem>:
 8007062:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007066:	6903      	ldr	r3, [r0, #16]
 8007068:	690c      	ldr	r4, [r1, #16]
 800706a:	42a3      	cmp	r3, r4
 800706c:	4607      	mov	r7, r0
 800706e:	db7e      	blt.n	800716e <quorem+0x10c>
 8007070:	3c01      	subs	r4, #1
 8007072:	f101 0814 	add.w	r8, r1, #20
 8007076:	f100 0514 	add.w	r5, r0, #20
 800707a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800707e:	9301      	str	r3, [sp, #4]
 8007080:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007084:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007088:	3301      	adds	r3, #1
 800708a:	429a      	cmp	r2, r3
 800708c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007090:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007094:	fbb2 f6f3 	udiv	r6, r2, r3
 8007098:	d331      	bcc.n	80070fe <quorem+0x9c>
 800709a:	f04f 0e00 	mov.w	lr, #0
 800709e:	4640      	mov	r0, r8
 80070a0:	46ac      	mov	ip, r5
 80070a2:	46f2      	mov	sl, lr
 80070a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80070a8:	b293      	uxth	r3, r2
 80070aa:	fb06 e303 	mla	r3, r6, r3, lr
 80070ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070b2:	0c1a      	lsrs	r2, r3, #16
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	ebaa 0303 	sub.w	r3, sl, r3
 80070ba:	f8dc a000 	ldr.w	sl, [ip]
 80070be:	fa13 f38a 	uxtah	r3, r3, sl
 80070c2:	fb06 220e 	mla	r2, r6, lr, r2
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	9b00      	ldr	r3, [sp, #0]
 80070ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070ce:	b292      	uxth	r2, r2
 80070d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80070d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80070dc:	4581      	cmp	r9, r0
 80070de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070e2:	f84c 3b04 	str.w	r3, [ip], #4
 80070e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070ea:	d2db      	bcs.n	80070a4 <quorem+0x42>
 80070ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80070f0:	b92b      	cbnz	r3, 80070fe <quorem+0x9c>
 80070f2:	9b01      	ldr	r3, [sp, #4]
 80070f4:	3b04      	subs	r3, #4
 80070f6:	429d      	cmp	r5, r3
 80070f8:	461a      	mov	r2, r3
 80070fa:	d32c      	bcc.n	8007156 <quorem+0xf4>
 80070fc:	613c      	str	r4, [r7, #16]
 80070fe:	4638      	mov	r0, r7
 8007100:	f001 f9a8 	bl	8008454 <__mcmp>
 8007104:	2800      	cmp	r0, #0
 8007106:	db22      	blt.n	800714e <quorem+0xec>
 8007108:	3601      	adds	r6, #1
 800710a:	4629      	mov	r1, r5
 800710c:	2000      	movs	r0, #0
 800710e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007112:	f8d1 c000 	ldr.w	ip, [r1]
 8007116:	b293      	uxth	r3, r2
 8007118:	1ac3      	subs	r3, r0, r3
 800711a:	0c12      	lsrs	r2, r2, #16
 800711c:	fa13 f38c 	uxtah	r3, r3, ip
 8007120:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007124:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007128:	b29b      	uxth	r3, r3
 800712a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800712e:	45c1      	cmp	r9, r8
 8007130:	f841 3b04 	str.w	r3, [r1], #4
 8007134:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007138:	d2e9      	bcs.n	800710e <quorem+0xac>
 800713a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800713e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007142:	b922      	cbnz	r2, 800714e <quorem+0xec>
 8007144:	3b04      	subs	r3, #4
 8007146:	429d      	cmp	r5, r3
 8007148:	461a      	mov	r2, r3
 800714a:	d30a      	bcc.n	8007162 <quorem+0x100>
 800714c:	613c      	str	r4, [r7, #16]
 800714e:	4630      	mov	r0, r6
 8007150:	b003      	add	sp, #12
 8007152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007156:	6812      	ldr	r2, [r2, #0]
 8007158:	3b04      	subs	r3, #4
 800715a:	2a00      	cmp	r2, #0
 800715c:	d1ce      	bne.n	80070fc <quorem+0x9a>
 800715e:	3c01      	subs	r4, #1
 8007160:	e7c9      	b.n	80070f6 <quorem+0x94>
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	3b04      	subs	r3, #4
 8007166:	2a00      	cmp	r2, #0
 8007168:	d1f0      	bne.n	800714c <quorem+0xea>
 800716a:	3c01      	subs	r4, #1
 800716c:	e7eb      	b.n	8007146 <quorem+0xe4>
 800716e:	2000      	movs	r0, #0
 8007170:	e7ee      	b.n	8007150 <quorem+0xee>
 8007172:	0000      	movs	r0, r0
 8007174:	0000      	movs	r0, r0
	...

08007178 <_dtoa_r>:
 8007178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717c:	ed2d 8b04 	vpush	{d8-d9}
 8007180:	69c5      	ldr	r5, [r0, #28]
 8007182:	b093      	sub	sp, #76	; 0x4c
 8007184:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007188:	ec57 6b10 	vmov	r6, r7, d0
 800718c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007190:	9107      	str	r1, [sp, #28]
 8007192:	4604      	mov	r4, r0
 8007194:	920a      	str	r2, [sp, #40]	; 0x28
 8007196:	930d      	str	r3, [sp, #52]	; 0x34
 8007198:	b975      	cbnz	r5, 80071b8 <_dtoa_r+0x40>
 800719a:	2010      	movs	r0, #16
 800719c:	f000 fe2a 	bl	8007df4 <malloc>
 80071a0:	4602      	mov	r2, r0
 80071a2:	61e0      	str	r0, [r4, #28]
 80071a4:	b920      	cbnz	r0, 80071b0 <_dtoa_r+0x38>
 80071a6:	4bae      	ldr	r3, [pc, #696]	; (8007460 <_dtoa_r+0x2e8>)
 80071a8:	21ef      	movs	r1, #239	; 0xef
 80071aa:	48ae      	ldr	r0, [pc, #696]	; (8007464 <_dtoa_r+0x2ec>)
 80071ac:	f001 fc90 	bl	8008ad0 <__assert_func>
 80071b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071b4:	6005      	str	r5, [r0, #0]
 80071b6:	60c5      	str	r5, [r0, #12]
 80071b8:	69e3      	ldr	r3, [r4, #28]
 80071ba:	6819      	ldr	r1, [r3, #0]
 80071bc:	b151      	cbz	r1, 80071d4 <_dtoa_r+0x5c>
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	604a      	str	r2, [r1, #4]
 80071c2:	2301      	movs	r3, #1
 80071c4:	4093      	lsls	r3, r2
 80071c6:	608b      	str	r3, [r1, #8]
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 ff07 	bl	8007fdc <_Bfree>
 80071ce:	69e3      	ldr	r3, [r4, #28]
 80071d0:	2200      	movs	r2, #0
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	1e3b      	subs	r3, r7, #0
 80071d6:	bfbb      	ittet	lt
 80071d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80071dc:	9303      	strlt	r3, [sp, #12]
 80071de:	2300      	movge	r3, #0
 80071e0:	2201      	movlt	r2, #1
 80071e2:	bfac      	ite	ge
 80071e4:	f8c8 3000 	strge.w	r3, [r8]
 80071e8:	f8c8 2000 	strlt.w	r2, [r8]
 80071ec:	4b9e      	ldr	r3, [pc, #632]	; (8007468 <_dtoa_r+0x2f0>)
 80071ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80071f2:	ea33 0308 	bics.w	r3, r3, r8
 80071f6:	d11b      	bne.n	8007230 <_dtoa_r+0xb8>
 80071f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007204:	4333      	orrs	r3, r6
 8007206:	f000 8593 	beq.w	8007d30 <_dtoa_r+0xbb8>
 800720a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800720c:	b963      	cbnz	r3, 8007228 <_dtoa_r+0xb0>
 800720e:	4b97      	ldr	r3, [pc, #604]	; (800746c <_dtoa_r+0x2f4>)
 8007210:	e027      	b.n	8007262 <_dtoa_r+0xea>
 8007212:	4b97      	ldr	r3, [pc, #604]	; (8007470 <_dtoa_r+0x2f8>)
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	3308      	adds	r3, #8
 8007218:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	9800      	ldr	r0, [sp, #0]
 800721e:	b013      	add	sp, #76	; 0x4c
 8007220:	ecbd 8b04 	vpop	{d8-d9}
 8007224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007228:	4b90      	ldr	r3, [pc, #576]	; (800746c <_dtoa_r+0x2f4>)
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	3303      	adds	r3, #3
 800722e:	e7f3      	b.n	8007218 <_dtoa_r+0xa0>
 8007230:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007234:	2200      	movs	r2, #0
 8007236:	ec51 0b17 	vmov	r0, r1, d7
 800723a:	eeb0 8a47 	vmov.f32	s16, s14
 800723e:	eef0 8a67 	vmov.f32	s17, s15
 8007242:	2300      	movs	r3, #0
 8007244:	f7f9 fc50 	bl	8000ae8 <__aeabi_dcmpeq>
 8007248:	4681      	mov	r9, r0
 800724a:	b160      	cbz	r0, 8007266 <_dtoa_r+0xee>
 800724c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800724e:	2301      	movs	r3, #1
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8568 	beq.w	8007d2a <_dtoa_r+0xbb2>
 800725a:	4b86      	ldr	r3, [pc, #536]	; (8007474 <_dtoa_r+0x2fc>)
 800725c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	3b01      	subs	r3, #1
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	e7da      	b.n	800721c <_dtoa_r+0xa4>
 8007266:	aa10      	add	r2, sp, #64	; 0x40
 8007268:	a911      	add	r1, sp, #68	; 0x44
 800726a:	4620      	mov	r0, r4
 800726c:	eeb0 0a48 	vmov.f32	s0, s16
 8007270:	eef0 0a68 	vmov.f32	s1, s17
 8007274:	f001 f994 	bl	80085a0 <__d2b>
 8007278:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800727c:	4682      	mov	sl, r0
 800727e:	2d00      	cmp	r5, #0
 8007280:	d07f      	beq.n	8007382 <_dtoa_r+0x20a>
 8007282:	ee18 3a90 	vmov	r3, s17
 8007286:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800728a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800728e:	ec51 0b18 	vmov	r0, r1, d8
 8007292:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007296:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800729a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800729e:	4619      	mov	r1, r3
 80072a0:	2200      	movs	r2, #0
 80072a2:	4b75      	ldr	r3, [pc, #468]	; (8007478 <_dtoa_r+0x300>)
 80072a4:	f7f9 f800 	bl	80002a8 <__aeabi_dsub>
 80072a8:	a367      	add	r3, pc, #412	; (adr r3, 8007448 <_dtoa_r+0x2d0>)
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	f7f9 f9b3 	bl	8000618 <__aeabi_dmul>
 80072b2:	a367      	add	r3, pc, #412	; (adr r3, 8007450 <_dtoa_r+0x2d8>)
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	f7f8 fff8 	bl	80002ac <__adddf3>
 80072bc:	4606      	mov	r6, r0
 80072be:	4628      	mov	r0, r5
 80072c0:	460f      	mov	r7, r1
 80072c2:	f7f9 f93f 	bl	8000544 <__aeabi_i2d>
 80072c6:	a364      	add	r3, pc, #400	; (adr r3, 8007458 <_dtoa_r+0x2e0>)
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	f7f9 f9a4 	bl	8000618 <__aeabi_dmul>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4630      	mov	r0, r6
 80072d6:	4639      	mov	r1, r7
 80072d8:	f7f8 ffe8 	bl	80002ac <__adddf3>
 80072dc:	4606      	mov	r6, r0
 80072de:	460f      	mov	r7, r1
 80072e0:	f7f9 fc4a 	bl	8000b78 <__aeabi_d2iz>
 80072e4:	2200      	movs	r2, #0
 80072e6:	4683      	mov	fp, r0
 80072e8:	2300      	movs	r3, #0
 80072ea:	4630      	mov	r0, r6
 80072ec:	4639      	mov	r1, r7
 80072ee:	f7f9 fc05 	bl	8000afc <__aeabi_dcmplt>
 80072f2:	b148      	cbz	r0, 8007308 <_dtoa_r+0x190>
 80072f4:	4658      	mov	r0, fp
 80072f6:	f7f9 f925 	bl	8000544 <__aeabi_i2d>
 80072fa:	4632      	mov	r2, r6
 80072fc:	463b      	mov	r3, r7
 80072fe:	f7f9 fbf3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007302:	b908      	cbnz	r0, 8007308 <_dtoa_r+0x190>
 8007304:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007308:	f1bb 0f16 	cmp.w	fp, #22
 800730c:	d857      	bhi.n	80073be <_dtoa_r+0x246>
 800730e:	4b5b      	ldr	r3, [pc, #364]	; (800747c <_dtoa_r+0x304>)
 8007310:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007318:	ec51 0b18 	vmov	r0, r1, d8
 800731c:	f7f9 fbee 	bl	8000afc <__aeabi_dcmplt>
 8007320:	2800      	cmp	r0, #0
 8007322:	d04e      	beq.n	80073c2 <_dtoa_r+0x24a>
 8007324:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007328:	2300      	movs	r3, #0
 800732a:	930c      	str	r3, [sp, #48]	; 0x30
 800732c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800732e:	1b5b      	subs	r3, r3, r5
 8007330:	1e5a      	subs	r2, r3, #1
 8007332:	bf45      	ittet	mi
 8007334:	f1c3 0301 	rsbmi	r3, r3, #1
 8007338:	9305      	strmi	r3, [sp, #20]
 800733a:	2300      	movpl	r3, #0
 800733c:	2300      	movmi	r3, #0
 800733e:	9206      	str	r2, [sp, #24]
 8007340:	bf54      	ite	pl
 8007342:	9305      	strpl	r3, [sp, #20]
 8007344:	9306      	strmi	r3, [sp, #24]
 8007346:	f1bb 0f00 	cmp.w	fp, #0
 800734a:	db3c      	blt.n	80073c6 <_dtoa_r+0x24e>
 800734c:	9b06      	ldr	r3, [sp, #24]
 800734e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007352:	445b      	add	r3, fp
 8007354:	9306      	str	r3, [sp, #24]
 8007356:	2300      	movs	r3, #0
 8007358:	9308      	str	r3, [sp, #32]
 800735a:	9b07      	ldr	r3, [sp, #28]
 800735c:	2b09      	cmp	r3, #9
 800735e:	d868      	bhi.n	8007432 <_dtoa_r+0x2ba>
 8007360:	2b05      	cmp	r3, #5
 8007362:	bfc4      	itt	gt
 8007364:	3b04      	subgt	r3, #4
 8007366:	9307      	strgt	r3, [sp, #28]
 8007368:	9b07      	ldr	r3, [sp, #28]
 800736a:	f1a3 0302 	sub.w	r3, r3, #2
 800736e:	bfcc      	ite	gt
 8007370:	2500      	movgt	r5, #0
 8007372:	2501      	movle	r5, #1
 8007374:	2b03      	cmp	r3, #3
 8007376:	f200 8085 	bhi.w	8007484 <_dtoa_r+0x30c>
 800737a:	e8df f003 	tbb	[pc, r3]
 800737e:	3b2e      	.short	0x3b2e
 8007380:	5839      	.short	0x5839
 8007382:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007386:	441d      	add	r5, r3
 8007388:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800738c:	2b20      	cmp	r3, #32
 800738e:	bfc1      	itttt	gt
 8007390:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007394:	fa08 f803 	lslgt.w	r8, r8, r3
 8007398:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800739c:	fa26 f303 	lsrgt.w	r3, r6, r3
 80073a0:	bfd6      	itet	le
 80073a2:	f1c3 0320 	rsble	r3, r3, #32
 80073a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80073aa:	fa06 f003 	lslle.w	r0, r6, r3
 80073ae:	f7f9 f8b9 	bl	8000524 <__aeabi_ui2d>
 80073b2:	2201      	movs	r2, #1
 80073b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80073b8:	3d01      	subs	r5, #1
 80073ba:	920e      	str	r2, [sp, #56]	; 0x38
 80073bc:	e76f      	b.n	800729e <_dtoa_r+0x126>
 80073be:	2301      	movs	r3, #1
 80073c0:	e7b3      	b.n	800732a <_dtoa_r+0x1b2>
 80073c2:	900c      	str	r0, [sp, #48]	; 0x30
 80073c4:	e7b2      	b.n	800732c <_dtoa_r+0x1b4>
 80073c6:	9b05      	ldr	r3, [sp, #20]
 80073c8:	eba3 030b 	sub.w	r3, r3, fp
 80073cc:	9305      	str	r3, [sp, #20]
 80073ce:	f1cb 0300 	rsb	r3, fp, #0
 80073d2:	9308      	str	r3, [sp, #32]
 80073d4:	2300      	movs	r3, #0
 80073d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80073d8:	e7bf      	b.n	800735a <_dtoa_r+0x1e2>
 80073da:	2300      	movs	r3, #0
 80073dc:	9309      	str	r3, [sp, #36]	; 0x24
 80073de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	dc52      	bgt.n	800748a <_dtoa_r+0x312>
 80073e4:	2301      	movs	r3, #1
 80073e6:	9301      	str	r3, [sp, #4]
 80073e8:	9304      	str	r3, [sp, #16]
 80073ea:	461a      	mov	r2, r3
 80073ec:	920a      	str	r2, [sp, #40]	; 0x28
 80073ee:	e00b      	b.n	8007408 <_dtoa_r+0x290>
 80073f0:	2301      	movs	r3, #1
 80073f2:	e7f3      	b.n	80073dc <_dtoa_r+0x264>
 80073f4:	2300      	movs	r3, #0
 80073f6:	9309      	str	r3, [sp, #36]	; 0x24
 80073f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073fa:	445b      	add	r3, fp
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	3301      	adds	r3, #1
 8007400:	2b01      	cmp	r3, #1
 8007402:	9304      	str	r3, [sp, #16]
 8007404:	bfb8      	it	lt
 8007406:	2301      	movlt	r3, #1
 8007408:	69e0      	ldr	r0, [r4, #28]
 800740a:	2100      	movs	r1, #0
 800740c:	2204      	movs	r2, #4
 800740e:	f102 0614 	add.w	r6, r2, #20
 8007412:	429e      	cmp	r6, r3
 8007414:	d93d      	bls.n	8007492 <_dtoa_r+0x31a>
 8007416:	6041      	str	r1, [r0, #4]
 8007418:	4620      	mov	r0, r4
 800741a:	f000 fd9f 	bl	8007f5c <_Balloc>
 800741e:	9000      	str	r0, [sp, #0]
 8007420:	2800      	cmp	r0, #0
 8007422:	d139      	bne.n	8007498 <_dtoa_r+0x320>
 8007424:	4b16      	ldr	r3, [pc, #88]	; (8007480 <_dtoa_r+0x308>)
 8007426:	4602      	mov	r2, r0
 8007428:	f240 11af 	movw	r1, #431	; 0x1af
 800742c:	e6bd      	b.n	80071aa <_dtoa_r+0x32>
 800742e:	2301      	movs	r3, #1
 8007430:	e7e1      	b.n	80073f6 <_dtoa_r+0x27e>
 8007432:	2501      	movs	r5, #1
 8007434:	2300      	movs	r3, #0
 8007436:	9307      	str	r3, [sp, #28]
 8007438:	9509      	str	r5, [sp, #36]	; 0x24
 800743a:	f04f 33ff 	mov.w	r3, #4294967295
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	9304      	str	r3, [sp, #16]
 8007442:	2200      	movs	r2, #0
 8007444:	2312      	movs	r3, #18
 8007446:	e7d1      	b.n	80073ec <_dtoa_r+0x274>
 8007448:	636f4361 	.word	0x636f4361
 800744c:	3fd287a7 	.word	0x3fd287a7
 8007450:	8b60c8b3 	.word	0x8b60c8b3
 8007454:	3fc68a28 	.word	0x3fc68a28
 8007458:	509f79fb 	.word	0x509f79fb
 800745c:	3fd34413 	.word	0x3fd34413
 8007460:	0800928d 	.word	0x0800928d
 8007464:	080092a4 	.word	0x080092a4
 8007468:	7ff00000 	.word	0x7ff00000
 800746c:	08009289 	.word	0x08009289
 8007470:	08009280 	.word	0x08009280
 8007474:	0800925d 	.word	0x0800925d
 8007478:	3ff80000 	.word	0x3ff80000
 800747c:	08009390 	.word	0x08009390
 8007480:	080092fc 	.word	0x080092fc
 8007484:	2301      	movs	r3, #1
 8007486:	9309      	str	r3, [sp, #36]	; 0x24
 8007488:	e7d7      	b.n	800743a <_dtoa_r+0x2c2>
 800748a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800748c:	9301      	str	r3, [sp, #4]
 800748e:	9304      	str	r3, [sp, #16]
 8007490:	e7ba      	b.n	8007408 <_dtoa_r+0x290>
 8007492:	3101      	adds	r1, #1
 8007494:	0052      	lsls	r2, r2, #1
 8007496:	e7ba      	b.n	800740e <_dtoa_r+0x296>
 8007498:	69e3      	ldr	r3, [r4, #28]
 800749a:	9a00      	ldr	r2, [sp, #0]
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	9b04      	ldr	r3, [sp, #16]
 80074a0:	2b0e      	cmp	r3, #14
 80074a2:	f200 80a8 	bhi.w	80075f6 <_dtoa_r+0x47e>
 80074a6:	2d00      	cmp	r5, #0
 80074a8:	f000 80a5 	beq.w	80075f6 <_dtoa_r+0x47e>
 80074ac:	f1bb 0f00 	cmp.w	fp, #0
 80074b0:	dd38      	ble.n	8007524 <_dtoa_r+0x3ac>
 80074b2:	4bc0      	ldr	r3, [pc, #768]	; (80077b4 <_dtoa_r+0x63c>)
 80074b4:	f00b 020f 	and.w	r2, fp, #15
 80074b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80074c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80074c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80074c8:	d019      	beq.n	80074fe <_dtoa_r+0x386>
 80074ca:	4bbb      	ldr	r3, [pc, #748]	; (80077b8 <_dtoa_r+0x640>)
 80074cc:	ec51 0b18 	vmov	r0, r1, d8
 80074d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074d4:	f7f9 f9ca 	bl	800086c <__aeabi_ddiv>
 80074d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074dc:	f008 080f 	and.w	r8, r8, #15
 80074e0:	2503      	movs	r5, #3
 80074e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80077b8 <_dtoa_r+0x640>
 80074e6:	f1b8 0f00 	cmp.w	r8, #0
 80074ea:	d10a      	bne.n	8007502 <_dtoa_r+0x38a>
 80074ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074f0:	4632      	mov	r2, r6
 80074f2:	463b      	mov	r3, r7
 80074f4:	f7f9 f9ba 	bl	800086c <__aeabi_ddiv>
 80074f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074fc:	e02b      	b.n	8007556 <_dtoa_r+0x3de>
 80074fe:	2502      	movs	r5, #2
 8007500:	e7ef      	b.n	80074e2 <_dtoa_r+0x36a>
 8007502:	f018 0f01 	tst.w	r8, #1
 8007506:	d008      	beq.n	800751a <_dtoa_r+0x3a2>
 8007508:	4630      	mov	r0, r6
 800750a:	4639      	mov	r1, r7
 800750c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007510:	f7f9 f882 	bl	8000618 <__aeabi_dmul>
 8007514:	3501      	adds	r5, #1
 8007516:	4606      	mov	r6, r0
 8007518:	460f      	mov	r7, r1
 800751a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800751e:	f109 0908 	add.w	r9, r9, #8
 8007522:	e7e0      	b.n	80074e6 <_dtoa_r+0x36e>
 8007524:	f000 809f 	beq.w	8007666 <_dtoa_r+0x4ee>
 8007528:	f1cb 0600 	rsb	r6, fp, #0
 800752c:	4ba1      	ldr	r3, [pc, #644]	; (80077b4 <_dtoa_r+0x63c>)
 800752e:	4fa2      	ldr	r7, [pc, #648]	; (80077b8 <_dtoa_r+0x640>)
 8007530:	f006 020f 	and.w	r2, r6, #15
 8007534:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	ec51 0b18 	vmov	r0, r1, d8
 8007540:	f7f9 f86a 	bl	8000618 <__aeabi_dmul>
 8007544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007548:	1136      	asrs	r6, r6, #4
 800754a:	2300      	movs	r3, #0
 800754c:	2502      	movs	r5, #2
 800754e:	2e00      	cmp	r6, #0
 8007550:	d17e      	bne.n	8007650 <_dtoa_r+0x4d8>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1d0      	bne.n	80074f8 <_dtoa_r+0x380>
 8007556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007558:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 8084 	beq.w	800766a <_dtoa_r+0x4f2>
 8007562:	4b96      	ldr	r3, [pc, #600]	; (80077bc <_dtoa_r+0x644>)
 8007564:	2200      	movs	r2, #0
 8007566:	4640      	mov	r0, r8
 8007568:	4649      	mov	r1, r9
 800756a:	f7f9 fac7 	bl	8000afc <__aeabi_dcmplt>
 800756e:	2800      	cmp	r0, #0
 8007570:	d07b      	beq.n	800766a <_dtoa_r+0x4f2>
 8007572:	9b04      	ldr	r3, [sp, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d078      	beq.n	800766a <_dtoa_r+0x4f2>
 8007578:	9b01      	ldr	r3, [sp, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	dd39      	ble.n	80075f2 <_dtoa_r+0x47a>
 800757e:	4b90      	ldr	r3, [pc, #576]	; (80077c0 <_dtoa_r+0x648>)
 8007580:	2200      	movs	r2, #0
 8007582:	4640      	mov	r0, r8
 8007584:	4649      	mov	r1, r9
 8007586:	f7f9 f847 	bl	8000618 <__aeabi_dmul>
 800758a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800758e:	9e01      	ldr	r6, [sp, #4]
 8007590:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007594:	3501      	adds	r5, #1
 8007596:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800759a:	4628      	mov	r0, r5
 800759c:	f7f8 ffd2 	bl	8000544 <__aeabi_i2d>
 80075a0:	4642      	mov	r2, r8
 80075a2:	464b      	mov	r3, r9
 80075a4:	f7f9 f838 	bl	8000618 <__aeabi_dmul>
 80075a8:	4b86      	ldr	r3, [pc, #536]	; (80077c4 <_dtoa_r+0x64c>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	f7f8 fe7e 	bl	80002ac <__adddf3>
 80075b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80075b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075b8:	9303      	str	r3, [sp, #12]
 80075ba:	2e00      	cmp	r6, #0
 80075bc:	d158      	bne.n	8007670 <_dtoa_r+0x4f8>
 80075be:	4b82      	ldr	r3, [pc, #520]	; (80077c8 <_dtoa_r+0x650>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	4640      	mov	r0, r8
 80075c4:	4649      	mov	r1, r9
 80075c6:	f7f8 fe6f 	bl	80002a8 <__aeabi_dsub>
 80075ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075ce:	4680      	mov	r8, r0
 80075d0:	4689      	mov	r9, r1
 80075d2:	f7f9 fab1 	bl	8000b38 <__aeabi_dcmpgt>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	f040 8296 	bne.w	8007b08 <_dtoa_r+0x990>
 80075dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80075e0:	4640      	mov	r0, r8
 80075e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075e6:	4649      	mov	r1, r9
 80075e8:	f7f9 fa88 	bl	8000afc <__aeabi_dcmplt>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	f040 8289 	bne.w	8007b04 <_dtoa_r+0x98c>
 80075f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80075f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f2c0 814e 	blt.w	800789a <_dtoa_r+0x722>
 80075fe:	f1bb 0f0e 	cmp.w	fp, #14
 8007602:	f300 814a 	bgt.w	800789a <_dtoa_r+0x722>
 8007606:	4b6b      	ldr	r3, [pc, #428]	; (80077b4 <_dtoa_r+0x63c>)
 8007608:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800760c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007612:	2b00      	cmp	r3, #0
 8007614:	f280 80dc 	bge.w	80077d0 <_dtoa_r+0x658>
 8007618:	9b04      	ldr	r3, [sp, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	f300 80d8 	bgt.w	80077d0 <_dtoa_r+0x658>
 8007620:	f040 826f 	bne.w	8007b02 <_dtoa_r+0x98a>
 8007624:	4b68      	ldr	r3, [pc, #416]	; (80077c8 <_dtoa_r+0x650>)
 8007626:	2200      	movs	r2, #0
 8007628:	4640      	mov	r0, r8
 800762a:	4649      	mov	r1, r9
 800762c:	f7f8 fff4 	bl	8000618 <__aeabi_dmul>
 8007630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007634:	f7f9 fa76 	bl	8000b24 <__aeabi_dcmpge>
 8007638:	9e04      	ldr	r6, [sp, #16]
 800763a:	4637      	mov	r7, r6
 800763c:	2800      	cmp	r0, #0
 800763e:	f040 8245 	bne.w	8007acc <_dtoa_r+0x954>
 8007642:	9d00      	ldr	r5, [sp, #0]
 8007644:	2331      	movs	r3, #49	; 0x31
 8007646:	f805 3b01 	strb.w	r3, [r5], #1
 800764a:	f10b 0b01 	add.w	fp, fp, #1
 800764e:	e241      	b.n	8007ad4 <_dtoa_r+0x95c>
 8007650:	07f2      	lsls	r2, r6, #31
 8007652:	d505      	bpl.n	8007660 <_dtoa_r+0x4e8>
 8007654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007658:	f7f8 ffde 	bl	8000618 <__aeabi_dmul>
 800765c:	3501      	adds	r5, #1
 800765e:	2301      	movs	r3, #1
 8007660:	1076      	asrs	r6, r6, #1
 8007662:	3708      	adds	r7, #8
 8007664:	e773      	b.n	800754e <_dtoa_r+0x3d6>
 8007666:	2502      	movs	r5, #2
 8007668:	e775      	b.n	8007556 <_dtoa_r+0x3de>
 800766a:	9e04      	ldr	r6, [sp, #16]
 800766c:	465f      	mov	r7, fp
 800766e:	e792      	b.n	8007596 <_dtoa_r+0x41e>
 8007670:	9900      	ldr	r1, [sp, #0]
 8007672:	4b50      	ldr	r3, [pc, #320]	; (80077b4 <_dtoa_r+0x63c>)
 8007674:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007678:	4431      	add	r1, r6
 800767a:	9102      	str	r1, [sp, #8]
 800767c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800767e:	eeb0 9a47 	vmov.f32	s18, s14
 8007682:	eef0 9a67 	vmov.f32	s19, s15
 8007686:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800768a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800768e:	2900      	cmp	r1, #0
 8007690:	d044      	beq.n	800771c <_dtoa_r+0x5a4>
 8007692:	494e      	ldr	r1, [pc, #312]	; (80077cc <_dtoa_r+0x654>)
 8007694:	2000      	movs	r0, #0
 8007696:	f7f9 f8e9 	bl	800086c <__aeabi_ddiv>
 800769a:	ec53 2b19 	vmov	r2, r3, d9
 800769e:	f7f8 fe03 	bl	80002a8 <__aeabi_dsub>
 80076a2:	9d00      	ldr	r5, [sp, #0]
 80076a4:	ec41 0b19 	vmov	d9, r0, r1
 80076a8:	4649      	mov	r1, r9
 80076aa:	4640      	mov	r0, r8
 80076ac:	f7f9 fa64 	bl	8000b78 <__aeabi_d2iz>
 80076b0:	4606      	mov	r6, r0
 80076b2:	f7f8 ff47 	bl	8000544 <__aeabi_i2d>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	4640      	mov	r0, r8
 80076bc:	4649      	mov	r1, r9
 80076be:	f7f8 fdf3 	bl	80002a8 <__aeabi_dsub>
 80076c2:	3630      	adds	r6, #48	; 0x30
 80076c4:	f805 6b01 	strb.w	r6, [r5], #1
 80076c8:	ec53 2b19 	vmov	r2, r3, d9
 80076cc:	4680      	mov	r8, r0
 80076ce:	4689      	mov	r9, r1
 80076d0:	f7f9 fa14 	bl	8000afc <__aeabi_dcmplt>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d164      	bne.n	80077a2 <_dtoa_r+0x62a>
 80076d8:	4642      	mov	r2, r8
 80076da:	464b      	mov	r3, r9
 80076dc:	4937      	ldr	r1, [pc, #220]	; (80077bc <_dtoa_r+0x644>)
 80076de:	2000      	movs	r0, #0
 80076e0:	f7f8 fde2 	bl	80002a8 <__aeabi_dsub>
 80076e4:	ec53 2b19 	vmov	r2, r3, d9
 80076e8:	f7f9 fa08 	bl	8000afc <__aeabi_dcmplt>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	f040 80b6 	bne.w	800785e <_dtoa_r+0x6e6>
 80076f2:	9b02      	ldr	r3, [sp, #8]
 80076f4:	429d      	cmp	r5, r3
 80076f6:	f43f af7c 	beq.w	80075f2 <_dtoa_r+0x47a>
 80076fa:	4b31      	ldr	r3, [pc, #196]	; (80077c0 <_dtoa_r+0x648>)
 80076fc:	ec51 0b19 	vmov	r0, r1, d9
 8007700:	2200      	movs	r2, #0
 8007702:	f7f8 ff89 	bl	8000618 <__aeabi_dmul>
 8007706:	4b2e      	ldr	r3, [pc, #184]	; (80077c0 <_dtoa_r+0x648>)
 8007708:	ec41 0b19 	vmov	d9, r0, r1
 800770c:	2200      	movs	r2, #0
 800770e:	4640      	mov	r0, r8
 8007710:	4649      	mov	r1, r9
 8007712:	f7f8 ff81 	bl	8000618 <__aeabi_dmul>
 8007716:	4680      	mov	r8, r0
 8007718:	4689      	mov	r9, r1
 800771a:	e7c5      	b.n	80076a8 <_dtoa_r+0x530>
 800771c:	ec51 0b17 	vmov	r0, r1, d7
 8007720:	f7f8 ff7a 	bl	8000618 <__aeabi_dmul>
 8007724:	9b02      	ldr	r3, [sp, #8]
 8007726:	9d00      	ldr	r5, [sp, #0]
 8007728:	930f      	str	r3, [sp, #60]	; 0x3c
 800772a:	ec41 0b19 	vmov	d9, r0, r1
 800772e:	4649      	mov	r1, r9
 8007730:	4640      	mov	r0, r8
 8007732:	f7f9 fa21 	bl	8000b78 <__aeabi_d2iz>
 8007736:	4606      	mov	r6, r0
 8007738:	f7f8 ff04 	bl	8000544 <__aeabi_i2d>
 800773c:	3630      	adds	r6, #48	; 0x30
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	4640      	mov	r0, r8
 8007744:	4649      	mov	r1, r9
 8007746:	f7f8 fdaf 	bl	80002a8 <__aeabi_dsub>
 800774a:	f805 6b01 	strb.w	r6, [r5], #1
 800774e:	9b02      	ldr	r3, [sp, #8]
 8007750:	429d      	cmp	r5, r3
 8007752:	4680      	mov	r8, r0
 8007754:	4689      	mov	r9, r1
 8007756:	f04f 0200 	mov.w	r2, #0
 800775a:	d124      	bne.n	80077a6 <_dtoa_r+0x62e>
 800775c:	4b1b      	ldr	r3, [pc, #108]	; (80077cc <_dtoa_r+0x654>)
 800775e:	ec51 0b19 	vmov	r0, r1, d9
 8007762:	f7f8 fda3 	bl	80002ac <__adddf3>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	4640      	mov	r0, r8
 800776c:	4649      	mov	r1, r9
 800776e:	f7f9 f9e3 	bl	8000b38 <__aeabi_dcmpgt>
 8007772:	2800      	cmp	r0, #0
 8007774:	d173      	bne.n	800785e <_dtoa_r+0x6e6>
 8007776:	ec53 2b19 	vmov	r2, r3, d9
 800777a:	4914      	ldr	r1, [pc, #80]	; (80077cc <_dtoa_r+0x654>)
 800777c:	2000      	movs	r0, #0
 800777e:	f7f8 fd93 	bl	80002a8 <__aeabi_dsub>
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	4640      	mov	r0, r8
 8007788:	4649      	mov	r1, r9
 800778a:	f7f9 f9b7 	bl	8000afc <__aeabi_dcmplt>
 800778e:	2800      	cmp	r0, #0
 8007790:	f43f af2f 	beq.w	80075f2 <_dtoa_r+0x47a>
 8007794:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007796:	1e6b      	subs	r3, r5, #1
 8007798:	930f      	str	r3, [sp, #60]	; 0x3c
 800779a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800779e:	2b30      	cmp	r3, #48	; 0x30
 80077a0:	d0f8      	beq.n	8007794 <_dtoa_r+0x61c>
 80077a2:	46bb      	mov	fp, r7
 80077a4:	e04a      	b.n	800783c <_dtoa_r+0x6c4>
 80077a6:	4b06      	ldr	r3, [pc, #24]	; (80077c0 <_dtoa_r+0x648>)
 80077a8:	f7f8 ff36 	bl	8000618 <__aeabi_dmul>
 80077ac:	4680      	mov	r8, r0
 80077ae:	4689      	mov	r9, r1
 80077b0:	e7bd      	b.n	800772e <_dtoa_r+0x5b6>
 80077b2:	bf00      	nop
 80077b4:	08009390 	.word	0x08009390
 80077b8:	08009368 	.word	0x08009368
 80077bc:	3ff00000 	.word	0x3ff00000
 80077c0:	40240000 	.word	0x40240000
 80077c4:	401c0000 	.word	0x401c0000
 80077c8:	40140000 	.word	0x40140000
 80077cc:	3fe00000 	.word	0x3fe00000
 80077d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80077d4:	9d00      	ldr	r5, [sp, #0]
 80077d6:	4642      	mov	r2, r8
 80077d8:	464b      	mov	r3, r9
 80077da:	4630      	mov	r0, r6
 80077dc:	4639      	mov	r1, r7
 80077de:	f7f9 f845 	bl	800086c <__aeabi_ddiv>
 80077e2:	f7f9 f9c9 	bl	8000b78 <__aeabi_d2iz>
 80077e6:	9001      	str	r0, [sp, #4]
 80077e8:	f7f8 feac 	bl	8000544 <__aeabi_i2d>
 80077ec:	4642      	mov	r2, r8
 80077ee:	464b      	mov	r3, r9
 80077f0:	f7f8 ff12 	bl	8000618 <__aeabi_dmul>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4630      	mov	r0, r6
 80077fa:	4639      	mov	r1, r7
 80077fc:	f7f8 fd54 	bl	80002a8 <__aeabi_dsub>
 8007800:	9e01      	ldr	r6, [sp, #4]
 8007802:	9f04      	ldr	r7, [sp, #16]
 8007804:	3630      	adds	r6, #48	; 0x30
 8007806:	f805 6b01 	strb.w	r6, [r5], #1
 800780a:	9e00      	ldr	r6, [sp, #0]
 800780c:	1bae      	subs	r6, r5, r6
 800780e:	42b7      	cmp	r7, r6
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	d134      	bne.n	8007880 <_dtoa_r+0x708>
 8007816:	f7f8 fd49 	bl	80002ac <__adddf3>
 800781a:	4642      	mov	r2, r8
 800781c:	464b      	mov	r3, r9
 800781e:	4606      	mov	r6, r0
 8007820:	460f      	mov	r7, r1
 8007822:	f7f9 f989 	bl	8000b38 <__aeabi_dcmpgt>
 8007826:	b9c8      	cbnz	r0, 800785c <_dtoa_r+0x6e4>
 8007828:	4642      	mov	r2, r8
 800782a:	464b      	mov	r3, r9
 800782c:	4630      	mov	r0, r6
 800782e:	4639      	mov	r1, r7
 8007830:	f7f9 f95a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007834:	b110      	cbz	r0, 800783c <_dtoa_r+0x6c4>
 8007836:	9b01      	ldr	r3, [sp, #4]
 8007838:	07db      	lsls	r3, r3, #31
 800783a:	d40f      	bmi.n	800785c <_dtoa_r+0x6e4>
 800783c:	4651      	mov	r1, sl
 800783e:	4620      	mov	r0, r4
 8007840:	f000 fbcc 	bl	8007fdc <_Bfree>
 8007844:	2300      	movs	r3, #0
 8007846:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007848:	702b      	strb	r3, [r5, #0]
 800784a:	f10b 0301 	add.w	r3, fp, #1
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007852:	2b00      	cmp	r3, #0
 8007854:	f43f ace2 	beq.w	800721c <_dtoa_r+0xa4>
 8007858:	601d      	str	r5, [r3, #0]
 800785a:	e4df      	b.n	800721c <_dtoa_r+0xa4>
 800785c:	465f      	mov	r7, fp
 800785e:	462b      	mov	r3, r5
 8007860:	461d      	mov	r5, r3
 8007862:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007866:	2a39      	cmp	r2, #57	; 0x39
 8007868:	d106      	bne.n	8007878 <_dtoa_r+0x700>
 800786a:	9a00      	ldr	r2, [sp, #0]
 800786c:	429a      	cmp	r2, r3
 800786e:	d1f7      	bne.n	8007860 <_dtoa_r+0x6e8>
 8007870:	9900      	ldr	r1, [sp, #0]
 8007872:	2230      	movs	r2, #48	; 0x30
 8007874:	3701      	adds	r7, #1
 8007876:	700a      	strb	r2, [r1, #0]
 8007878:	781a      	ldrb	r2, [r3, #0]
 800787a:	3201      	adds	r2, #1
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	e790      	b.n	80077a2 <_dtoa_r+0x62a>
 8007880:	4ba3      	ldr	r3, [pc, #652]	; (8007b10 <_dtoa_r+0x998>)
 8007882:	2200      	movs	r2, #0
 8007884:	f7f8 fec8 	bl	8000618 <__aeabi_dmul>
 8007888:	2200      	movs	r2, #0
 800788a:	2300      	movs	r3, #0
 800788c:	4606      	mov	r6, r0
 800788e:	460f      	mov	r7, r1
 8007890:	f7f9 f92a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007894:	2800      	cmp	r0, #0
 8007896:	d09e      	beq.n	80077d6 <_dtoa_r+0x65e>
 8007898:	e7d0      	b.n	800783c <_dtoa_r+0x6c4>
 800789a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800789c:	2a00      	cmp	r2, #0
 800789e:	f000 80ca 	beq.w	8007a36 <_dtoa_r+0x8be>
 80078a2:	9a07      	ldr	r2, [sp, #28]
 80078a4:	2a01      	cmp	r2, #1
 80078a6:	f300 80ad 	bgt.w	8007a04 <_dtoa_r+0x88c>
 80078aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078ac:	2a00      	cmp	r2, #0
 80078ae:	f000 80a5 	beq.w	80079fc <_dtoa_r+0x884>
 80078b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078b6:	9e08      	ldr	r6, [sp, #32]
 80078b8:	9d05      	ldr	r5, [sp, #20]
 80078ba:	9a05      	ldr	r2, [sp, #20]
 80078bc:	441a      	add	r2, r3
 80078be:	9205      	str	r2, [sp, #20]
 80078c0:	9a06      	ldr	r2, [sp, #24]
 80078c2:	2101      	movs	r1, #1
 80078c4:	441a      	add	r2, r3
 80078c6:	4620      	mov	r0, r4
 80078c8:	9206      	str	r2, [sp, #24]
 80078ca:	f000 fc3d 	bl	8008148 <__i2b>
 80078ce:	4607      	mov	r7, r0
 80078d0:	b165      	cbz	r5, 80078ec <_dtoa_r+0x774>
 80078d2:	9b06      	ldr	r3, [sp, #24]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	dd09      	ble.n	80078ec <_dtoa_r+0x774>
 80078d8:	42ab      	cmp	r3, r5
 80078da:	9a05      	ldr	r2, [sp, #20]
 80078dc:	bfa8      	it	ge
 80078de:	462b      	movge	r3, r5
 80078e0:	1ad2      	subs	r2, r2, r3
 80078e2:	9205      	str	r2, [sp, #20]
 80078e4:	9a06      	ldr	r2, [sp, #24]
 80078e6:	1aed      	subs	r5, r5, r3
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	9306      	str	r3, [sp, #24]
 80078ec:	9b08      	ldr	r3, [sp, #32]
 80078ee:	b1f3      	cbz	r3, 800792e <_dtoa_r+0x7b6>
 80078f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 80a3 	beq.w	8007a3e <_dtoa_r+0x8c6>
 80078f8:	2e00      	cmp	r6, #0
 80078fa:	dd10      	ble.n	800791e <_dtoa_r+0x7a6>
 80078fc:	4639      	mov	r1, r7
 80078fe:	4632      	mov	r2, r6
 8007900:	4620      	mov	r0, r4
 8007902:	f000 fce1 	bl	80082c8 <__pow5mult>
 8007906:	4652      	mov	r2, sl
 8007908:	4601      	mov	r1, r0
 800790a:	4607      	mov	r7, r0
 800790c:	4620      	mov	r0, r4
 800790e:	f000 fc31 	bl	8008174 <__multiply>
 8007912:	4651      	mov	r1, sl
 8007914:	4680      	mov	r8, r0
 8007916:	4620      	mov	r0, r4
 8007918:	f000 fb60 	bl	8007fdc <_Bfree>
 800791c:	46c2      	mov	sl, r8
 800791e:	9b08      	ldr	r3, [sp, #32]
 8007920:	1b9a      	subs	r2, r3, r6
 8007922:	d004      	beq.n	800792e <_dtoa_r+0x7b6>
 8007924:	4651      	mov	r1, sl
 8007926:	4620      	mov	r0, r4
 8007928:	f000 fcce 	bl	80082c8 <__pow5mult>
 800792c:	4682      	mov	sl, r0
 800792e:	2101      	movs	r1, #1
 8007930:	4620      	mov	r0, r4
 8007932:	f000 fc09 	bl	8008148 <__i2b>
 8007936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007938:	2b00      	cmp	r3, #0
 800793a:	4606      	mov	r6, r0
 800793c:	f340 8081 	ble.w	8007a42 <_dtoa_r+0x8ca>
 8007940:	461a      	mov	r2, r3
 8007942:	4601      	mov	r1, r0
 8007944:	4620      	mov	r0, r4
 8007946:	f000 fcbf 	bl	80082c8 <__pow5mult>
 800794a:	9b07      	ldr	r3, [sp, #28]
 800794c:	2b01      	cmp	r3, #1
 800794e:	4606      	mov	r6, r0
 8007950:	dd7a      	ble.n	8007a48 <_dtoa_r+0x8d0>
 8007952:	f04f 0800 	mov.w	r8, #0
 8007956:	6933      	ldr	r3, [r6, #16]
 8007958:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800795c:	6918      	ldr	r0, [r3, #16]
 800795e:	f000 fba5 	bl	80080ac <__hi0bits>
 8007962:	f1c0 0020 	rsb	r0, r0, #32
 8007966:	9b06      	ldr	r3, [sp, #24]
 8007968:	4418      	add	r0, r3
 800796a:	f010 001f 	ands.w	r0, r0, #31
 800796e:	f000 8094 	beq.w	8007a9a <_dtoa_r+0x922>
 8007972:	f1c0 0320 	rsb	r3, r0, #32
 8007976:	2b04      	cmp	r3, #4
 8007978:	f340 8085 	ble.w	8007a86 <_dtoa_r+0x90e>
 800797c:	9b05      	ldr	r3, [sp, #20]
 800797e:	f1c0 001c 	rsb	r0, r0, #28
 8007982:	4403      	add	r3, r0
 8007984:	9305      	str	r3, [sp, #20]
 8007986:	9b06      	ldr	r3, [sp, #24]
 8007988:	4403      	add	r3, r0
 800798a:	4405      	add	r5, r0
 800798c:	9306      	str	r3, [sp, #24]
 800798e:	9b05      	ldr	r3, [sp, #20]
 8007990:	2b00      	cmp	r3, #0
 8007992:	dd05      	ble.n	80079a0 <_dtoa_r+0x828>
 8007994:	4651      	mov	r1, sl
 8007996:	461a      	mov	r2, r3
 8007998:	4620      	mov	r0, r4
 800799a:	f000 fcef 	bl	800837c <__lshift>
 800799e:	4682      	mov	sl, r0
 80079a0:	9b06      	ldr	r3, [sp, #24]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	dd05      	ble.n	80079b2 <_dtoa_r+0x83a>
 80079a6:	4631      	mov	r1, r6
 80079a8:	461a      	mov	r2, r3
 80079aa:	4620      	mov	r0, r4
 80079ac:	f000 fce6 	bl	800837c <__lshift>
 80079b0:	4606      	mov	r6, r0
 80079b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d072      	beq.n	8007a9e <_dtoa_r+0x926>
 80079b8:	4631      	mov	r1, r6
 80079ba:	4650      	mov	r0, sl
 80079bc:	f000 fd4a 	bl	8008454 <__mcmp>
 80079c0:	2800      	cmp	r0, #0
 80079c2:	da6c      	bge.n	8007a9e <_dtoa_r+0x926>
 80079c4:	2300      	movs	r3, #0
 80079c6:	4651      	mov	r1, sl
 80079c8:	220a      	movs	r2, #10
 80079ca:	4620      	mov	r0, r4
 80079cc:	f000 fb28 	bl	8008020 <__multadd>
 80079d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079d6:	4682      	mov	sl, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 81b0 	beq.w	8007d3e <_dtoa_r+0xbc6>
 80079de:	2300      	movs	r3, #0
 80079e0:	4639      	mov	r1, r7
 80079e2:	220a      	movs	r2, #10
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 fb1b 	bl	8008020 <__multadd>
 80079ea:	9b01      	ldr	r3, [sp, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	4607      	mov	r7, r0
 80079f0:	f300 8096 	bgt.w	8007b20 <_dtoa_r+0x9a8>
 80079f4:	9b07      	ldr	r3, [sp, #28]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	dc59      	bgt.n	8007aae <_dtoa_r+0x936>
 80079fa:	e091      	b.n	8007b20 <_dtoa_r+0x9a8>
 80079fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a02:	e758      	b.n	80078b6 <_dtoa_r+0x73e>
 8007a04:	9b04      	ldr	r3, [sp, #16]
 8007a06:	1e5e      	subs	r6, r3, #1
 8007a08:	9b08      	ldr	r3, [sp, #32]
 8007a0a:	42b3      	cmp	r3, r6
 8007a0c:	bfbf      	itttt	lt
 8007a0e:	9b08      	ldrlt	r3, [sp, #32]
 8007a10:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007a12:	9608      	strlt	r6, [sp, #32]
 8007a14:	1af3      	sublt	r3, r6, r3
 8007a16:	bfb4      	ite	lt
 8007a18:	18d2      	addlt	r2, r2, r3
 8007a1a:	1b9e      	subge	r6, r3, r6
 8007a1c:	9b04      	ldr	r3, [sp, #16]
 8007a1e:	bfbc      	itt	lt
 8007a20:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007a22:	2600      	movlt	r6, #0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	bfb7      	itett	lt
 8007a28:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007a2c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007a30:	1a9d      	sublt	r5, r3, r2
 8007a32:	2300      	movlt	r3, #0
 8007a34:	e741      	b.n	80078ba <_dtoa_r+0x742>
 8007a36:	9e08      	ldr	r6, [sp, #32]
 8007a38:	9d05      	ldr	r5, [sp, #20]
 8007a3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007a3c:	e748      	b.n	80078d0 <_dtoa_r+0x758>
 8007a3e:	9a08      	ldr	r2, [sp, #32]
 8007a40:	e770      	b.n	8007924 <_dtoa_r+0x7ac>
 8007a42:	9b07      	ldr	r3, [sp, #28]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	dc19      	bgt.n	8007a7c <_dtoa_r+0x904>
 8007a48:	9b02      	ldr	r3, [sp, #8]
 8007a4a:	b9bb      	cbnz	r3, 8007a7c <_dtoa_r+0x904>
 8007a4c:	9b03      	ldr	r3, [sp, #12]
 8007a4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a52:	b99b      	cbnz	r3, 8007a7c <_dtoa_r+0x904>
 8007a54:	9b03      	ldr	r3, [sp, #12]
 8007a56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a5a:	0d1b      	lsrs	r3, r3, #20
 8007a5c:	051b      	lsls	r3, r3, #20
 8007a5e:	b183      	cbz	r3, 8007a82 <_dtoa_r+0x90a>
 8007a60:	9b05      	ldr	r3, [sp, #20]
 8007a62:	3301      	adds	r3, #1
 8007a64:	9305      	str	r3, [sp, #20]
 8007a66:	9b06      	ldr	r3, [sp, #24]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	9306      	str	r3, [sp, #24]
 8007a6c:	f04f 0801 	mov.w	r8, #1
 8007a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f47f af6f 	bne.w	8007956 <_dtoa_r+0x7de>
 8007a78:	2001      	movs	r0, #1
 8007a7a:	e774      	b.n	8007966 <_dtoa_r+0x7ee>
 8007a7c:	f04f 0800 	mov.w	r8, #0
 8007a80:	e7f6      	b.n	8007a70 <_dtoa_r+0x8f8>
 8007a82:	4698      	mov	r8, r3
 8007a84:	e7f4      	b.n	8007a70 <_dtoa_r+0x8f8>
 8007a86:	d082      	beq.n	800798e <_dtoa_r+0x816>
 8007a88:	9a05      	ldr	r2, [sp, #20]
 8007a8a:	331c      	adds	r3, #28
 8007a8c:	441a      	add	r2, r3
 8007a8e:	9205      	str	r2, [sp, #20]
 8007a90:	9a06      	ldr	r2, [sp, #24]
 8007a92:	441a      	add	r2, r3
 8007a94:	441d      	add	r5, r3
 8007a96:	9206      	str	r2, [sp, #24]
 8007a98:	e779      	b.n	800798e <_dtoa_r+0x816>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	e7f4      	b.n	8007a88 <_dtoa_r+0x910>
 8007a9e:	9b04      	ldr	r3, [sp, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	dc37      	bgt.n	8007b14 <_dtoa_r+0x99c>
 8007aa4:	9b07      	ldr	r3, [sp, #28]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	dd34      	ble.n	8007b14 <_dtoa_r+0x99c>
 8007aaa:	9b04      	ldr	r3, [sp, #16]
 8007aac:	9301      	str	r3, [sp, #4]
 8007aae:	9b01      	ldr	r3, [sp, #4]
 8007ab0:	b963      	cbnz	r3, 8007acc <_dtoa_r+0x954>
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	2205      	movs	r2, #5
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f000 fab2 	bl	8008020 <__multadd>
 8007abc:	4601      	mov	r1, r0
 8007abe:	4606      	mov	r6, r0
 8007ac0:	4650      	mov	r0, sl
 8007ac2:	f000 fcc7 	bl	8008454 <__mcmp>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	f73f adbb 	bgt.w	8007642 <_dtoa_r+0x4ca>
 8007acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ace:	9d00      	ldr	r5, [sp, #0]
 8007ad0:	ea6f 0b03 	mvn.w	fp, r3
 8007ad4:	f04f 0800 	mov.w	r8, #0
 8007ad8:	4631      	mov	r1, r6
 8007ada:	4620      	mov	r0, r4
 8007adc:	f000 fa7e 	bl	8007fdc <_Bfree>
 8007ae0:	2f00      	cmp	r7, #0
 8007ae2:	f43f aeab 	beq.w	800783c <_dtoa_r+0x6c4>
 8007ae6:	f1b8 0f00 	cmp.w	r8, #0
 8007aea:	d005      	beq.n	8007af8 <_dtoa_r+0x980>
 8007aec:	45b8      	cmp	r8, r7
 8007aee:	d003      	beq.n	8007af8 <_dtoa_r+0x980>
 8007af0:	4641      	mov	r1, r8
 8007af2:	4620      	mov	r0, r4
 8007af4:	f000 fa72 	bl	8007fdc <_Bfree>
 8007af8:	4639      	mov	r1, r7
 8007afa:	4620      	mov	r0, r4
 8007afc:	f000 fa6e 	bl	8007fdc <_Bfree>
 8007b00:	e69c      	b.n	800783c <_dtoa_r+0x6c4>
 8007b02:	2600      	movs	r6, #0
 8007b04:	4637      	mov	r7, r6
 8007b06:	e7e1      	b.n	8007acc <_dtoa_r+0x954>
 8007b08:	46bb      	mov	fp, r7
 8007b0a:	4637      	mov	r7, r6
 8007b0c:	e599      	b.n	8007642 <_dtoa_r+0x4ca>
 8007b0e:	bf00      	nop
 8007b10:	40240000 	.word	0x40240000
 8007b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 80c8 	beq.w	8007cac <_dtoa_r+0xb34>
 8007b1c:	9b04      	ldr	r3, [sp, #16]
 8007b1e:	9301      	str	r3, [sp, #4]
 8007b20:	2d00      	cmp	r5, #0
 8007b22:	dd05      	ble.n	8007b30 <_dtoa_r+0x9b8>
 8007b24:	4639      	mov	r1, r7
 8007b26:	462a      	mov	r2, r5
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f000 fc27 	bl	800837c <__lshift>
 8007b2e:	4607      	mov	r7, r0
 8007b30:	f1b8 0f00 	cmp.w	r8, #0
 8007b34:	d05b      	beq.n	8007bee <_dtoa_r+0xa76>
 8007b36:	6879      	ldr	r1, [r7, #4]
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f000 fa0f 	bl	8007f5c <_Balloc>
 8007b3e:	4605      	mov	r5, r0
 8007b40:	b928      	cbnz	r0, 8007b4e <_dtoa_r+0x9d6>
 8007b42:	4b83      	ldr	r3, [pc, #524]	; (8007d50 <_dtoa_r+0xbd8>)
 8007b44:	4602      	mov	r2, r0
 8007b46:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007b4a:	f7ff bb2e 	b.w	80071aa <_dtoa_r+0x32>
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	3202      	adds	r2, #2
 8007b52:	0092      	lsls	r2, r2, #2
 8007b54:	f107 010c 	add.w	r1, r7, #12
 8007b58:	300c      	adds	r0, #12
 8007b5a:	f000 ffab 	bl	8008ab4 <memcpy>
 8007b5e:	2201      	movs	r2, #1
 8007b60:	4629      	mov	r1, r5
 8007b62:	4620      	mov	r0, r4
 8007b64:	f000 fc0a 	bl	800837c <__lshift>
 8007b68:	9b00      	ldr	r3, [sp, #0]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	9304      	str	r3, [sp, #16]
 8007b6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b72:	4413      	add	r3, r2
 8007b74:	9308      	str	r3, [sp, #32]
 8007b76:	9b02      	ldr	r3, [sp, #8]
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	46b8      	mov	r8, r7
 8007b7e:	9306      	str	r3, [sp, #24]
 8007b80:	4607      	mov	r7, r0
 8007b82:	9b04      	ldr	r3, [sp, #16]
 8007b84:	4631      	mov	r1, r6
 8007b86:	3b01      	subs	r3, #1
 8007b88:	4650      	mov	r0, sl
 8007b8a:	9301      	str	r3, [sp, #4]
 8007b8c:	f7ff fa69 	bl	8007062 <quorem>
 8007b90:	4641      	mov	r1, r8
 8007b92:	9002      	str	r0, [sp, #8]
 8007b94:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b98:	4650      	mov	r0, sl
 8007b9a:	f000 fc5b 	bl	8008454 <__mcmp>
 8007b9e:	463a      	mov	r2, r7
 8007ba0:	9005      	str	r0, [sp, #20]
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f000 fc71 	bl	800848c <__mdiff>
 8007baa:	68c2      	ldr	r2, [r0, #12]
 8007bac:	4605      	mov	r5, r0
 8007bae:	bb02      	cbnz	r2, 8007bf2 <_dtoa_r+0xa7a>
 8007bb0:	4601      	mov	r1, r0
 8007bb2:	4650      	mov	r0, sl
 8007bb4:	f000 fc4e 	bl	8008454 <__mcmp>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	4629      	mov	r1, r5
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	9209      	str	r2, [sp, #36]	; 0x24
 8007bc0:	f000 fa0c 	bl	8007fdc <_Bfree>
 8007bc4:	9b07      	ldr	r3, [sp, #28]
 8007bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bc8:	9d04      	ldr	r5, [sp, #16]
 8007bca:	ea43 0102 	orr.w	r1, r3, r2
 8007bce:	9b06      	ldr	r3, [sp, #24]
 8007bd0:	4319      	orrs	r1, r3
 8007bd2:	d110      	bne.n	8007bf6 <_dtoa_r+0xa7e>
 8007bd4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bd8:	d029      	beq.n	8007c2e <_dtoa_r+0xab6>
 8007bda:	9b05      	ldr	r3, [sp, #20]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dd02      	ble.n	8007be6 <_dtoa_r+0xa6e>
 8007be0:	9b02      	ldr	r3, [sp, #8]
 8007be2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007be6:	9b01      	ldr	r3, [sp, #4]
 8007be8:	f883 9000 	strb.w	r9, [r3]
 8007bec:	e774      	b.n	8007ad8 <_dtoa_r+0x960>
 8007bee:	4638      	mov	r0, r7
 8007bf0:	e7ba      	b.n	8007b68 <_dtoa_r+0x9f0>
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	e7e1      	b.n	8007bba <_dtoa_r+0xa42>
 8007bf6:	9b05      	ldr	r3, [sp, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	db04      	blt.n	8007c06 <_dtoa_r+0xa8e>
 8007bfc:	9907      	ldr	r1, [sp, #28]
 8007bfe:	430b      	orrs	r3, r1
 8007c00:	9906      	ldr	r1, [sp, #24]
 8007c02:	430b      	orrs	r3, r1
 8007c04:	d120      	bne.n	8007c48 <_dtoa_r+0xad0>
 8007c06:	2a00      	cmp	r2, #0
 8007c08:	dded      	ble.n	8007be6 <_dtoa_r+0xa6e>
 8007c0a:	4651      	mov	r1, sl
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f000 fbb4 	bl	800837c <__lshift>
 8007c14:	4631      	mov	r1, r6
 8007c16:	4682      	mov	sl, r0
 8007c18:	f000 fc1c 	bl	8008454 <__mcmp>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	dc03      	bgt.n	8007c28 <_dtoa_r+0xab0>
 8007c20:	d1e1      	bne.n	8007be6 <_dtoa_r+0xa6e>
 8007c22:	f019 0f01 	tst.w	r9, #1
 8007c26:	d0de      	beq.n	8007be6 <_dtoa_r+0xa6e>
 8007c28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c2c:	d1d8      	bne.n	8007be0 <_dtoa_r+0xa68>
 8007c2e:	9a01      	ldr	r2, [sp, #4]
 8007c30:	2339      	movs	r3, #57	; 0x39
 8007c32:	7013      	strb	r3, [r2, #0]
 8007c34:	462b      	mov	r3, r5
 8007c36:	461d      	mov	r5, r3
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c3e:	2a39      	cmp	r2, #57	; 0x39
 8007c40:	d06c      	beq.n	8007d1c <_dtoa_r+0xba4>
 8007c42:	3201      	adds	r2, #1
 8007c44:	701a      	strb	r2, [r3, #0]
 8007c46:	e747      	b.n	8007ad8 <_dtoa_r+0x960>
 8007c48:	2a00      	cmp	r2, #0
 8007c4a:	dd07      	ble.n	8007c5c <_dtoa_r+0xae4>
 8007c4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c50:	d0ed      	beq.n	8007c2e <_dtoa_r+0xab6>
 8007c52:	9a01      	ldr	r2, [sp, #4]
 8007c54:	f109 0301 	add.w	r3, r9, #1
 8007c58:	7013      	strb	r3, [r2, #0]
 8007c5a:	e73d      	b.n	8007ad8 <_dtoa_r+0x960>
 8007c5c:	9b04      	ldr	r3, [sp, #16]
 8007c5e:	9a08      	ldr	r2, [sp, #32]
 8007c60:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d043      	beq.n	8007cf0 <_dtoa_r+0xb78>
 8007c68:	4651      	mov	r1, sl
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	220a      	movs	r2, #10
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f000 f9d6 	bl	8008020 <__multadd>
 8007c74:	45b8      	cmp	r8, r7
 8007c76:	4682      	mov	sl, r0
 8007c78:	f04f 0300 	mov.w	r3, #0
 8007c7c:	f04f 020a 	mov.w	r2, #10
 8007c80:	4641      	mov	r1, r8
 8007c82:	4620      	mov	r0, r4
 8007c84:	d107      	bne.n	8007c96 <_dtoa_r+0xb1e>
 8007c86:	f000 f9cb 	bl	8008020 <__multadd>
 8007c8a:	4680      	mov	r8, r0
 8007c8c:	4607      	mov	r7, r0
 8007c8e:	9b04      	ldr	r3, [sp, #16]
 8007c90:	3301      	adds	r3, #1
 8007c92:	9304      	str	r3, [sp, #16]
 8007c94:	e775      	b.n	8007b82 <_dtoa_r+0xa0a>
 8007c96:	f000 f9c3 	bl	8008020 <__multadd>
 8007c9a:	4639      	mov	r1, r7
 8007c9c:	4680      	mov	r8, r0
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	220a      	movs	r2, #10
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 f9bc 	bl	8008020 <__multadd>
 8007ca8:	4607      	mov	r7, r0
 8007caa:	e7f0      	b.n	8007c8e <_dtoa_r+0xb16>
 8007cac:	9b04      	ldr	r3, [sp, #16]
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	9d00      	ldr	r5, [sp, #0]
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	4650      	mov	r0, sl
 8007cb6:	f7ff f9d4 	bl	8007062 <quorem>
 8007cba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007cbe:	9b00      	ldr	r3, [sp, #0]
 8007cc0:	f805 9b01 	strb.w	r9, [r5], #1
 8007cc4:	1aea      	subs	r2, r5, r3
 8007cc6:	9b01      	ldr	r3, [sp, #4]
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	dd07      	ble.n	8007cdc <_dtoa_r+0xb64>
 8007ccc:	4651      	mov	r1, sl
 8007cce:	2300      	movs	r3, #0
 8007cd0:	220a      	movs	r2, #10
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f000 f9a4 	bl	8008020 <__multadd>
 8007cd8:	4682      	mov	sl, r0
 8007cda:	e7ea      	b.n	8007cb2 <_dtoa_r+0xb3a>
 8007cdc:	9b01      	ldr	r3, [sp, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	bfc8      	it	gt
 8007ce2:	461d      	movgt	r5, r3
 8007ce4:	9b00      	ldr	r3, [sp, #0]
 8007ce6:	bfd8      	it	le
 8007ce8:	2501      	movle	r5, #1
 8007cea:	441d      	add	r5, r3
 8007cec:	f04f 0800 	mov.w	r8, #0
 8007cf0:	4651      	mov	r1, sl
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f000 fb41 	bl	800837c <__lshift>
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4682      	mov	sl, r0
 8007cfe:	f000 fba9 	bl	8008454 <__mcmp>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	dc96      	bgt.n	8007c34 <_dtoa_r+0xabc>
 8007d06:	d102      	bne.n	8007d0e <_dtoa_r+0xb96>
 8007d08:	f019 0f01 	tst.w	r9, #1
 8007d0c:	d192      	bne.n	8007c34 <_dtoa_r+0xabc>
 8007d0e:	462b      	mov	r3, r5
 8007d10:	461d      	mov	r5, r3
 8007d12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d16:	2a30      	cmp	r2, #48	; 0x30
 8007d18:	d0fa      	beq.n	8007d10 <_dtoa_r+0xb98>
 8007d1a:	e6dd      	b.n	8007ad8 <_dtoa_r+0x960>
 8007d1c:	9a00      	ldr	r2, [sp, #0]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d189      	bne.n	8007c36 <_dtoa_r+0xabe>
 8007d22:	f10b 0b01 	add.w	fp, fp, #1
 8007d26:	2331      	movs	r3, #49	; 0x31
 8007d28:	e796      	b.n	8007c58 <_dtoa_r+0xae0>
 8007d2a:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <_dtoa_r+0xbdc>)
 8007d2c:	f7ff ba99 	b.w	8007262 <_dtoa_r+0xea>
 8007d30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f47f aa6d 	bne.w	8007212 <_dtoa_r+0x9a>
 8007d38:	4b07      	ldr	r3, [pc, #28]	; (8007d58 <_dtoa_r+0xbe0>)
 8007d3a:	f7ff ba92 	b.w	8007262 <_dtoa_r+0xea>
 8007d3e:	9b01      	ldr	r3, [sp, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	dcb5      	bgt.n	8007cb0 <_dtoa_r+0xb38>
 8007d44:	9b07      	ldr	r3, [sp, #28]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	f73f aeb1 	bgt.w	8007aae <_dtoa_r+0x936>
 8007d4c:	e7b0      	b.n	8007cb0 <_dtoa_r+0xb38>
 8007d4e:	bf00      	nop
 8007d50:	080092fc 	.word	0x080092fc
 8007d54:	0800925c 	.word	0x0800925c
 8007d58:	08009280 	.word	0x08009280

08007d5c <_free_r>:
 8007d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d5e:	2900      	cmp	r1, #0
 8007d60:	d044      	beq.n	8007dec <_free_r+0x90>
 8007d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d66:	9001      	str	r0, [sp, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d6e:	bfb8      	it	lt
 8007d70:	18e4      	addlt	r4, r4, r3
 8007d72:	f000 f8e7 	bl	8007f44 <__malloc_lock>
 8007d76:	4a1e      	ldr	r2, [pc, #120]	; (8007df0 <_free_r+0x94>)
 8007d78:	9801      	ldr	r0, [sp, #4]
 8007d7a:	6813      	ldr	r3, [r2, #0]
 8007d7c:	b933      	cbnz	r3, 8007d8c <_free_r+0x30>
 8007d7e:	6063      	str	r3, [r4, #4]
 8007d80:	6014      	str	r4, [r2, #0]
 8007d82:	b003      	add	sp, #12
 8007d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d88:	f000 b8e2 	b.w	8007f50 <__malloc_unlock>
 8007d8c:	42a3      	cmp	r3, r4
 8007d8e:	d908      	bls.n	8007da2 <_free_r+0x46>
 8007d90:	6825      	ldr	r5, [r4, #0]
 8007d92:	1961      	adds	r1, r4, r5
 8007d94:	428b      	cmp	r3, r1
 8007d96:	bf01      	itttt	eq
 8007d98:	6819      	ldreq	r1, [r3, #0]
 8007d9a:	685b      	ldreq	r3, [r3, #4]
 8007d9c:	1949      	addeq	r1, r1, r5
 8007d9e:	6021      	streq	r1, [r4, #0]
 8007da0:	e7ed      	b.n	8007d7e <_free_r+0x22>
 8007da2:	461a      	mov	r2, r3
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	b10b      	cbz	r3, 8007dac <_free_r+0x50>
 8007da8:	42a3      	cmp	r3, r4
 8007daa:	d9fa      	bls.n	8007da2 <_free_r+0x46>
 8007dac:	6811      	ldr	r1, [r2, #0]
 8007dae:	1855      	adds	r5, r2, r1
 8007db0:	42a5      	cmp	r5, r4
 8007db2:	d10b      	bne.n	8007dcc <_free_r+0x70>
 8007db4:	6824      	ldr	r4, [r4, #0]
 8007db6:	4421      	add	r1, r4
 8007db8:	1854      	adds	r4, r2, r1
 8007dba:	42a3      	cmp	r3, r4
 8007dbc:	6011      	str	r1, [r2, #0]
 8007dbe:	d1e0      	bne.n	8007d82 <_free_r+0x26>
 8007dc0:	681c      	ldr	r4, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	6053      	str	r3, [r2, #4]
 8007dc6:	440c      	add	r4, r1
 8007dc8:	6014      	str	r4, [r2, #0]
 8007dca:	e7da      	b.n	8007d82 <_free_r+0x26>
 8007dcc:	d902      	bls.n	8007dd4 <_free_r+0x78>
 8007dce:	230c      	movs	r3, #12
 8007dd0:	6003      	str	r3, [r0, #0]
 8007dd2:	e7d6      	b.n	8007d82 <_free_r+0x26>
 8007dd4:	6825      	ldr	r5, [r4, #0]
 8007dd6:	1961      	adds	r1, r4, r5
 8007dd8:	428b      	cmp	r3, r1
 8007dda:	bf04      	itt	eq
 8007ddc:	6819      	ldreq	r1, [r3, #0]
 8007dde:	685b      	ldreq	r3, [r3, #4]
 8007de0:	6063      	str	r3, [r4, #4]
 8007de2:	bf04      	itt	eq
 8007de4:	1949      	addeq	r1, r1, r5
 8007de6:	6021      	streq	r1, [r4, #0]
 8007de8:	6054      	str	r4, [r2, #4]
 8007dea:	e7ca      	b.n	8007d82 <_free_r+0x26>
 8007dec:	b003      	add	sp, #12
 8007dee:	bd30      	pop	{r4, r5, pc}
 8007df0:	200004d8 	.word	0x200004d8

08007df4 <malloc>:
 8007df4:	4b02      	ldr	r3, [pc, #8]	; (8007e00 <malloc+0xc>)
 8007df6:	4601      	mov	r1, r0
 8007df8:	6818      	ldr	r0, [r3, #0]
 8007dfa:	f000 b823 	b.w	8007e44 <_malloc_r>
 8007dfe:	bf00      	nop
 8007e00:	20000064 	.word	0x20000064

08007e04 <sbrk_aligned>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	4e0e      	ldr	r6, [pc, #56]	; (8007e40 <sbrk_aligned+0x3c>)
 8007e08:	460c      	mov	r4, r1
 8007e0a:	6831      	ldr	r1, [r6, #0]
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	b911      	cbnz	r1, 8007e16 <sbrk_aligned+0x12>
 8007e10:	f000 fe40 	bl	8008a94 <_sbrk_r>
 8007e14:	6030      	str	r0, [r6, #0]
 8007e16:	4621      	mov	r1, r4
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f000 fe3b 	bl	8008a94 <_sbrk_r>
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	d00a      	beq.n	8007e38 <sbrk_aligned+0x34>
 8007e22:	1cc4      	adds	r4, r0, #3
 8007e24:	f024 0403 	bic.w	r4, r4, #3
 8007e28:	42a0      	cmp	r0, r4
 8007e2a:	d007      	beq.n	8007e3c <sbrk_aligned+0x38>
 8007e2c:	1a21      	subs	r1, r4, r0
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f000 fe30 	bl	8008a94 <_sbrk_r>
 8007e34:	3001      	adds	r0, #1
 8007e36:	d101      	bne.n	8007e3c <sbrk_aligned+0x38>
 8007e38:	f04f 34ff 	mov.w	r4, #4294967295
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}
 8007e40:	200004dc 	.word	0x200004dc

08007e44 <_malloc_r>:
 8007e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e48:	1ccd      	adds	r5, r1, #3
 8007e4a:	f025 0503 	bic.w	r5, r5, #3
 8007e4e:	3508      	adds	r5, #8
 8007e50:	2d0c      	cmp	r5, #12
 8007e52:	bf38      	it	cc
 8007e54:	250c      	movcc	r5, #12
 8007e56:	2d00      	cmp	r5, #0
 8007e58:	4607      	mov	r7, r0
 8007e5a:	db01      	blt.n	8007e60 <_malloc_r+0x1c>
 8007e5c:	42a9      	cmp	r1, r5
 8007e5e:	d905      	bls.n	8007e6c <_malloc_r+0x28>
 8007e60:	230c      	movs	r3, #12
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	2600      	movs	r6, #0
 8007e66:	4630      	mov	r0, r6
 8007e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f40 <_malloc_r+0xfc>
 8007e70:	f000 f868 	bl	8007f44 <__malloc_lock>
 8007e74:	f8d8 3000 	ldr.w	r3, [r8]
 8007e78:	461c      	mov	r4, r3
 8007e7a:	bb5c      	cbnz	r4, 8007ed4 <_malloc_r+0x90>
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	4638      	mov	r0, r7
 8007e80:	f7ff ffc0 	bl	8007e04 <sbrk_aligned>
 8007e84:	1c43      	adds	r3, r0, #1
 8007e86:	4604      	mov	r4, r0
 8007e88:	d155      	bne.n	8007f36 <_malloc_r+0xf2>
 8007e8a:	f8d8 4000 	ldr.w	r4, [r8]
 8007e8e:	4626      	mov	r6, r4
 8007e90:	2e00      	cmp	r6, #0
 8007e92:	d145      	bne.n	8007f20 <_malloc_r+0xdc>
 8007e94:	2c00      	cmp	r4, #0
 8007e96:	d048      	beq.n	8007f2a <_malloc_r+0xe6>
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	4631      	mov	r1, r6
 8007e9c:	4638      	mov	r0, r7
 8007e9e:	eb04 0903 	add.w	r9, r4, r3
 8007ea2:	f000 fdf7 	bl	8008a94 <_sbrk_r>
 8007ea6:	4581      	cmp	r9, r0
 8007ea8:	d13f      	bne.n	8007f2a <_malloc_r+0xe6>
 8007eaa:	6821      	ldr	r1, [r4, #0]
 8007eac:	1a6d      	subs	r5, r5, r1
 8007eae:	4629      	mov	r1, r5
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	f7ff ffa7 	bl	8007e04 <sbrk_aligned>
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	d037      	beq.n	8007f2a <_malloc_r+0xe6>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	442b      	add	r3, r5
 8007ebe:	6023      	str	r3, [r4, #0]
 8007ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d038      	beq.n	8007f3a <_malloc_r+0xf6>
 8007ec8:	685a      	ldr	r2, [r3, #4]
 8007eca:	42a2      	cmp	r2, r4
 8007ecc:	d12b      	bne.n	8007f26 <_malloc_r+0xe2>
 8007ece:	2200      	movs	r2, #0
 8007ed0:	605a      	str	r2, [r3, #4]
 8007ed2:	e00f      	b.n	8007ef4 <_malloc_r+0xb0>
 8007ed4:	6822      	ldr	r2, [r4, #0]
 8007ed6:	1b52      	subs	r2, r2, r5
 8007ed8:	d41f      	bmi.n	8007f1a <_malloc_r+0xd6>
 8007eda:	2a0b      	cmp	r2, #11
 8007edc:	d917      	bls.n	8007f0e <_malloc_r+0xca>
 8007ede:	1961      	adds	r1, r4, r5
 8007ee0:	42a3      	cmp	r3, r4
 8007ee2:	6025      	str	r5, [r4, #0]
 8007ee4:	bf18      	it	ne
 8007ee6:	6059      	strne	r1, [r3, #4]
 8007ee8:	6863      	ldr	r3, [r4, #4]
 8007eea:	bf08      	it	eq
 8007eec:	f8c8 1000 	streq.w	r1, [r8]
 8007ef0:	5162      	str	r2, [r4, r5]
 8007ef2:	604b      	str	r3, [r1, #4]
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f104 060b 	add.w	r6, r4, #11
 8007efa:	f000 f829 	bl	8007f50 <__malloc_unlock>
 8007efe:	f026 0607 	bic.w	r6, r6, #7
 8007f02:	1d23      	adds	r3, r4, #4
 8007f04:	1af2      	subs	r2, r6, r3
 8007f06:	d0ae      	beq.n	8007e66 <_malloc_r+0x22>
 8007f08:	1b9b      	subs	r3, r3, r6
 8007f0a:	50a3      	str	r3, [r4, r2]
 8007f0c:	e7ab      	b.n	8007e66 <_malloc_r+0x22>
 8007f0e:	42a3      	cmp	r3, r4
 8007f10:	6862      	ldr	r2, [r4, #4]
 8007f12:	d1dd      	bne.n	8007ed0 <_malloc_r+0x8c>
 8007f14:	f8c8 2000 	str.w	r2, [r8]
 8007f18:	e7ec      	b.n	8007ef4 <_malloc_r+0xb0>
 8007f1a:	4623      	mov	r3, r4
 8007f1c:	6864      	ldr	r4, [r4, #4]
 8007f1e:	e7ac      	b.n	8007e7a <_malloc_r+0x36>
 8007f20:	4634      	mov	r4, r6
 8007f22:	6876      	ldr	r6, [r6, #4]
 8007f24:	e7b4      	b.n	8007e90 <_malloc_r+0x4c>
 8007f26:	4613      	mov	r3, r2
 8007f28:	e7cc      	b.n	8007ec4 <_malloc_r+0x80>
 8007f2a:	230c      	movs	r3, #12
 8007f2c:	603b      	str	r3, [r7, #0]
 8007f2e:	4638      	mov	r0, r7
 8007f30:	f000 f80e 	bl	8007f50 <__malloc_unlock>
 8007f34:	e797      	b.n	8007e66 <_malloc_r+0x22>
 8007f36:	6025      	str	r5, [r4, #0]
 8007f38:	e7dc      	b.n	8007ef4 <_malloc_r+0xb0>
 8007f3a:	605b      	str	r3, [r3, #4]
 8007f3c:	deff      	udf	#255	; 0xff
 8007f3e:	bf00      	nop
 8007f40:	200004d8 	.word	0x200004d8

08007f44 <__malloc_lock>:
 8007f44:	4801      	ldr	r0, [pc, #4]	; (8007f4c <__malloc_lock+0x8>)
 8007f46:	f7ff b88a 	b.w	800705e <__retarget_lock_acquire_recursive>
 8007f4a:	bf00      	nop
 8007f4c:	200004d4 	.word	0x200004d4

08007f50 <__malloc_unlock>:
 8007f50:	4801      	ldr	r0, [pc, #4]	; (8007f58 <__malloc_unlock+0x8>)
 8007f52:	f7ff b885 	b.w	8007060 <__retarget_lock_release_recursive>
 8007f56:	bf00      	nop
 8007f58:	200004d4 	.word	0x200004d4

08007f5c <_Balloc>:
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	69c6      	ldr	r6, [r0, #28]
 8007f60:	4604      	mov	r4, r0
 8007f62:	460d      	mov	r5, r1
 8007f64:	b976      	cbnz	r6, 8007f84 <_Balloc+0x28>
 8007f66:	2010      	movs	r0, #16
 8007f68:	f7ff ff44 	bl	8007df4 <malloc>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	61e0      	str	r0, [r4, #28]
 8007f70:	b920      	cbnz	r0, 8007f7c <_Balloc+0x20>
 8007f72:	4b18      	ldr	r3, [pc, #96]	; (8007fd4 <_Balloc+0x78>)
 8007f74:	4818      	ldr	r0, [pc, #96]	; (8007fd8 <_Balloc+0x7c>)
 8007f76:	216b      	movs	r1, #107	; 0x6b
 8007f78:	f000 fdaa 	bl	8008ad0 <__assert_func>
 8007f7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f80:	6006      	str	r6, [r0, #0]
 8007f82:	60c6      	str	r6, [r0, #12]
 8007f84:	69e6      	ldr	r6, [r4, #28]
 8007f86:	68f3      	ldr	r3, [r6, #12]
 8007f88:	b183      	cbz	r3, 8007fac <_Balloc+0x50>
 8007f8a:	69e3      	ldr	r3, [r4, #28]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f92:	b9b8      	cbnz	r0, 8007fc4 <_Balloc+0x68>
 8007f94:	2101      	movs	r1, #1
 8007f96:	fa01 f605 	lsl.w	r6, r1, r5
 8007f9a:	1d72      	adds	r2, r6, #5
 8007f9c:	0092      	lsls	r2, r2, #2
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f000 fdb4 	bl	8008b0c <_calloc_r>
 8007fa4:	b160      	cbz	r0, 8007fc0 <_Balloc+0x64>
 8007fa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007faa:	e00e      	b.n	8007fca <_Balloc+0x6e>
 8007fac:	2221      	movs	r2, #33	; 0x21
 8007fae:	2104      	movs	r1, #4
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f000 fdab 	bl	8008b0c <_calloc_r>
 8007fb6:	69e3      	ldr	r3, [r4, #28]
 8007fb8:	60f0      	str	r0, [r6, #12]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1e4      	bne.n	8007f8a <_Balloc+0x2e>
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	bd70      	pop	{r4, r5, r6, pc}
 8007fc4:	6802      	ldr	r2, [r0, #0]
 8007fc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fd0:	e7f7      	b.n	8007fc2 <_Balloc+0x66>
 8007fd2:	bf00      	nop
 8007fd4:	0800928d 	.word	0x0800928d
 8007fd8:	0800930d 	.word	0x0800930d

08007fdc <_Bfree>:
 8007fdc:	b570      	push	{r4, r5, r6, lr}
 8007fde:	69c6      	ldr	r6, [r0, #28]
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	b976      	cbnz	r6, 8008004 <_Bfree+0x28>
 8007fe6:	2010      	movs	r0, #16
 8007fe8:	f7ff ff04 	bl	8007df4 <malloc>
 8007fec:	4602      	mov	r2, r0
 8007fee:	61e8      	str	r0, [r5, #28]
 8007ff0:	b920      	cbnz	r0, 8007ffc <_Bfree+0x20>
 8007ff2:	4b09      	ldr	r3, [pc, #36]	; (8008018 <_Bfree+0x3c>)
 8007ff4:	4809      	ldr	r0, [pc, #36]	; (800801c <_Bfree+0x40>)
 8007ff6:	218f      	movs	r1, #143	; 0x8f
 8007ff8:	f000 fd6a 	bl	8008ad0 <__assert_func>
 8007ffc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008000:	6006      	str	r6, [r0, #0]
 8008002:	60c6      	str	r6, [r0, #12]
 8008004:	b13c      	cbz	r4, 8008016 <_Bfree+0x3a>
 8008006:	69eb      	ldr	r3, [r5, #28]
 8008008:	6862      	ldr	r2, [r4, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008010:	6021      	str	r1, [r4, #0]
 8008012:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008016:	bd70      	pop	{r4, r5, r6, pc}
 8008018:	0800928d 	.word	0x0800928d
 800801c:	0800930d 	.word	0x0800930d

08008020 <__multadd>:
 8008020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008024:	690d      	ldr	r5, [r1, #16]
 8008026:	4607      	mov	r7, r0
 8008028:	460c      	mov	r4, r1
 800802a:	461e      	mov	r6, r3
 800802c:	f101 0c14 	add.w	ip, r1, #20
 8008030:	2000      	movs	r0, #0
 8008032:	f8dc 3000 	ldr.w	r3, [ip]
 8008036:	b299      	uxth	r1, r3
 8008038:	fb02 6101 	mla	r1, r2, r1, r6
 800803c:	0c1e      	lsrs	r6, r3, #16
 800803e:	0c0b      	lsrs	r3, r1, #16
 8008040:	fb02 3306 	mla	r3, r2, r6, r3
 8008044:	b289      	uxth	r1, r1
 8008046:	3001      	adds	r0, #1
 8008048:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800804c:	4285      	cmp	r5, r0
 800804e:	f84c 1b04 	str.w	r1, [ip], #4
 8008052:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008056:	dcec      	bgt.n	8008032 <__multadd+0x12>
 8008058:	b30e      	cbz	r6, 800809e <__multadd+0x7e>
 800805a:	68a3      	ldr	r3, [r4, #8]
 800805c:	42ab      	cmp	r3, r5
 800805e:	dc19      	bgt.n	8008094 <__multadd+0x74>
 8008060:	6861      	ldr	r1, [r4, #4]
 8008062:	4638      	mov	r0, r7
 8008064:	3101      	adds	r1, #1
 8008066:	f7ff ff79 	bl	8007f5c <_Balloc>
 800806a:	4680      	mov	r8, r0
 800806c:	b928      	cbnz	r0, 800807a <__multadd+0x5a>
 800806e:	4602      	mov	r2, r0
 8008070:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <__multadd+0x84>)
 8008072:	480d      	ldr	r0, [pc, #52]	; (80080a8 <__multadd+0x88>)
 8008074:	21ba      	movs	r1, #186	; 0xba
 8008076:	f000 fd2b 	bl	8008ad0 <__assert_func>
 800807a:	6922      	ldr	r2, [r4, #16]
 800807c:	3202      	adds	r2, #2
 800807e:	f104 010c 	add.w	r1, r4, #12
 8008082:	0092      	lsls	r2, r2, #2
 8008084:	300c      	adds	r0, #12
 8008086:	f000 fd15 	bl	8008ab4 <memcpy>
 800808a:	4621      	mov	r1, r4
 800808c:	4638      	mov	r0, r7
 800808e:	f7ff ffa5 	bl	8007fdc <_Bfree>
 8008092:	4644      	mov	r4, r8
 8008094:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008098:	3501      	adds	r5, #1
 800809a:	615e      	str	r6, [r3, #20]
 800809c:	6125      	str	r5, [r4, #16]
 800809e:	4620      	mov	r0, r4
 80080a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a4:	080092fc 	.word	0x080092fc
 80080a8:	0800930d 	.word	0x0800930d

080080ac <__hi0bits>:
 80080ac:	0c03      	lsrs	r3, r0, #16
 80080ae:	041b      	lsls	r3, r3, #16
 80080b0:	b9d3      	cbnz	r3, 80080e8 <__hi0bits+0x3c>
 80080b2:	0400      	lsls	r0, r0, #16
 80080b4:	2310      	movs	r3, #16
 80080b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80080ba:	bf04      	itt	eq
 80080bc:	0200      	lsleq	r0, r0, #8
 80080be:	3308      	addeq	r3, #8
 80080c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80080c4:	bf04      	itt	eq
 80080c6:	0100      	lsleq	r0, r0, #4
 80080c8:	3304      	addeq	r3, #4
 80080ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80080ce:	bf04      	itt	eq
 80080d0:	0080      	lsleq	r0, r0, #2
 80080d2:	3302      	addeq	r3, #2
 80080d4:	2800      	cmp	r0, #0
 80080d6:	db05      	blt.n	80080e4 <__hi0bits+0x38>
 80080d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80080dc:	f103 0301 	add.w	r3, r3, #1
 80080e0:	bf08      	it	eq
 80080e2:	2320      	moveq	r3, #32
 80080e4:	4618      	mov	r0, r3
 80080e6:	4770      	bx	lr
 80080e8:	2300      	movs	r3, #0
 80080ea:	e7e4      	b.n	80080b6 <__hi0bits+0xa>

080080ec <__lo0bits>:
 80080ec:	6803      	ldr	r3, [r0, #0]
 80080ee:	f013 0207 	ands.w	r2, r3, #7
 80080f2:	d00c      	beq.n	800810e <__lo0bits+0x22>
 80080f4:	07d9      	lsls	r1, r3, #31
 80080f6:	d422      	bmi.n	800813e <__lo0bits+0x52>
 80080f8:	079a      	lsls	r2, r3, #30
 80080fa:	bf49      	itett	mi
 80080fc:	085b      	lsrmi	r3, r3, #1
 80080fe:	089b      	lsrpl	r3, r3, #2
 8008100:	6003      	strmi	r3, [r0, #0]
 8008102:	2201      	movmi	r2, #1
 8008104:	bf5c      	itt	pl
 8008106:	6003      	strpl	r3, [r0, #0]
 8008108:	2202      	movpl	r2, #2
 800810a:	4610      	mov	r0, r2
 800810c:	4770      	bx	lr
 800810e:	b299      	uxth	r1, r3
 8008110:	b909      	cbnz	r1, 8008116 <__lo0bits+0x2a>
 8008112:	0c1b      	lsrs	r3, r3, #16
 8008114:	2210      	movs	r2, #16
 8008116:	b2d9      	uxtb	r1, r3
 8008118:	b909      	cbnz	r1, 800811e <__lo0bits+0x32>
 800811a:	3208      	adds	r2, #8
 800811c:	0a1b      	lsrs	r3, r3, #8
 800811e:	0719      	lsls	r1, r3, #28
 8008120:	bf04      	itt	eq
 8008122:	091b      	lsreq	r3, r3, #4
 8008124:	3204      	addeq	r2, #4
 8008126:	0799      	lsls	r1, r3, #30
 8008128:	bf04      	itt	eq
 800812a:	089b      	lsreq	r3, r3, #2
 800812c:	3202      	addeq	r2, #2
 800812e:	07d9      	lsls	r1, r3, #31
 8008130:	d403      	bmi.n	800813a <__lo0bits+0x4e>
 8008132:	085b      	lsrs	r3, r3, #1
 8008134:	f102 0201 	add.w	r2, r2, #1
 8008138:	d003      	beq.n	8008142 <__lo0bits+0x56>
 800813a:	6003      	str	r3, [r0, #0]
 800813c:	e7e5      	b.n	800810a <__lo0bits+0x1e>
 800813e:	2200      	movs	r2, #0
 8008140:	e7e3      	b.n	800810a <__lo0bits+0x1e>
 8008142:	2220      	movs	r2, #32
 8008144:	e7e1      	b.n	800810a <__lo0bits+0x1e>
	...

08008148 <__i2b>:
 8008148:	b510      	push	{r4, lr}
 800814a:	460c      	mov	r4, r1
 800814c:	2101      	movs	r1, #1
 800814e:	f7ff ff05 	bl	8007f5c <_Balloc>
 8008152:	4602      	mov	r2, r0
 8008154:	b928      	cbnz	r0, 8008162 <__i2b+0x1a>
 8008156:	4b05      	ldr	r3, [pc, #20]	; (800816c <__i2b+0x24>)
 8008158:	4805      	ldr	r0, [pc, #20]	; (8008170 <__i2b+0x28>)
 800815a:	f240 1145 	movw	r1, #325	; 0x145
 800815e:	f000 fcb7 	bl	8008ad0 <__assert_func>
 8008162:	2301      	movs	r3, #1
 8008164:	6144      	str	r4, [r0, #20]
 8008166:	6103      	str	r3, [r0, #16]
 8008168:	bd10      	pop	{r4, pc}
 800816a:	bf00      	nop
 800816c:	080092fc 	.word	0x080092fc
 8008170:	0800930d 	.word	0x0800930d

08008174 <__multiply>:
 8008174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008178:	4691      	mov	r9, r2
 800817a:	690a      	ldr	r2, [r1, #16]
 800817c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008180:	429a      	cmp	r2, r3
 8008182:	bfb8      	it	lt
 8008184:	460b      	movlt	r3, r1
 8008186:	460c      	mov	r4, r1
 8008188:	bfbc      	itt	lt
 800818a:	464c      	movlt	r4, r9
 800818c:	4699      	movlt	r9, r3
 800818e:	6927      	ldr	r7, [r4, #16]
 8008190:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008194:	68a3      	ldr	r3, [r4, #8]
 8008196:	6861      	ldr	r1, [r4, #4]
 8008198:	eb07 060a 	add.w	r6, r7, sl
 800819c:	42b3      	cmp	r3, r6
 800819e:	b085      	sub	sp, #20
 80081a0:	bfb8      	it	lt
 80081a2:	3101      	addlt	r1, #1
 80081a4:	f7ff feda 	bl	8007f5c <_Balloc>
 80081a8:	b930      	cbnz	r0, 80081b8 <__multiply+0x44>
 80081aa:	4602      	mov	r2, r0
 80081ac:	4b44      	ldr	r3, [pc, #272]	; (80082c0 <__multiply+0x14c>)
 80081ae:	4845      	ldr	r0, [pc, #276]	; (80082c4 <__multiply+0x150>)
 80081b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80081b4:	f000 fc8c 	bl	8008ad0 <__assert_func>
 80081b8:	f100 0514 	add.w	r5, r0, #20
 80081bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081c0:	462b      	mov	r3, r5
 80081c2:	2200      	movs	r2, #0
 80081c4:	4543      	cmp	r3, r8
 80081c6:	d321      	bcc.n	800820c <__multiply+0x98>
 80081c8:	f104 0314 	add.w	r3, r4, #20
 80081cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80081d0:	f109 0314 	add.w	r3, r9, #20
 80081d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80081d8:	9202      	str	r2, [sp, #8]
 80081da:	1b3a      	subs	r2, r7, r4
 80081dc:	3a15      	subs	r2, #21
 80081de:	f022 0203 	bic.w	r2, r2, #3
 80081e2:	3204      	adds	r2, #4
 80081e4:	f104 0115 	add.w	r1, r4, #21
 80081e8:	428f      	cmp	r7, r1
 80081ea:	bf38      	it	cc
 80081ec:	2204      	movcc	r2, #4
 80081ee:	9201      	str	r2, [sp, #4]
 80081f0:	9a02      	ldr	r2, [sp, #8]
 80081f2:	9303      	str	r3, [sp, #12]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d80c      	bhi.n	8008212 <__multiply+0x9e>
 80081f8:	2e00      	cmp	r6, #0
 80081fa:	dd03      	ble.n	8008204 <__multiply+0x90>
 80081fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008200:	2b00      	cmp	r3, #0
 8008202:	d05b      	beq.n	80082bc <__multiply+0x148>
 8008204:	6106      	str	r6, [r0, #16]
 8008206:	b005      	add	sp, #20
 8008208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820c:	f843 2b04 	str.w	r2, [r3], #4
 8008210:	e7d8      	b.n	80081c4 <__multiply+0x50>
 8008212:	f8b3 a000 	ldrh.w	sl, [r3]
 8008216:	f1ba 0f00 	cmp.w	sl, #0
 800821a:	d024      	beq.n	8008266 <__multiply+0xf2>
 800821c:	f104 0e14 	add.w	lr, r4, #20
 8008220:	46a9      	mov	r9, r5
 8008222:	f04f 0c00 	mov.w	ip, #0
 8008226:	f85e 2b04 	ldr.w	r2, [lr], #4
 800822a:	f8d9 1000 	ldr.w	r1, [r9]
 800822e:	fa1f fb82 	uxth.w	fp, r2
 8008232:	b289      	uxth	r1, r1
 8008234:	fb0a 110b 	mla	r1, sl, fp, r1
 8008238:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800823c:	f8d9 2000 	ldr.w	r2, [r9]
 8008240:	4461      	add	r1, ip
 8008242:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008246:	fb0a c20b 	mla	r2, sl, fp, ip
 800824a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800824e:	b289      	uxth	r1, r1
 8008250:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008254:	4577      	cmp	r7, lr
 8008256:	f849 1b04 	str.w	r1, [r9], #4
 800825a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800825e:	d8e2      	bhi.n	8008226 <__multiply+0xb2>
 8008260:	9a01      	ldr	r2, [sp, #4]
 8008262:	f845 c002 	str.w	ip, [r5, r2]
 8008266:	9a03      	ldr	r2, [sp, #12]
 8008268:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800826c:	3304      	adds	r3, #4
 800826e:	f1b9 0f00 	cmp.w	r9, #0
 8008272:	d021      	beq.n	80082b8 <__multiply+0x144>
 8008274:	6829      	ldr	r1, [r5, #0]
 8008276:	f104 0c14 	add.w	ip, r4, #20
 800827a:	46ae      	mov	lr, r5
 800827c:	f04f 0a00 	mov.w	sl, #0
 8008280:	f8bc b000 	ldrh.w	fp, [ip]
 8008284:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008288:	fb09 220b 	mla	r2, r9, fp, r2
 800828c:	4452      	add	r2, sl
 800828e:	b289      	uxth	r1, r1
 8008290:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008294:	f84e 1b04 	str.w	r1, [lr], #4
 8008298:	f85c 1b04 	ldr.w	r1, [ip], #4
 800829c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80082a0:	f8be 1000 	ldrh.w	r1, [lr]
 80082a4:	fb09 110a 	mla	r1, r9, sl, r1
 80082a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80082ac:	4567      	cmp	r7, ip
 80082ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80082b2:	d8e5      	bhi.n	8008280 <__multiply+0x10c>
 80082b4:	9a01      	ldr	r2, [sp, #4]
 80082b6:	50a9      	str	r1, [r5, r2]
 80082b8:	3504      	adds	r5, #4
 80082ba:	e799      	b.n	80081f0 <__multiply+0x7c>
 80082bc:	3e01      	subs	r6, #1
 80082be:	e79b      	b.n	80081f8 <__multiply+0x84>
 80082c0:	080092fc 	.word	0x080092fc
 80082c4:	0800930d 	.word	0x0800930d

080082c8 <__pow5mult>:
 80082c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082cc:	4615      	mov	r5, r2
 80082ce:	f012 0203 	ands.w	r2, r2, #3
 80082d2:	4606      	mov	r6, r0
 80082d4:	460f      	mov	r7, r1
 80082d6:	d007      	beq.n	80082e8 <__pow5mult+0x20>
 80082d8:	4c25      	ldr	r4, [pc, #148]	; (8008370 <__pow5mult+0xa8>)
 80082da:	3a01      	subs	r2, #1
 80082dc:	2300      	movs	r3, #0
 80082de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082e2:	f7ff fe9d 	bl	8008020 <__multadd>
 80082e6:	4607      	mov	r7, r0
 80082e8:	10ad      	asrs	r5, r5, #2
 80082ea:	d03d      	beq.n	8008368 <__pow5mult+0xa0>
 80082ec:	69f4      	ldr	r4, [r6, #28]
 80082ee:	b97c      	cbnz	r4, 8008310 <__pow5mult+0x48>
 80082f0:	2010      	movs	r0, #16
 80082f2:	f7ff fd7f 	bl	8007df4 <malloc>
 80082f6:	4602      	mov	r2, r0
 80082f8:	61f0      	str	r0, [r6, #28]
 80082fa:	b928      	cbnz	r0, 8008308 <__pow5mult+0x40>
 80082fc:	4b1d      	ldr	r3, [pc, #116]	; (8008374 <__pow5mult+0xac>)
 80082fe:	481e      	ldr	r0, [pc, #120]	; (8008378 <__pow5mult+0xb0>)
 8008300:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008304:	f000 fbe4 	bl	8008ad0 <__assert_func>
 8008308:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800830c:	6004      	str	r4, [r0, #0]
 800830e:	60c4      	str	r4, [r0, #12]
 8008310:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008314:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008318:	b94c      	cbnz	r4, 800832e <__pow5mult+0x66>
 800831a:	f240 2171 	movw	r1, #625	; 0x271
 800831e:	4630      	mov	r0, r6
 8008320:	f7ff ff12 	bl	8008148 <__i2b>
 8008324:	2300      	movs	r3, #0
 8008326:	f8c8 0008 	str.w	r0, [r8, #8]
 800832a:	4604      	mov	r4, r0
 800832c:	6003      	str	r3, [r0, #0]
 800832e:	f04f 0900 	mov.w	r9, #0
 8008332:	07eb      	lsls	r3, r5, #31
 8008334:	d50a      	bpl.n	800834c <__pow5mult+0x84>
 8008336:	4639      	mov	r1, r7
 8008338:	4622      	mov	r2, r4
 800833a:	4630      	mov	r0, r6
 800833c:	f7ff ff1a 	bl	8008174 <__multiply>
 8008340:	4639      	mov	r1, r7
 8008342:	4680      	mov	r8, r0
 8008344:	4630      	mov	r0, r6
 8008346:	f7ff fe49 	bl	8007fdc <_Bfree>
 800834a:	4647      	mov	r7, r8
 800834c:	106d      	asrs	r5, r5, #1
 800834e:	d00b      	beq.n	8008368 <__pow5mult+0xa0>
 8008350:	6820      	ldr	r0, [r4, #0]
 8008352:	b938      	cbnz	r0, 8008364 <__pow5mult+0x9c>
 8008354:	4622      	mov	r2, r4
 8008356:	4621      	mov	r1, r4
 8008358:	4630      	mov	r0, r6
 800835a:	f7ff ff0b 	bl	8008174 <__multiply>
 800835e:	6020      	str	r0, [r4, #0]
 8008360:	f8c0 9000 	str.w	r9, [r0]
 8008364:	4604      	mov	r4, r0
 8008366:	e7e4      	b.n	8008332 <__pow5mult+0x6a>
 8008368:	4638      	mov	r0, r7
 800836a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800836e:	bf00      	nop
 8008370:	08009458 	.word	0x08009458
 8008374:	0800928d 	.word	0x0800928d
 8008378:	0800930d 	.word	0x0800930d

0800837c <__lshift>:
 800837c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008380:	460c      	mov	r4, r1
 8008382:	6849      	ldr	r1, [r1, #4]
 8008384:	6923      	ldr	r3, [r4, #16]
 8008386:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800838a:	68a3      	ldr	r3, [r4, #8]
 800838c:	4607      	mov	r7, r0
 800838e:	4691      	mov	r9, r2
 8008390:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008394:	f108 0601 	add.w	r6, r8, #1
 8008398:	42b3      	cmp	r3, r6
 800839a:	db0b      	blt.n	80083b4 <__lshift+0x38>
 800839c:	4638      	mov	r0, r7
 800839e:	f7ff fddd 	bl	8007f5c <_Balloc>
 80083a2:	4605      	mov	r5, r0
 80083a4:	b948      	cbnz	r0, 80083ba <__lshift+0x3e>
 80083a6:	4602      	mov	r2, r0
 80083a8:	4b28      	ldr	r3, [pc, #160]	; (800844c <__lshift+0xd0>)
 80083aa:	4829      	ldr	r0, [pc, #164]	; (8008450 <__lshift+0xd4>)
 80083ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80083b0:	f000 fb8e 	bl	8008ad0 <__assert_func>
 80083b4:	3101      	adds	r1, #1
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	e7ee      	b.n	8008398 <__lshift+0x1c>
 80083ba:	2300      	movs	r3, #0
 80083bc:	f100 0114 	add.w	r1, r0, #20
 80083c0:	f100 0210 	add.w	r2, r0, #16
 80083c4:	4618      	mov	r0, r3
 80083c6:	4553      	cmp	r3, sl
 80083c8:	db33      	blt.n	8008432 <__lshift+0xb6>
 80083ca:	6920      	ldr	r0, [r4, #16]
 80083cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083d0:	f104 0314 	add.w	r3, r4, #20
 80083d4:	f019 091f 	ands.w	r9, r9, #31
 80083d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083e0:	d02b      	beq.n	800843a <__lshift+0xbe>
 80083e2:	f1c9 0e20 	rsb	lr, r9, #32
 80083e6:	468a      	mov	sl, r1
 80083e8:	2200      	movs	r2, #0
 80083ea:	6818      	ldr	r0, [r3, #0]
 80083ec:	fa00 f009 	lsl.w	r0, r0, r9
 80083f0:	4310      	orrs	r0, r2
 80083f2:	f84a 0b04 	str.w	r0, [sl], #4
 80083f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083fa:	459c      	cmp	ip, r3
 80083fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008400:	d8f3      	bhi.n	80083ea <__lshift+0x6e>
 8008402:	ebac 0304 	sub.w	r3, ip, r4
 8008406:	3b15      	subs	r3, #21
 8008408:	f023 0303 	bic.w	r3, r3, #3
 800840c:	3304      	adds	r3, #4
 800840e:	f104 0015 	add.w	r0, r4, #21
 8008412:	4584      	cmp	ip, r0
 8008414:	bf38      	it	cc
 8008416:	2304      	movcc	r3, #4
 8008418:	50ca      	str	r2, [r1, r3]
 800841a:	b10a      	cbz	r2, 8008420 <__lshift+0xa4>
 800841c:	f108 0602 	add.w	r6, r8, #2
 8008420:	3e01      	subs	r6, #1
 8008422:	4638      	mov	r0, r7
 8008424:	612e      	str	r6, [r5, #16]
 8008426:	4621      	mov	r1, r4
 8008428:	f7ff fdd8 	bl	8007fdc <_Bfree>
 800842c:	4628      	mov	r0, r5
 800842e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008432:	f842 0f04 	str.w	r0, [r2, #4]!
 8008436:	3301      	adds	r3, #1
 8008438:	e7c5      	b.n	80083c6 <__lshift+0x4a>
 800843a:	3904      	subs	r1, #4
 800843c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008440:	f841 2f04 	str.w	r2, [r1, #4]!
 8008444:	459c      	cmp	ip, r3
 8008446:	d8f9      	bhi.n	800843c <__lshift+0xc0>
 8008448:	e7ea      	b.n	8008420 <__lshift+0xa4>
 800844a:	bf00      	nop
 800844c:	080092fc 	.word	0x080092fc
 8008450:	0800930d 	.word	0x0800930d

08008454 <__mcmp>:
 8008454:	b530      	push	{r4, r5, lr}
 8008456:	6902      	ldr	r2, [r0, #16]
 8008458:	690c      	ldr	r4, [r1, #16]
 800845a:	1b12      	subs	r2, r2, r4
 800845c:	d10e      	bne.n	800847c <__mcmp+0x28>
 800845e:	f100 0314 	add.w	r3, r0, #20
 8008462:	3114      	adds	r1, #20
 8008464:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008468:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800846c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008470:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008474:	42a5      	cmp	r5, r4
 8008476:	d003      	beq.n	8008480 <__mcmp+0x2c>
 8008478:	d305      	bcc.n	8008486 <__mcmp+0x32>
 800847a:	2201      	movs	r2, #1
 800847c:	4610      	mov	r0, r2
 800847e:	bd30      	pop	{r4, r5, pc}
 8008480:	4283      	cmp	r3, r0
 8008482:	d3f3      	bcc.n	800846c <__mcmp+0x18>
 8008484:	e7fa      	b.n	800847c <__mcmp+0x28>
 8008486:	f04f 32ff 	mov.w	r2, #4294967295
 800848a:	e7f7      	b.n	800847c <__mcmp+0x28>

0800848c <__mdiff>:
 800848c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008490:	460c      	mov	r4, r1
 8008492:	4606      	mov	r6, r0
 8008494:	4611      	mov	r1, r2
 8008496:	4620      	mov	r0, r4
 8008498:	4690      	mov	r8, r2
 800849a:	f7ff ffdb 	bl	8008454 <__mcmp>
 800849e:	1e05      	subs	r5, r0, #0
 80084a0:	d110      	bne.n	80084c4 <__mdiff+0x38>
 80084a2:	4629      	mov	r1, r5
 80084a4:	4630      	mov	r0, r6
 80084a6:	f7ff fd59 	bl	8007f5c <_Balloc>
 80084aa:	b930      	cbnz	r0, 80084ba <__mdiff+0x2e>
 80084ac:	4b3a      	ldr	r3, [pc, #232]	; (8008598 <__mdiff+0x10c>)
 80084ae:	4602      	mov	r2, r0
 80084b0:	f240 2137 	movw	r1, #567	; 0x237
 80084b4:	4839      	ldr	r0, [pc, #228]	; (800859c <__mdiff+0x110>)
 80084b6:	f000 fb0b 	bl	8008ad0 <__assert_func>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c4:	bfa4      	itt	ge
 80084c6:	4643      	movge	r3, r8
 80084c8:	46a0      	movge	r8, r4
 80084ca:	4630      	mov	r0, r6
 80084cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80084d0:	bfa6      	itte	ge
 80084d2:	461c      	movge	r4, r3
 80084d4:	2500      	movge	r5, #0
 80084d6:	2501      	movlt	r5, #1
 80084d8:	f7ff fd40 	bl	8007f5c <_Balloc>
 80084dc:	b920      	cbnz	r0, 80084e8 <__mdiff+0x5c>
 80084de:	4b2e      	ldr	r3, [pc, #184]	; (8008598 <__mdiff+0x10c>)
 80084e0:	4602      	mov	r2, r0
 80084e2:	f240 2145 	movw	r1, #581	; 0x245
 80084e6:	e7e5      	b.n	80084b4 <__mdiff+0x28>
 80084e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80084ec:	6926      	ldr	r6, [r4, #16]
 80084ee:	60c5      	str	r5, [r0, #12]
 80084f0:	f104 0914 	add.w	r9, r4, #20
 80084f4:	f108 0514 	add.w	r5, r8, #20
 80084f8:	f100 0e14 	add.w	lr, r0, #20
 80084fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008500:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008504:	f108 0210 	add.w	r2, r8, #16
 8008508:	46f2      	mov	sl, lr
 800850a:	2100      	movs	r1, #0
 800850c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008510:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008514:	fa11 f88b 	uxtah	r8, r1, fp
 8008518:	b299      	uxth	r1, r3
 800851a:	0c1b      	lsrs	r3, r3, #16
 800851c:	eba8 0801 	sub.w	r8, r8, r1
 8008520:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008524:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008528:	fa1f f888 	uxth.w	r8, r8
 800852c:	1419      	asrs	r1, r3, #16
 800852e:	454e      	cmp	r6, r9
 8008530:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008534:	f84a 3b04 	str.w	r3, [sl], #4
 8008538:	d8e8      	bhi.n	800850c <__mdiff+0x80>
 800853a:	1b33      	subs	r3, r6, r4
 800853c:	3b15      	subs	r3, #21
 800853e:	f023 0303 	bic.w	r3, r3, #3
 8008542:	3304      	adds	r3, #4
 8008544:	3415      	adds	r4, #21
 8008546:	42a6      	cmp	r6, r4
 8008548:	bf38      	it	cc
 800854a:	2304      	movcc	r3, #4
 800854c:	441d      	add	r5, r3
 800854e:	4473      	add	r3, lr
 8008550:	469e      	mov	lr, r3
 8008552:	462e      	mov	r6, r5
 8008554:	4566      	cmp	r6, ip
 8008556:	d30e      	bcc.n	8008576 <__mdiff+0xea>
 8008558:	f10c 0203 	add.w	r2, ip, #3
 800855c:	1b52      	subs	r2, r2, r5
 800855e:	f022 0203 	bic.w	r2, r2, #3
 8008562:	3d03      	subs	r5, #3
 8008564:	45ac      	cmp	ip, r5
 8008566:	bf38      	it	cc
 8008568:	2200      	movcc	r2, #0
 800856a:	4413      	add	r3, r2
 800856c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008570:	b17a      	cbz	r2, 8008592 <__mdiff+0x106>
 8008572:	6107      	str	r7, [r0, #16]
 8008574:	e7a4      	b.n	80084c0 <__mdiff+0x34>
 8008576:	f856 8b04 	ldr.w	r8, [r6], #4
 800857a:	fa11 f288 	uxtah	r2, r1, r8
 800857e:	1414      	asrs	r4, r2, #16
 8008580:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008584:	b292      	uxth	r2, r2
 8008586:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800858a:	f84e 2b04 	str.w	r2, [lr], #4
 800858e:	1421      	asrs	r1, r4, #16
 8008590:	e7e0      	b.n	8008554 <__mdiff+0xc8>
 8008592:	3f01      	subs	r7, #1
 8008594:	e7ea      	b.n	800856c <__mdiff+0xe0>
 8008596:	bf00      	nop
 8008598:	080092fc 	.word	0x080092fc
 800859c:	0800930d 	.word	0x0800930d

080085a0 <__d2b>:
 80085a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085a4:	460f      	mov	r7, r1
 80085a6:	2101      	movs	r1, #1
 80085a8:	ec59 8b10 	vmov	r8, r9, d0
 80085ac:	4616      	mov	r6, r2
 80085ae:	f7ff fcd5 	bl	8007f5c <_Balloc>
 80085b2:	4604      	mov	r4, r0
 80085b4:	b930      	cbnz	r0, 80085c4 <__d2b+0x24>
 80085b6:	4602      	mov	r2, r0
 80085b8:	4b24      	ldr	r3, [pc, #144]	; (800864c <__d2b+0xac>)
 80085ba:	4825      	ldr	r0, [pc, #148]	; (8008650 <__d2b+0xb0>)
 80085bc:	f240 310f 	movw	r1, #783	; 0x30f
 80085c0:	f000 fa86 	bl	8008ad0 <__assert_func>
 80085c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085cc:	bb2d      	cbnz	r5, 800861a <__d2b+0x7a>
 80085ce:	9301      	str	r3, [sp, #4]
 80085d0:	f1b8 0300 	subs.w	r3, r8, #0
 80085d4:	d026      	beq.n	8008624 <__d2b+0x84>
 80085d6:	4668      	mov	r0, sp
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	f7ff fd87 	bl	80080ec <__lo0bits>
 80085de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80085e2:	b1e8      	cbz	r0, 8008620 <__d2b+0x80>
 80085e4:	f1c0 0320 	rsb	r3, r0, #32
 80085e8:	fa02 f303 	lsl.w	r3, r2, r3
 80085ec:	430b      	orrs	r3, r1
 80085ee:	40c2      	lsrs	r2, r0
 80085f0:	6163      	str	r3, [r4, #20]
 80085f2:	9201      	str	r2, [sp, #4]
 80085f4:	9b01      	ldr	r3, [sp, #4]
 80085f6:	61a3      	str	r3, [r4, #24]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	bf14      	ite	ne
 80085fc:	2202      	movne	r2, #2
 80085fe:	2201      	moveq	r2, #1
 8008600:	6122      	str	r2, [r4, #16]
 8008602:	b1bd      	cbz	r5, 8008634 <__d2b+0x94>
 8008604:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008608:	4405      	add	r5, r0
 800860a:	603d      	str	r5, [r7, #0]
 800860c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008610:	6030      	str	r0, [r6, #0]
 8008612:	4620      	mov	r0, r4
 8008614:	b003      	add	sp, #12
 8008616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800861a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800861e:	e7d6      	b.n	80085ce <__d2b+0x2e>
 8008620:	6161      	str	r1, [r4, #20]
 8008622:	e7e7      	b.n	80085f4 <__d2b+0x54>
 8008624:	a801      	add	r0, sp, #4
 8008626:	f7ff fd61 	bl	80080ec <__lo0bits>
 800862a:	9b01      	ldr	r3, [sp, #4]
 800862c:	6163      	str	r3, [r4, #20]
 800862e:	3020      	adds	r0, #32
 8008630:	2201      	movs	r2, #1
 8008632:	e7e5      	b.n	8008600 <__d2b+0x60>
 8008634:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008638:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800863c:	6038      	str	r0, [r7, #0]
 800863e:	6918      	ldr	r0, [r3, #16]
 8008640:	f7ff fd34 	bl	80080ac <__hi0bits>
 8008644:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008648:	e7e2      	b.n	8008610 <__d2b+0x70>
 800864a:	bf00      	nop
 800864c:	080092fc 	.word	0x080092fc
 8008650:	0800930d 	.word	0x0800930d

08008654 <__ssputs_r>:
 8008654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008658:	688e      	ldr	r6, [r1, #8]
 800865a:	461f      	mov	r7, r3
 800865c:	42be      	cmp	r6, r7
 800865e:	680b      	ldr	r3, [r1, #0]
 8008660:	4682      	mov	sl, r0
 8008662:	460c      	mov	r4, r1
 8008664:	4690      	mov	r8, r2
 8008666:	d82c      	bhi.n	80086c2 <__ssputs_r+0x6e>
 8008668:	898a      	ldrh	r2, [r1, #12]
 800866a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800866e:	d026      	beq.n	80086be <__ssputs_r+0x6a>
 8008670:	6965      	ldr	r5, [r4, #20]
 8008672:	6909      	ldr	r1, [r1, #16]
 8008674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008678:	eba3 0901 	sub.w	r9, r3, r1
 800867c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008680:	1c7b      	adds	r3, r7, #1
 8008682:	444b      	add	r3, r9
 8008684:	106d      	asrs	r5, r5, #1
 8008686:	429d      	cmp	r5, r3
 8008688:	bf38      	it	cc
 800868a:	461d      	movcc	r5, r3
 800868c:	0553      	lsls	r3, r2, #21
 800868e:	d527      	bpl.n	80086e0 <__ssputs_r+0x8c>
 8008690:	4629      	mov	r1, r5
 8008692:	f7ff fbd7 	bl	8007e44 <_malloc_r>
 8008696:	4606      	mov	r6, r0
 8008698:	b360      	cbz	r0, 80086f4 <__ssputs_r+0xa0>
 800869a:	6921      	ldr	r1, [r4, #16]
 800869c:	464a      	mov	r2, r9
 800869e:	f000 fa09 	bl	8008ab4 <memcpy>
 80086a2:	89a3      	ldrh	r3, [r4, #12]
 80086a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ac:	81a3      	strh	r3, [r4, #12]
 80086ae:	6126      	str	r6, [r4, #16]
 80086b0:	6165      	str	r5, [r4, #20]
 80086b2:	444e      	add	r6, r9
 80086b4:	eba5 0509 	sub.w	r5, r5, r9
 80086b8:	6026      	str	r6, [r4, #0]
 80086ba:	60a5      	str	r5, [r4, #8]
 80086bc:	463e      	mov	r6, r7
 80086be:	42be      	cmp	r6, r7
 80086c0:	d900      	bls.n	80086c4 <__ssputs_r+0x70>
 80086c2:	463e      	mov	r6, r7
 80086c4:	6820      	ldr	r0, [r4, #0]
 80086c6:	4632      	mov	r2, r6
 80086c8:	4641      	mov	r1, r8
 80086ca:	f000 f9c9 	bl	8008a60 <memmove>
 80086ce:	68a3      	ldr	r3, [r4, #8]
 80086d0:	1b9b      	subs	r3, r3, r6
 80086d2:	60a3      	str	r3, [r4, #8]
 80086d4:	6823      	ldr	r3, [r4, #0]
 80086d6:	4433      	add	r3, r6
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	2000      	movs	r0, #0
 80086dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e0:	462a      	mov	r2, r5
 80086e2:	f000 fa3b 	bl	8008b5c <_realloc_r>
 80086e6:	4606      	mov	r6, r0
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d1e0      	bne.n	80086ae <__ssputs_r+0x5a>
 80086ec:	6921      	ldr	r1, [r4, #16]
 80086ee:	4650      	mov	r0, sl
 80086f0:	f7ff fb34 	bl	8007d5c <_free_r>
 80086f4:	230c      	movs	r3, #12
 80086f6:	f8ca 3000 	str.w	r3, [sl]
 80086fa:	89a3      	ldrh	r3, [r4, #12]
 80086fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008700:	81a3      	strh	r3, [r4, #12]
 8008702:	f04f 30ff 	mov.w	r0, #4294967295
 8008706:	e7e9      	b.n	80086dc <__ssputs_r+0x88>

08008708 <_svfiprintf_r>:
 8008708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870c:	4698      	mov	r8, r3
 800870e:	898b      	ldrh	r3, [r1, #12]
 8008710:	061b      	lsls	r3, r3, #24
 8008712:	b09d      	sub	sp, #116	; 0x74
 8008714:	4607      	mov	r7, r0
 8008716:	460d      	mov	r5, r1
 8008718:	4614      	mov	r4, r2
 800871a:	d50e      	bpl.n	800873a <_svfiprintf_r+0x32>
 800871c:	690b      	ldr	r3, [r1, #16]
 800871e:	b963      	cbnz	r3, 800873a <_svfiprintf_r+0x32>
 8008720:	2140      	movs	r1, #64	; 0x40
 8008722:	f7ff fb8f 	bl	8007e44 <_malloc_r>
 8008726:	6028      	str	r0, [r5, #0]
 8008728:	6128      	str	r0, [r5, #16]
 800872a:	b920      	cbnz	r0, 8008736 <_svfiprintf_r+0x2e>
 800872c:	230c      	movs	r3, #12
 800872e:	603b      	str	r3, [r7, #0]
 8008730:	f04f 30ff 	mov.w	r0, #4294967295
 8008734:	e0d0      	b.n	80088d8 <_svfiprintf_r+0x1d0>
 8008736:	2340      	movs	r3, #64	; 0x40
 8008738:	616b      	str	r3, [r5, #20]
 800873a:	2300      	movs	r3, #0
 800873c:	9309      	str	r3, [sp, #36]	; 0x24
 800873e:	2320      	movs	r3, #32
 8008740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008744:	f8cd 800c 	str.w	r8, [sp, #12]
 8008748:	2330      	movs	r3, #48	; 0x30
 800874a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80088f0 <_svfiprintf_r+0x1e8>
 800874e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008752:	f04f 0901 	mov.w	r9, #1
 8008756:	4623      	mov	r3, r4
 8008758:	469a      	mov	sl, r3
 800875a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800875e:	b10a      	cbz	r2, 8008764 <_svfiprintf_r+0x5c>
 8008760:	2a25      	cmp	r2, #37	; 0x25
 8008762:	d1f9      	bne.n	8008758 <_svfiprintf_r+0x50>
 8008764:	ebba 0b04 	subs.w	fp, sl, r4
 8008768:	d00b      	beq.n	8008782 <_svfiprintf_r+0x7a>
 800876a:	465b      	mov	r3, fp
 800876c:	4622      	mov	r2, r4
 800876e:	4629      	mov	r1, r5
 8008770:	4638      	mov	r0, r7
 8008772:	f7ff ff6f 	bl	8008654 <__ssputs_r>
 8008776:	3001      	adds	r0, #1
 8008778:	f000 80a9 	beq.w	80088ce <_svfiprintf_r+0x1c6>
 800877c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800877e:	445a      	add	r2, fp
 8008780:	9209      	str	r2, [sp, #36]	; 0x24
 8008782:	f89a 3000 	ldrb.w	r3, [sl]
 8008786:	2b00      	cmp	r3, #0
 8008788:	f000 80a1 	beq.w	80088ce <_svfiprintf_r+0x1c6>
 800878c:	2300      	movs	r3, #0
 800878e:	f04f 32ff 	mov.w	r2, #4294967295
 8008792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008796:	f10a 0a01 	add.w	sl, sl, #1
 800879a:	9304      	str	r3, [sp, #16]
 800879c:	9307      	str	r3, [sp, #28]
 800879e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087a2:	931a      	str	r3, [sp, #104]	; 0x68
 80087a4:	4654      	mov	r4, sl
 80087a6:	2205      	movs	r2, #5
 80087a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ac:	4850      	ldr	r0, [pc, #320]	; (80088f0 <_svfiprintf_r+0x1e8>)
 80087ae:	f7f7 fd1f 	bl	80001f0 <memchr>
 80087b2:	9a04      	ldr	r2, [sp, #16]
 80087b4:	b9d8      	cbnz	r0, 80087ee <_svfiprintf_r+0xe6>
 80087b6:	06d0      	lsls	r0, r2, #27
 80087b8:	bf44      	itt	mi
 80087ba:	2320      	movmi	r3, #32
 80087bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087c0:	0711      	lsls	r1, r2, #28
 80087c2:	bf44      	itt	mi
 80087c4:	232b      	movmi	r3, #43	; 0x2b
 80087c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ca:	f89a 3000 	ldrb.w	r3, [sl]
 80087ce:	2b2a      	cmp	r3, #42	; 0x2a
 80087d0:	d015      	beq.n	80087fe <_svfiprintf_r+0xf6>
 80087d2:	9a07      	ldr	r2, [sp, #28]
 80087d4:	4654      	mov	r4, sl
 80087d6:	2000      	movs	r0, #0
 80087d8:	f04f 0c0a 	mov.w	ip, #10
 80087dc:	4621      	mov	r1, r4
 80087de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087e2:	3b30      	subs	r3, #48	; 0x30
 80087e4:	2b09      	cmp	r3, #9
 80087e6:	d94d      	bls.n	8008884 <_svfiprintf_r+0x17c>
 80087e8:	b1b0      	cbz	r0, 8008818 <_svfiprintf_r+0x110>
 80087ea:	9207      	str	r2, [sp, #28]
 80087ec:	e014      	b.n	8008818 <_svfiprintf_r+0x110>
 80087ee:	eba0 0308 	sub.w	r3, r0, r8
 80087f2:	fa09 f303 	lsl.w	r3, r9, r3
 80087f6:	4313      	orrs	r3, r2
 80087f8:	9304      	str	r3, [sp, #16]
 80087fa:	46a2      	mov	sl, r4
 80087fc:	e7d2      	b.n	80087a4 <_svfiprintf_r+0x9c>
 80087fe:	9b03      	ldr	r3, [sp, #12]
 8008800:	1d19      	adds	r1, r3, #4
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	9103      	str	r1, [sp, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	bfbb      	ittet	lt
 800880a:	425b      	neglt	r3, r3
 800880c:	f042 0202 	orrlt.w	r2, r2, #2
 8008810:	9307      	strge	r3, [sp, #28]
 8008812:	9307      	strlt	r3, [sp, #28]
 8008814:	bfb8      	it	lt
 8008816:	9204      	strlt	r2, [sp, #16]
 8008818:	7823      	ldrb	r3, [r4, #0]
 800881a:	2b2e      	cmp	r3, #46	; 0x2e
 800881c:	d10c      	bne.n	8008838 <_svfiprintf_r+0x130>
 800881e:	7863      	ldrb	r3, [r4, #1]
 8008820:	2b2a      	cmp	r3, #42	; 0x2a
 8008822:	d134      	bne.n	800888e <_svfiprintf_r+0x186>
 8008824:	9b03      	ldr	r3, [sp, #12]
 8008826:	1d1a      	adds	r2, r3, #4
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	9203      	str	r2, [sp, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	bfb8      	it	lt
 8008830:	f04f 33ff 	movlt.w	r3, #4294967295
 8008834:	3402      	adds	r4, #2
 8008836:	9305      	str	r3, [sp, #20]
 8008838:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008900 <_svfiprintf_r+0x1f8>
 800883c:	7821      	ldrb	r1, [r4, #0]
 800883e:	2203      	movs	r2, #3
 8008840:	4650      	mov	r0, sl
 8008842:	f7f7 fcd5 	bl	80001f0 <memchr>
 8008846:	b138      	cbz	r0, 8008858 <_svfiprintf_r+0x150>
 8008848:	9b04      	ldr	r3, [sp, #16]
 800884a:	eba0 000a 	sub.w	r0, r0, sl
 800884e:	2240      	movs	r2, #64	; 0x40
 8008850:	4082      	lsls	r2, r0
 8008852:	4313      	orrs	r3, r2
 8008854:	3401      	adds	r4, #1
 8008856:	9304      	str	r3, [sp, #16]
 8008858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800885c:	4825      	ldr	r0, [pc, #148]	; (80088f4 <_svfiprintf_r+0x1ec>)
 800885e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008862:	2206      	movs	r2, #6
 8008864:	f7f7 fcc4 	bl	80001f0 <memchr>
 8008868:	2800      	cmp	r0, #0
 800886a:	d038      	beq.n	80088de <_svfiprintf_r+0x1d6>
 800886c:	4b22      	ldr	r3, [pc, #136]	; (80088f8 <_svfiprintf_r+0x1f0>)
 800886e:	bb1b      	cbnz	r3, 80088b8 <_svfiprintf_r+0x1b0>
 8008870:	9b03      	ldr	r3, [sp, #12]
 8008872:	3307      	adds	r3, #7
 8008874:	f023 0307 	bic.w	r3, r3, #7
 8008878:	3308      	adds	r3, #8
 800887a:	9303      	str	r3, [sp, #12]
 800887c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800887e:	4433      	add	r3, r6
 8008880:	9309      	str	r3, [sp, #36]	; 0x24
 8008882:	e768      	b.n	8008756 <_svfiprintf_r+0x4e>
 8008884:	fb0c 3202 	mla	r2, ip, r2, r3
 8008888:	460c      	mov	r4, r1
 800888a:	2001      	movs	r0, #1
 800888c:	e7a6      	b.n	80087dc <_svfiprintf_r+0xd4>
 800888e:	2300      	movs	r3, #0
 8008890:	3401      	adds	r4, #1
 8008892:	9305      	str	r3, [sp, #20]
 8008894:	4619      	mov	r1, r3
 8008896:	f04f 0c0a 	mov.w	ip, #10
 800889a:	4620      	mov	r0, r4
 800889c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088a0:	3a30      	subs	r2, #48	; 0x30
 80088a2:	2a09      	cmp	r2, #9
 80088a4:	d903      	bls.n	80088ae <_svfiprintf_r+0x1a6>
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0c6      	beq.n	8008838 <_svfiprintf_r+0x130>
 80088aa:	9105      	str	r1, [sp, #20]
 80088ac:	e7c4      	b.n	8008838 <_svfiprintf_r+0x130>
 80088ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80088b2:	4604      	mov	r4, r0
 80088b4:	2301      	movs	r3, #1
 80088b6:	e7f0      	b.n	800889a <_svfiprintf_r+0x192>
 80088b8:	ab03      	add	r3, sp, #12
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	462a      	mov	r2, r5
 80088be:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <_svfiprintf_r+0x1f4>)
 80088c0:	a904      	add	r1, sp, #16
 80088c2:	4638      	mov	r0, r7
 80088c4:	f7fd fe20 	bl	8006508 <_printf_float>
 80088c8:	1c42      	adds	r2, r0, #1
 80088ca:	4606      	mov	r6, r0
 80088cc:	d1d6      	bne.n	800887c <_svfiprintf_r+0x174>
 80088ce:	89ab      	ldrh	r3, [r5, #12]
 80088d0:	065b      	lsls	r3, r3, #25
 80088d2:	f53f af2d 	bmi.w	8008730 <_svfiprintf_r+0x28>
 80088d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088d8:	b01d      	add	sp, #116	; 0x74
 80088da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088de:	ab03      	add	r3, sp, #12
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	462a      	mov	r2, r5
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <_svfiprintf_r+0x1f4>)
 80088e6:	a904      	add	r1, sp, #16
 80088e8:	4638      	mov	r0, r7
 80088ea:	f7fe f8b1 	bl	8006a50 <_printf_i>
 80088ee:	e7eb      	b.n	80088c8 <_svfiprintf_r+0x1c0>
 80088f0:	08009464 	.word	0x08009464
 80088f4:	0800946e 	.word	0x0800946e
 80088f8:	08006509 	.word	0x08006509
 80088fc:	08008655 	.word	0x08008655
 8008900:	0800946a 	.word	0x0800946a

08008904 <__sflush_r>:
 8008904:	898a      	ldrh	r2, [r1, #12]
 8008906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800890a:	4605      	mov	r5, r0
 800890c:	0710      	lsls	r0, r2, #28
 800890e:	460c      	mov	r4, r1
 8008910:	d458      	bmi.n	80089c4 <__sflush_r+0xc0>
 8008912:	684b      	ldr	r3, [r1, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	dc05      	bgt.n	8008924 <__sflush_r+0x20>
 8008918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800891a:	2b00      	cmp	r3, #0
 800891c:	dc02      	bgt.n	8008924 <__sflush_r+0x20>
 800891e:	2000      	movs	r0, #0
 8008920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008926:	2e00      	cmp	r6, #0
 8008928:	d0f9      	beq.n	800891e <__sflush_r+0x1a>
 800892a:	2300      	movs	r3, #0
 800892c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008930:	682f      	ldr	r7, [r5, #0]
 8008932:	6a21      	ldr	r1, [r4, #32]
 8008934:	602b      	str	r3, [r5, #0]
 8008936:	d032      	beq.n	800899e <__sflush_r+0x9a>
 8008938:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	075a      	lsls	r2, r3, #29
 800893e:	d505      	bpl.n	800894c <__sflush_r+0x48>
 8008940:	6863      	ldr	r3, [r4, #4]
 8008942:	1ac0      	subs	r0, r0, r3
 8008944:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008946:	b10b      	cbz	r3, 800894c <__sflush_r+0x48>
 8008948:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800894a:	1ac0      	subs	r0, r0, r3
 800894c:	2300      	movs	r3, #0
 800894e:	4602      	mov	r2, r0
 8008950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008952:	6a21      	ldr	r1, [r4, #32]
 8008954:	4628      	mov	r0, r5
 8008956:	47b0      	blx	r6
 8008958:	1c43      	adds	r3, r0, #1
 800895a:	89a3      	ldrh	r3, [r4, #12]
 800895c:	d106      	bne.n	800896c <__sflush_r+0x68>
 800895e:	6829      	ldr	r1, [r5, #0]
 8008960:	291d      	cmp	r1, #29
 8008962:	d82b      	bhi.n	80089bc <__sflush_r+0xb8>
 8008964:	4a29      	ldr	r2, [pc, #164]	; (8008a0c <__sflush_r+0x108>)
 8008966:	410a      	asrs	r2, r1
 8008968:	07d6      	lsls	r6, r2, #31
 800896a:	d427      	bmi.n	80089bc <__sflush_r+0xb8>
 800896c:	2200      	movs	r2, #0
 800896e:	6062      	str	r2, [r4, #4]
 8008970:	04d9      	lsls	r1, r3, #19
 8008972:	6922      	ldr	r2, [r4, #16]
 8008974:	6022      	str	r2, [r4, #0]
 8008976:	d504      	bpl.n	8008982 <__sflush_r+0x7e>
 8008978:	1c42      	adds	r2, r0, #1
 800897a:	d101      	bne.n	8008980 <__sflush_r+0x7c>
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	b903      	cbnz	r3, 8008982 <__sflush_r+0x7e>
 8008980:	6560      	str	r0, [r4, #84]	; 0x54
 8008982:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008984:	602f      	str	r7, [r5, #0]
 8008986:	2900      	cmp	r1, #0
 8008988:	d0c9      	beq.n	800891e <__sflush_r+0x1a>
 800898a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800898e:	4299      	cmp	r1, r3
 8008990:	d002      	beq.n	8008998 <__sflush_r+0x94>
 8008992:	4628      	mov	r0, r5
 8008994:	f7ff f9e2 	bl	8007d5c <_free_r>
 8008998:	2000      	movs	r0, #0
 800899a:	6360      	str	r0, [r4, #52]	; 0x34
 800899c:	e7c0      	b.n	8008920 <__sflush_r+0x1c>
 800899e:	2301      	movs	r3, #1
 80089a0:	4628      	mov	r0, r5
 80089a2:	47b0      	blx	r6
 80089a4:	1c41      	adds	r1, r0, #1
 80089a6:	d1c8      	bne.n	800893a <__sflush_r+0x36>
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0c5      	beq.n	800893a <__sflush_r+0x36>
 80089ae:	2b1d      	cmp	r3, #29
 80089b0:	d001      	beq.n	80089b6 <__sflush_r+0xb2>
 80089b2:	2b16      	cmp	r3, #22
 80089b4:	d101      	bne.n	80089ba <__sflush_r+0xb6>
 80089b6:	602f      	str	r7, [r5, #0]
 80089b8:	e7b1      	b.n	800891e <__sflush_r+0x1a>
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089c0:	81a3      	strh	r3, [r4, #12]
 80089c2:	e7ad      	b.n	8008920 <__sflush_r+0x1c>
 80089c4:	690f      	ldr	r7, [r1, #16]
 80089c6:	2f00      	cmp	r7, #0
 80089c8:	d0a9      	beq.n	800891e <__sflush_r+0x1a>
 80089ca:	0793      	lsls	r3, r2, #30
 80089cc:	680e      	ldr	r6, [r1, #0]
 80089ce:	bf08      	it	eq
 80089d0:	694b      	ldreq	r3, [r1, #20]
 80089d2:	600f      	str	r7, [r1, #0]
 80089d4:	bf18      	it	ne
 80089d6:	2300      	movne	r3, #0
 80089d8:	eba6 0807 	sub.w	r8, r6, r7
 80089dc:	608b      	str	r3, [r1, #8]
 80089de:	f1b8 0f00 	cmp.w	r8, #0
 80089e2:	dd9c      	ble.n	800891e <__sflush_r+0x1a>
 80089e4:	6a21      	ldr	r1, [r4, #32]
 80089e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089e8:	4643      	mov	r3, r8
 80089ea:	463a      	mov	r2, r7
 80089ec:	4628      	mov	r0, r5
 80089ee:	47b0      	blx	r6
 80089f0:	2800      	cmp	r0, #0
 80089f2:	dc06      	bgt.n	8008a02 <__sflush_r+0xfe>
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089fa:	81a3      	strh	r3, [r4, #12]
 80089fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008a00:	e78e      	b.n	8008920 <__sflush_r+0x1c>
 8008a02:	4407      	add	r7, r0
 8008a04:	eba8 0800 	sub.w	r8, r8, r0
 8008a08:	e7e9      	b.n	80089de <__sflush_r+0xda>
 8008a0a:	bf00      	nop
 8008a0c:	dfbffffe 	.word	0xdfbffffe

08008a10 <_fflush_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	690b      	ldr	r3, [r1, #16]
 8008a14:	4605      	mov	r5, r0
 8008a16:	460c      	mov	r4, r1
 8008a18:	b913      	cbnz	r3, 8008a20 <_fflush_r+0x10>
 8008a1a:	2500      	movs	r5, #0
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	bd38      	pop	{r3, r4, r5, pc}
 8008a20:	b118      	cbz	r0, 8008a2a <_fflush_r+0x1a>
 8008a22:	6a03      	ldr	r3, [r0, #32]
 8008a24:	b90b      	cbnz	r3, 8008a2a <_fflush_r+0x1a>
 8008a26:	f7fe f9c1 	bl	8006dac <__sinit>
 8008a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0f3      	beq.n	8008a1a <_fflush_r+0xa>
 8008a32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a34:	07d0      	lsls	r0, r2, #31
 8008a36:	d404      	bmi.n	8008a42 <_fflush_r+0x32>
 8008a38:	0599      	lsls	r1, r3, #22
 8008a3a:	d402      	bmi.n	8008a42 <_fflush_r+0x32>
 8008a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a3e:	f7fe fb0e 	bl	800705e <__retarget_lock_acquire_recursive>
 8008a42:	4628      	mov	r0, r5
 8008a44:	4621      	mov	r1, r4
 8008a46:	f7ff ff5d 	bl	8008904 <__sflush_r>
 8008a4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a4c:	07da      	lsls	r2, r3, #31
 8008a4e:	4605      	mov	r5, r0
 8008a50:	d4e4      	bmi.n	8008a1c <_fflush_r+0xc>
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	059b      	lsls	r3, r3, #22
 8008a56:	d4e1      	bmi.n	8008a1c <_fflush_r+0xc>
 8008a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a5a:	f7fe fb01 	bl	8007060 <__retarget_lock_release_recursive>
 8008a5e:	e7dd      	b.n	8008a1c <_fflush_r+0xc>

08008a60 <memmove>:
 8008a60:	4288      	cmp	r0, r1
 8008a62:	b510      	push	{r4, lr}
 8008a64:	eb01 0402 	add.w	r4, r1, r2
 8008a68:	d902      	bls.n	8008a70 <memmove+0x10>
 8008a6a:	4284      	cmp	r4, r0
 8008a6c:	4623      	mov	r3, r4
 8008a6e:	d807      	bhi.n	8008a80 <memmove+0x20>
 8008a70:	1e43      	subs	r3, r0, #1
 8008a72:	42a1      	cmp	r1, r4
 8008a74:	d008      	beq.n	8008a88 <memmove+0x28>
 8008a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a7e:	e7f8      	b.n	8008a72 <memmove+0x12>
 8008a80:	4402      	add	r2, r0
 8008a82:	4601      	mov	r1, r0
 8008a84:	428a      	cmp	r2, r1
 8008a86:	d100      	bne.n	8008a8a <memmove+0x2a>
 8008a88:	bd10      	pop	{r4, pc}
 8008a8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a92:	e7f7      	b.n	8008a84 <memmove+0x24>

08008a94 <_sbrk_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	4d06      	ldr	r5, [pc, #24]	; (8008ab0 <_sbrk_r+0x1c>)
 8008a98:	2300      	movs	r3, #0
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	4608      	mov	r0, r1
 8008a9e:	602b      	str	r3, [r5, #0]
 8008aa0:	f7f8 ff5c 	bl	800195c <_sbrk>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d102      	bne.n	8008aae <_sbrk_r+0x1a>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	b103      	cbz	r3, 8008aae <_sbrk_r+0x1a>
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
 8008ab0:	200004d0 	.word	0x200004d0

08008ab4 <memcpy>:
 8008ab4:	440a      	add	r2, r1
 8008ab6:	4291      	cmp	r1, r2
 8008ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008abc:	d100      	bne.n	8008ac0 <memcpy+0xc>
 8008abe:	4770      	bx	lr
 8008ac0:	b510      	push	{r4, lr}
 8008ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008aca:	4291      	cmp	r1, r2
 8008acc:	d1f9      	bne.n	8008ac2 <memcpy+0xe>
 8008ace:	bd10      	pop	{r4, pc}

08008ad0 <__assert_func>:
 8008ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ad2:	4614      	mov	r4, r2
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	4b09      	ldr	r3, [pc, #36]	; (8008afc <__assert_func+0x2c>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4605      	mov	r5, r0
 8008adc:	68d8      	ldr	r0, [r3, #12]
 8008ade:	b14c      	cbz	r4, 8008af4 <__assert_func+0x24>
 8008ae0:	4b07      	ldr	r3, [pc, #28]	; (8008b00 <__assert_func+0x30>)
 8008ae2:	9100      	str	r1, [sp, #0]
 8008ae4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ae8:	4906      	ldr	r1, [pc, #24]	; (8008b04 <__assert_func+0x34>)
 8008aea:	462b      	mov	r3, r5
 8008aec:	f000 f872 	bl	8008bd4 <fiprintf>
 8008af0:	f000 f882 	bl	8008bf8 <abort>
 8008af4:	4b04      	ldr	r3, [pc, #16]	; (8008b08 <__assert_func+0x38>)
 8008af6:	461c      	mov	r4, r3
 8008af8:	e7f3      	b.n	8008ae2 <__assert_func+0x12>
 8008afa:	bf00      	nop
 8008afc:	20000064 	.word	0x20000064
 8008b00:	0800947f 	.word	0x0800947f
 8008b04:	0800948c 	.word	0x0800948c
 8008b08:	080094ba 	.word	0x080094ba

08008b0c <_calloc_r>:
 8008b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b0e:	fba1 2402 	umull	r2, r4, r1, r2
 8008b12:	b94c      	cbnz	r4, 8008b28 <_calloc_r+0x1c>
 8008b14:	4611      	mov	r1, r2
 8008b16:	9201      	str	r2, [sp, #4]
 8008b18:	f7ff f994 	bl	8007e44 <_malloc_r>
 8008b1c:	9a01      	ldr	r2, [sp, #4]
 8008b1e:	4605      	mov	r5, r0
 8008b20:	b930      	cbnz	r0, 8008b30 <_calloc_r+0x24>
 8008b22:	4628      	mov	r0, r5
 8008b24:	b003      	add	sp, #12
 8008b26:	bd30      	pop	{r4, r5, pc}
 8008b28:	220c      	movs	r2, #12
 8008b2a:	6002      	str	r2, [r0, #0]
 8008b2c:	2500      	movs	r5, #0
 8008b2e:	e7f8      	b.n	8008b22 <_calloc_r+0x16>
 8008b30:	4621      	mov	r1, r4
 8008b32:	f7fe fa08 	bl	8006f46 <memset>
 8008b36:	e7f4      	b.n	8008b22 <_calloc_r+0x16>

08008b38 <__ascii_mbtowc>:
 8008b38:	b082      	sub	sp, #8
 8008b3a:	b901      	cbnz	r1, 8008b3e <__ascii_mbtowc+0x6>
 8008b3c:	a901      	add	r1, sp, #4
 8008b3e:	b142      	cbz	r2, 8008b52 <__ascii_mbtowc+0x1a>
 8008b40:	b14b      	cbz	r3, 8008b56 <__ascii_mbtowc+0x1e>
 8008b42:	7813      	ldrb	r3, [r2, #0]
 8008b44:	600b      	str	r3, [r1, #0]
 8008b46:	7812      	ldrb	r2, [r2, #0]
 8008b48:	1e10      	subs	r0, r2, #0
 8008b4a:	bf18      	it	ne
 8008b4c:	2001      	movne	r0, #1
 8008b4e:	b002      	add	sp, #8
 8008b50:	4770      	bx	lr
 8008b52:	4610      	mov	r0, r2
 8008b54:	e7fb      	b.n	8008b4e <__ascii_mbtowc+0x16>
 8008b56:	f06f 0001 	mvn.w	r0, #1
 8008b5a:	e7f8      	b.n	8008b4e <__ascii_mbtowc+0x16>

08008b5c <_realloc_r>:
 8008b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b60:	4680      	mov	r8, r0
 8008b62:	4614      	mov	r4, r2
 8008b64:	460e      	mov	r6, r1
 8008b66:	b921      	cbnz	r1, 8008b72 <_realloc_r+0x16>
 8008b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6c:	4611      	mov	r1, r2
 8008b6e:	f7ff b969 	b.w	8007e44 <_malloc_r>
 8008b72:	b92a      	cbnz	r2, 8008b80 <_realloc_r+0x24>
 8008b74:	f7ff f8f2 	bl	8007d5c <_free_r>
 8008b78:	4625      	mov	r5, r4
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b80:	f000 f841 	bl	8008c06 <_malloc_usable_size_r>
 8008b84:	4284      	cmp	r4, r0
 8008b86:	4607      	mov	r7, r0
 8008b88:	d802      	bhi.n	8008b90 <_realloc_r+0x34>
 8008b8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b8e:	d812      	bhi.n	8008bb6 <_realloc_r+0x5a>
 8008b90:	4621      	mov	r1, r4
 8008b92:	4640      	mov	r0, r8
 8008b94:	f7ff f956 	bl	8007e44 <_malloc_r>
 8008b98:	4605      	mov	r5, r0
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d0ed      	beq.n	8008b7a <_realloc_r+0x1e>
 8008b9e:	42bc      	cmp	r4, r7
 8008ba0:	4622      	mov	r2, r4
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	bf28      	it	cs
 8008ba6:	463a      	movcs	r2, r7
 8008ba8:	f7ff ff84 	bl	8008ab4 <memcpy>
 8008bac:	4631      	mov	r1, r6
 8008bae:	4640      	mov	r0, r8
 8008bb0:	f7ff f8d4 	bl	8007d5c <_free_r>
 8008bb4:	e7e1      	b.n	8008b7a <_realloc_r+0x1e>
 8008bb6:	4635      	mov	r5, r6
 8008bb8:	e7df      	b.n	8008b7a <_realloc_r+0x1e>

08008bba <__ascii_wctomb>:
 8008bba:	b149      	cbz	r1, 8008bd0 <__ascii_wctomb+0x16>
 8008bbc:	2aff      	cmp	r2, #255	; 0xff
 8008bbe:	bf85      	ittet	hi
 8008bc0:	238a      	movhi	r3, #138	; 0x8a
 8008bc2:	6003      	strhi	r3, [r0, #0]
 8008bc4:	700a      	strbls	r2, [r1, #0]
 8008bc6:	f04f 30ff 	movhi.w	r0, #4294967295
 8008bca:	bf98      	it	ls
 8008bcc:	2001      	movls	r0, #1
 8008bce:	4770      	bx	lr
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	4770      	bx	lr

08008bd4 <fiprintf>:
 8008bd4:	b40e      	push	{r1, r2, r3}
 8008bd6:	b503      	push	{r0, r1, lr}
 8008bd8:	4601      	mov	r1, r0
 8008bda:	ab03      	add	r3, sp, #12
 8008bdc:	4805      	ldr	r0, [pc, #20]	; (8008bf4 <fiprintf+0x20>)
 8008bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8008be2:	6800      	ldr	r0, [r0, #0]
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	f000 f83f 	bl	8008c68 <_vfiprintf_r>
 8008bea:	b002      	add	sp, #8
 8008bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bf0:	b003      	add	sp, #12
 8008bf2:	4770      	bx	lr
 8008bf4:	20000064 	.word	0x20000064

08008bf8 <abort>:
 8008bf8:	b508      	push	{r3, lr}
 8008bfa:	2006      	movs	r0, #6
 8008bfc:	f000 fa0c 	bl	8009018 <raise>
 8008c00:	2001      	movs	r0, #1
 8008c02:	f7f8 fe33 	bl	800186c <_exit>

08008c06 <_malloc_usable_size_r>:
 8008c06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c0a:	1f18      	subs	r0, r3, #4
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	bfbc      	itt	lt
 8008c10:	580b      	ldrlt	r3, [r1, r0]
 8008c12:	18c0      	addlt	r0, r0, r3
 8008c14:	4770      	bx	lr

08008c16 <__sfputc_r>:
 8008c16:	6893      	ldr	r3, [r2, #8]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	b410      	push	{r4}
 8008c1e:	6093      	str	r3, [r2, #8]
 8008c20:	da08      	bge.n	8008c34 <__sfputc_r+0x1e>
 8008c22:	6994      	ldr	r4, [r2, #24]
 8008c24:	42a3      	cmp	r3, r4
 8008c26:	db01      	blt.n	8008c2c <__sfputc_r+0x16>
 8008c28:	290a      	cmp	r1, #10
 8008c2a:	d103      	bne.n	8008c34 <__sfputc_r+0x1e>
 8008c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c30:	f000 b934 	b.w	8008e9c <__swbuf_r>
 8008c34:	6813      	ldr	r3, [r2, #0]
 8008c36:	1c58      	adds	r0, r3, #1
 8008c38:	6010      	str	r0, [r2, #0]
 8008c3a:	7019      	strb	r1, [r3, #0]
 8008c3c:	4608      	mov	r0, r1
 8008c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <__sfputs_r>:
 8008c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c46:	4606      	mov	r6, r0
 8008c48:	460f      	mov	r7, r1
 8008c4a:	4614      	mov	r4, r2
 8008c4c:	18d5      	adds	r5, r2, r3
 8008c4e:	42ac      	cmp	r4, r5
 8008c50:	d101      	bne.n	8008c56 <__sfputs_r+0x12>
 8008c52:	2000      	movs	r0, #0
 8008c54:	e007      	b.n	8008c66 <__sfputs_r+0x22>
 8008c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c5a:	463a      	mov	r2, r7
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f7ff ffda 	bl	8008c16 <__sfputc_r>
 8008c62:	1c43      	adds	r3, r0, #1
 8008c64:	d1f3      	bne.n	8008c4e <__sfputs_r+0xa>
 8008c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c68 <_vfiprintf_r>:
 8008c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6c:	460d      	mov	r5, r1
 8008c6e:	b09d      	sub	sp, #116	; 0x74
 8008c70:	4614      	mov	r4, r2
 8008c72:	4698      	mov	r8, r3
 8008c74:	4606      	mov	r6, r0
 8008c76:	b118      	cbz	r0, 8008c80 <_vfiprintf_r+0x18>
 8008c78:	6a03      	ldr	r3, [r0, #32]
 8008c7a:	b90b      	cbnz	r3, 8008c80 <_vfiprintf_r+0x18>
 8008c7c:	f7fe f896 	bl	8006dac <__sinit>
 8008c80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c82:	07d9      	lsls	r1, r3, #31
 8008c84:	d405      	bmi.n	8008c92 <_vfiprintf_r+0x2a>
 8008c86:	89ab      	ldrh	r3, [r5, #12]
 8008c88:	059a      	lsls	r2, r3, #22
 8008c8a:	d402      	bmi.n	8008c92 <_vfiprintf_r+0x2a>
 8008c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c8e:	f7fe f9e6 	bl	800705e <__retarget_lock_acquire_recursive>
 8008c92:	89ab      	ldrh	r3, [r5, #12]
 8008c94:	071b      	lsls	r3, r3, #28
 8008c96:	d501      	bpl.n	8008c9c <_vfiprintf_r+0x34>
 8008c98:	692b      	ldr	r3, [r5, #16]
 8008c9a:	b99b      	cbnz	r3, 8008cc4 <_vfiprintf_r+0x5c>
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f000 f93a 	bl	8008f18 <__swsetup_r>
 8008ca4:	b170      	cbz	r0, 8008cc4 <_vfiprintf_r+0x5c>
 8008ca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ca8:	07dc      	lsls	r4, r3, #31
 8008caa:	d504      	bpl.n	8008cb6 <_vfiprintf_r+0x4e>
 8008cac:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb0:	b01d      	add	sp, #116	; 0x74
 8008cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb6:	89ab      	ldrh	r3, [r5, #12]
 8008cb8:	0598      	lsls	r0, r3, #22
 8008cba:	d4f7      	bmi.n	8008cac <_vfiprintf_r+0x44>
 8008cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cbe:	f7fe f9cf 	bl	8007060 <__retarget_lock_release_recursive>
 8008cc2:	e7f3      	b.n	8008cac <_vfiprintf_r+0x44>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc8:	2320      	movs	r3, #32
 8008cca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cce:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cd2:	2330      	movs	r3, #48	; 0x30
 8008cd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008e88 <_vfiprintf_r+0x220>
 8008cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cdc:	f04f 0901 	mov.w	r9, #1
 8008ce0:	4623      	mov	r3, r4
 8008ce2:	469a      	mov	sl, r3
 8008ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ce8:	b10a      	cbz	r2, 8008cee <_vfiprintf_r+0x86>
 8008cea:	2a25      	cmp	r2, #37	; 0x25
 8008cec:	d1f9      	bne.n	8008ce2 <_vfiprintf_r+0x7a>
 8008cee:	ebba 0b04 	subs.w	fp, sl, r4
 8008cf2:	d00b      	beq.n	8008d0c <_vfiprintf_r+0xa4>
 8008cf4:	465b      	mov	r3, fp
 8008cf6:	4622      	mov	r2, r4
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f7ff ffa2 	bl	8008c44 <__sfputs_r>
 8008d00:	3001      	adds	r0, #1
 8008d02:	f000 80a9 	beq.w	8008e58 <_vfiprintf_r+0x1f0>
 8008d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d08:	445a      	add	r2, fp
 8008d0a:	9209      	str	r2, [sp, #36]	; 0x24
 8008d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 80a1 	beq.w	8008e58 <_vfiprintf_r+0x1f0>
 8008d16:	2300      	movs	r3, #0
 8008d18:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d20:	f10a 0a01 	add.w	sl, sl, #1
 8008d24:	9304      	str	r3, [sp, #16]
 8008d26:	9307      	str	r3, [sp, #28]
 8008d28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d2c:	931a      	str	r3, [sp, #104]	; 0x68
 8008d2e:	4654      	mov	r4, sl
 8008d30:	2205      	movs	r2, #5
 8008d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d36:	4854      	ldr	r0, [pc, #336]	; (8008e88 <_vfiprintf_r+0x220>)
 8008d38:	f7f7 fa5a 	bl	80001f0 <memchr>
 8008d3c:	9a04      	ldr	r2, [sp, #16]
 8008d3e:	b9d8      	cbnz	r0, 8008d78 <_vfiprintf_r+0x110>
 8008d40:	06d1      	lsls	r1, r2, #27
 8008d42:	bf44      	itt	mi
 8008d44:	2320      	movmi	r3, #32
 8008d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d4a:	0713      	lsls	r3, r2, #28
 8008d4c:	bf44      	itt	mi
 8008d4e:	232b      	movmi	r3, #43	; 0x2b
 8008d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d54:	f89a 3000 	ldrb.w	r3, [sl]
 8008d58:	2b2a      	cmp	r3, #42	; 0x2a
 8008d5a:	d015      	beq.n	8008d88 <_vfiprintf_r+0x120>
 8008d5c:	9a07      	ldr	r2, [sp, #28]
 8008d5e:	4654      	mov	r4, sl
 8008d60:	2000      	movs	r0, #0
 8008d62:	f04f 0c0a 	mov.w	ip, #10
 8008d66:	4621      	mov	r1, r4
 8008d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d6c:	3b30      	subs	r3, #48	; 0x30
 8008d6e:	2b09      	cmp	r3, #9
 8008d70:	d94d      	bls.n	8008e0e <_vfiprintf_r+0x1a6>
 8008d72:	b1b0      	cbz	r0, 8008da2 <_vfiprintf_r+0x13a>
 8008d74:	9207      	str	r2, [sp, #28]
 8008d76:	e014      	b.n	8008da2 <_vfiprintf_r+0x13a>
 8008d78:	eba0 0308 	sub.w	r3, r0, r8
 8008d7c:	fa09 f303 	lsl.w	r3, r9, r3
 8008d80:	4313      	orrs	r3, r2
 8008d82:	9304      	str	r3, [sp, #16]
 8008d84:	46a2      	mov	sl, r4
 8008d86:	e7d2      	b.n	8008d2e <_vfiprintf_r+0xc6>
 8008d88:	9b03      	ldr	r3, [sp, #12]
 8008d8a:	1d19      	adds	r1, r3, #4
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	9103      	str	r1, [sp, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	bfbb      	ittet	lt
 8008d94:	425b      	neglt	r3, r3
 8008d96:	f042 0202 	orrlt.w	r2, r2, #2
 8008d9a:	9307      	strge	r3, [sp, #28]
 8008d9c:	9307      	strlt	r3, [sp, #28]
 8008d9e:	bfb8      	it	lt
 8008da0:	9204      	strlt	r2, [sp, #16]
 8008da2:	7823      	ldrb	r3, [r4, #0]
 8008da4:	2b2e      	cmp	r3, #46	; 0x2e
 8008da6:	d10c      	bne.n	8008dc2 <_vfiprintf_r+0x15a>
 8008da8:	7863      	ldrb	r3, [r4, #1]
 8008daa:	2b2a      	cmp	r3, #42	; 0x2a
 8008dac:	d134      	bne.n	8008e18 <_vfiprintf_r+0x1b0>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	1d1a      	adds	r2, r3, #4
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	9203      	str	r2, [sp, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bfb8      	it	lt
 8008dba:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dbe:	3402      	adds	r4, #2
 8008dc0:	9305      	str	r3, [sp, #20]
 8008dc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008e98 <_vfiprintf_r+0x230>
 8008dc6:	7821      	ldrb	r1, [r4, #0]
 8008dc8:	2203      	movs	r2, #3
 8008dca:	4650      	mov	r0, sl
 8008dcc:	f7f7 fa10 	bl	80001f0 <memchr>
 8008dd0:	b138      	cbz	r0, 8008de2 <_vfiprintf_r+0x17a>
 8008dd2:	9b04      	ldr	r3, [sp, #16]
 8008dd4:	eba0 000a 	sub.w	r0, r0, sl
 8008dd8:	2240      	movs	r2, #64	; 0x40
 8008dda:	4082      	lsls	r2, r0
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	3401      	adds	r4, #1
 8008de0:	9304      	str	r3, [sp, #16]
 8008de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de6:	4829      	ldr	r0, [pc, #164]	; (8008e8c <_vfiprintf_r+0x224>)
 8008de8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dec:	2206      	movs	r2, #6
 8008dee:	f7f7 f9ff 	bl	80001f0 <memchr>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d03f      	beq.n	8008e76 <_vfiprintf_r+0x20e>
 8008df6:	4b26      	ldr	r3, [pc, #152]	; (8008e90 <_vfiprintf_r+0x228>)
 8008df8:	bb1b      	cbnz	r3, 8008e42 <_vfiprintf_r+0x1da>
 8008dfa:	9b03      	ldr	r3, [sp, #12]
 8008dfc:	3307      	adds	r3, #7
 8008dfe:	f023 0307 	bic.w	r3, r3, #7
 8008e02:	3308      	adds	r3, #8
 8008e04:	9303      	str	r3, [sp, #12]
 8008e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e08:	443b      	add	r3, r7
 8008e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e0c:	e768      	b.n	8008ce0 <_vfiprintf_r+0x78>
 8008e0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e12:	460c      	mov	r4, r1
 8008e14:	2001      	movs	r0, #1
 8008e16:	e7a6      	b.n	8008d66 <_vfiprintf_r+0xfe>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	3401      	adds	r4, #1
 8008e1c:	9305      	str	r3, [sp, #20]
 8008e1e:	4619      	mov	r1, r3
 8008e20:	f04f 0c0a 	mov.w	ip, #10
 8008e24:	4620      	mov	r0, r4
 8008e26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e2a:	3a30      	subs	r2, #48	; 0x30
 8008e2c:	2a09      	cmp	r2, #9
 8008e2e:	d903      	bls.n	8008e38 <_vfiprintf_r+0x1d0>
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d0c6      	beq.n	8008dc2 <_vfiprintf_r+0x15a>
 8008e34:	9105      	str	r1, [sp, #20]
 8008e36:	e7c4      	b.n	8008dc2 <_vfiprintf_r+0x15a>
 8008e38:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e7f0      	b.n	8008e24 <_vfiprintf_r+0x1bc>
 8008e42:	ab03      	add	r3, sp, #12
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	462a      	mov	r2, r5
 8008e48:	4b12      	ldr	r3, [pc, #72]	; (8008e94 <_vfiprintf_r+0x22c>)
 8008e4a:	a904      	add	r1, sp, #16
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	f7fd fb5b 	bl	8006508 <_printf_float>
 8008e52:	4607      	mov	r7, r0
 8008e54:	1c78      	adds	r0, r7, #1
 8008e56:	d1d6      	bne.n	8008e06 <_vfiprintf_r+0x19e>
 8008e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e5a:	07d9      	lsls	r1, r3, #31
 8008e5c:	d405      	bmi.n	8008e6a <_vfiprintf_r+0x202>
 8008e5e:	89ab      	ldrh	r3, [r5, #12]
 8008e60:	059a      	lsls	r2, r3, #22
 8008e62:	d402      	bmi.n	8008e6a <_vfiprintf_r+0x202>
 8008e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e66:	f7fe f8fb 	bl	8007060 <__retarget_lock_release_recursive>
 8008e6a:	89ab      	ldrh	r3, [r5, #12]
 8008e6c:	065b      	lsls	r3, r3, #25
 8008e6e:	f53f af1d 	bmi.w	8008cac <_vfiprintf_r+0x44>
 8008e72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e74:	e71c      	b.n	8008cb0 <_vfiprintf_r+0x48>
 8008e76:	ab03      	add	r3, sp, #12
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	462a      	mov	r2, r5
 8008e7c:	4b05      	ldr	r3, [pc, #20]	; (8008e94 <_vfiprintf_r+0x22c>)
 8008e7e:	a904      	add	r1, sp, #16
 8008e80:	4630      	mov	r0, r6
 8008e82:	f7fd fde5 	bl	8006a50 <_printf_i>
 8008e86:	e7e4      	b.n	8008e52 <_vfiprintf_r+0x1ea>
 8008e88:	08009464 	.word	0x08009464
 8008e8c:	0800946e 	.word	0x0800946e
 8008e90:	08006509 	.word	0x08006509
 8008e94:	08008c45 	.word	0x08008c45
 8008e98:	0800946a 	.word	0x0800946a

08008e9c <__swbuf_r>:
 8008e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9e:	460e      	mov	r6, r1
 8008ea0:	4614      	mov	r4, r2
 8008ea2:	4605      	mov	r5, r0
 8008ea4:	b118      	cbz	r0, 8008eae <__swbuf_r+0x12>
 8008ea6:	6a03      	ldr	r3, [r0, #32]
 8008ea8:	b90b      	cbnz	r3, 8008eae <__swbuf_r+0x12>
 8008eaa:	f7fd ff7f 	bl	8006dac <__sinit>
 8008eae:	69a3      	ldr	r3, [r4, #24]
 8008eb0:	60a3      	str	r3, [r4, #8]
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	071a      	lsls	r2, r3, #28
 8008eb6:	d525      	bpl.n	8008f04 <__swbuf_r+0x68>
 8008eb8:	6923      	ldr	r3, [r4, #16]
 8008eba:	b31b      	cbz	r3, 8008f04 <__swbuf_r+0x68>
 8008ebc:	6823      	ldr	r3, [r4, #0]
 8008ebe:	6922      	ldr	r2, [r4, #16]
 8008ec0:	1a98      	subs	r0, r3, r2
 8008ec2:	6963      	ldr	r3, [r4, #20]
 8008ec4:	b2f6      	uxtb	r6, r6
 8008ec6:	4283      	cmp	r3, r0
 8008ec8:	4637      	mov	r7, r6
 8008eca:	dc04      	bgt.n	8008ed6 <__swbuf_r+0x3a>
 8008ecc:	4621      	mov	r1, r4
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f7ff fd9e 	bl	8008a10 <_fflush_r>
 8008ed4:	b9e0      	cbnz	r0, 8008f10 <__swbuf_r+0x74>
 8008ed6:	68a3      	ldr	r3, [r4, #8]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	60a3      	str	r3, [r4, #8]
 8008edc:	6823      	ldr	r3, [r4, #0]
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	6022      	str	r2, [r4, #0]
 8008ee2:	701e      	strb	r6, [r3, #0]
 8008ee4:	6962      	ldr	r2, [r4, #20]
 8008ee6:	1c43      	adds	r3, r0, #1
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d004      	beq.n	8008ef6 <__swbuf_r+0x5a>
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	07db      	lsls	r3, r3, #31
 8008ef0:	d506      	bpl.n	8008f00 <__swbuf_r+0x64>
 8008ef2:	2e0a      	cmp	r6, #10
 8008ef4:	d104      	bne.n	8008f00 <__swbuf_r+0x64>
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	4628      	mov	r0, r5
 8008efa:	f7ff fd89 	bl	8008a10 <_fflush_r>
 8008efe:	b938      	cbnz	r0, 8008f10 <__swbuf_r+0x74>
 8008f00:	4638      	mov	r0, r7
 8008f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f04:	4621      	mov	r1, r4
 8008f06:	4628      	mov	r0, r5
 8008f08:	f000 f806 	bl	8008f18 <__swsetup_r>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d0d5      	beq.n	8008ebc <__swbuf_r+0x20>
 8008f10:	f04f 37ff 	mov.w	r7, #4294967295
 8008f14:	e7f4      	b.n	8008f00 <__swbuf_r+0x64>
	...

08008f18 <__swsetup_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4b2a      	ldr	r3, [pc, #168]	; (8008fc4 <__swsetup_r+0xac>)
 8008f1c:	4605      	mov	r5, r0
 8008f1e:	6818      	ldr	r0, [r3, #0]
 8008f20:	460c      	mov	r4, r1
 8008f22:	b118      	cbz	r0, 8008f2c <__swsetup_r+0x14>
 8008f24:	6a03      	ldr	r3, [r0, #32]
 8008f26:	b90b      	cbnz	r3, 8008f2c <__swsetup_r+0x14>
 8008f28:	f7fd ff40 	bl	8006dac <__sinit>
 8008f2c:	89a3      	ldrh	r3, [r4, #12]
 8008f2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f32:	0718      	lsls	r0, r3, #28
 8008f34:	d422      	bmi.n	8008f7c <__swsetup_r+0x64>
 8008f36:	06d9      	lsls	r1, r3, #27
 8008f38:	d407      	bmi.n	8008f4a <__swsetup_r+0x32>
 8008f3a:	2309      	movs	r3, #9
 8008f3c:	602b      	str	r3, [r5, #0]
 8008f3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f42:	81a3      	strh	r3, [r4, #12]
 8008f44:	f04f 30ff 	mov.w	r0, #4294967295
 8008f48:	e034      	b.n	8008fb4 <__swsetup_r+0x9c>
 8008f4a:	0758      	lsls	r0, r3, #29
 8008f4c:	d512      	bpl.n	8008f74 <__swsetup_r+0x5c>
 8008f4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f50:	b141      	cbz	r1, 8008f64 <__swsetup_r+0x4c>
 8008f52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f56:	4299      	cmp	r1, r3
 8008f58:	d002      	beq.n	8008f60 <__swsetup_r+0x48>
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	f7fe fefe 	bl	8007d5c <_free_r>
 8008f60:	2300      	movs	r3, #0
 8008f62:	6363      	str	r3, [r4, #52]	; 0x34
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f6a:	81a3      	strh	r3, [r4, #12]
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	6063      	str	r3, [r4, #4]
 8008f70:	6923      	ldr	r3, [r4, #16]
 8008f72:	6023      	str	r3, [r4, #0]
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	f043 0308 	orr.w	r3, r3, #8
 8008f7a:	81a3      	strh	r3, [r4, #12]
 8008f7c:	6923      	ldr	r3, [r4, #16]
 8008f7e:	b94b      	cbnz	r3, 8008f94 <__swsetup_r+0x7c>
 8008f80:	89a3      	ldrh	r3, [r4, #12]
 8008f82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f8a:	d003      	beq.n	8008f94 <__swsetup_r+0x7c>
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f000 f884 	bl	800909c <__smakebuf_r>
 8008f94:	89a0      	ldrh	r0, [r4, #12]
 8008f96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f9a:	f010 0301 	ands.w	r3, r0, #1
 8008f9e:	d00a      	beq.n	8008fb6 <__swsetup_r+0x9e>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	60a3      	str	r3, [r4, #8]
 8008fa4:	6963      	ldr	r3, [r4, #20]
 8008fa6:	425b      	negs	r3, r3
 8008fa8:	61a3      	str	r3, [r4, #24]
 8008faa:	6923      	ldr	r3, [r4, #16]
 8008fac:	b943      	cbnz	r3, 8008fc0 <__swsetup_r+0xa8>
 8008fae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fb2:	d1c4      	bne.n	8008f3e <__swsetup_r+0x26>
 8008fb4:	bd38      	pop	{r3, r4, r5, pc}
 8008fb6:	0781      	lsls	r1, r0, #30
 8008fb8:	bf58      	it	pl
 8008fba:	6963      	ldrpl	r3, [r4, #20]
 8008fbc:	60a3      	str	r3, [r4, #8]
 8008fbe:	e7f4      	b.n	8008faa <__swsetup_r+0x92>
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	e7f7      	b.n	8008fb4 <__swsetup_r+0x9c>
 8008fc4:	20000064 	.word	0x20000064

08008fc8 <_raise_r>:
 8008fc8:	291f      	cmp	r1, #31
 8008fca:	b538      	push	{r3, r4, r5, lr}
 8008fcc:	4604      	mov	r4, r0
 8008fce:	460d      	mov	r5, r1
 8008fd0:	d904      	bls.n	8008fdc <_raise_r+0x14>
 8008fd2:	2316      	movs	r3, #22
 8008fd4:	6003      	str	r3, [r0, #0]
 8008fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fda:	bd38      	pop	{r3, r4, r5, pc}
 8008fdc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008fde:	b112      	cbz	r2, 8008fe6 <_raise_r+0x1e>
 8008fe0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fe4:	b94b      	cbnz	r3, 8008ffa <_raise_r+0x32>
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f000 f830 	bl	800904c <_getpid_r>
 8008fec:	462a      	mov	r2, r5
 8008fee:	4601      	mov	r1, r0
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ff6:	f000 b817 	b.w	8009028 <_kill_r>
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d00a      	beq.n	8009014 <_raise_r+0x4c>
 8008ffe:	1c59      	adds	r1, r3, #1
 8009000:	d103      	bne.n	800900a <_raise_r+0x42>
 8009002:	2316      	movs	r3, #22
 8009004:	6003      	str	r3, [r0, #0]
 8009006:	2001      	movs	r0, #1
 8009008:	e7e7      	b.n	8008fda <_raise_r+0x12>
 800900a:	2400      	movs	r4, #0
 800900c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009010:	4628      	mov	r0, r5
 8009012:	4798      	blx	r3
 8009014:	2000      	movs	r0, #0
 8009016:	e7e0      	b.n	8008fda <_raise_r+0x12>

08009018 <raise>:
 8009018:	4b02      	ldr	r3, [pc, #8]	; (8009024 <raise+0xc>)
 800901a:	4601      	mov	r1, r0
 800901c:	6818      	ldr	r0, [r3, #0]
 800901e:	f7ff bfd3 	b.w	8008fc8 <_raise_r>
 8009022:	bf00      	nop
 8009024:	20000064 	.word	0x20000064

08009028 <_kill_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4d07      	ldr	r5, [pc, #28]	; (8009048 <_kill_r+0x20>)
 800902c:	2300      	movs	r3, #0
 800902e:	4604      	mov	r4, r0
 8009030:	4608      	mov	r0, r1
 8009032:	4611      	mov	r1, r2
 8009034:	602b      	str	r3, [r5, #0]
 8009036:	f7f8 fc09 	bl	800184c <_kill>
 800903a:	1c43      	adds	r3, r0, #1
 800903c:	d102      	bne.n	8009044 <_kill_r+0x1c>
 800903e:	682b      	ldr	r3, [r5, #0]
 8009040:	b103      	cbz	r3, 8009044 <_kill_r+0x1c>
 8009042:	6023      	str	r3, [r4, #0]
 8009044:	bd38      	pop	{r3, r4, r5, pc}
 8009046:	bf00      	nop
 8009048:	200004d0 	.word	0x200004d0

0800904c <_getpid_r>:
 800904c:	f7f8 bbf6 	b.w	800183c <_getpid>

08009050 <__swhatbuf_r>:
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	460c      	mov	r4, r1
 8009054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009058:	2900      	cmp	r1, #0
 800905a:	b096      	sub	sp, #88	; 0x58
 800905c:	4615      	mov	r5, r2
 800905e:	461e      	mov	r6, r3
 8009060:	da0d      	bge.n	800907e <__swhatbuf_r+0x2e>
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009068:	f04f 0100 	mov.w	r1, #0
 800906c:	bf0c      	ite	eq
 800906e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009072:	2340      	movne	r3, #64	; 0x40
 8009074:	2000      	movs	r0, #0
 8009076:	6031      	str	r1, [r6, #0]
 8009078:	602b      	str	r3, [r5, #0]
 800907a:	b016      	add	sp, #88	; 0x58
 800907c:	bd70      	pop	{r4, r5, r6, pc}
 800907e:	466a      	mov	r2, sp
 8009080:	f000 f848 	bl	8009114 <_fstat_r>
 8009084:	2800      	cmp	r0, #0
 8009086:	dbec      	blt.n	8009062 <__swhatbuf_r+0x12>
 8009088:	9901      	ldr	r1, [sp, #4]
 800908a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800908e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009092:	4259      	negs	r1, r3
 8009094:	4159      	adcs	r1, r3
 8009096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800909a:	e7eb      	b.n	8009074 <__swhatbuf_r+0x24>

0800909c <__smakebuf_r>:
 800909c:	898b      	ldrh	r3, [r1, #12]
 800909e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090a0:	079d      	lsls	r5, r3, #30
 80090a2:	4606      	mov	r6, r0
 80090a4:	460c      	mov	r4, r1
 80090a6:	d507      	bpl.n	80090b8 <__smakebuf_r+0x1c>
 80090a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	6123      	str	r3, [r4, #16]
 80090b0:	2301      	movs	r3, #1
 80090b2:	6163      	str	r3, [r4, #20]
 80090b4:	b002      	add	sp, #8
 80090b6:	bd70      	pop	{r4, r5, r6, pc}
 80090b8:	ab01      	add	r3, sp, #4
 80090ba:	466a      	mov	r2, sp
 80090bc:	f7ff ffc8 	bl	8009050 <__swhatbuf_r>
 80090c0:	9900      	ldr	r1, [sp, #0]
 80090c2:	4605      	mov	r5, r0
 80090c4:	4630      	mov	r0, r6
 80090c6:	f7fe febd 	bl	8007e44 <_malloc_r>
 80090ca:	b948      	cbnz	r0, 80090e0 <__smakebuf_r+0x44>
 80090cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090d0:	059a      	lsls	r2, r3, #22
 80090d2:	d4ef      	bmi.n	80090b4 <__smakebuf_r+0x18>
 80090d4:	f023 0303 	bic.w	r3, r3, #3
 80090d8:	f043 0302 	orr.w	r3, r3, #2
 80090dc:	81a3      	strh	r3, [r4, #12]
 80090de:	e7e3      	b.n	80090a8 <__smakebuf_r+0xc>
 80090e0:	89a3      	ldrh	r3, [r4, #12]
 80090e2:	6020      	str	r0, [r4, #0]
 80090e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090e8:	81a3      	strh	r3, [r4, #12]
 80090ea:	9b00      	ldr	r3, [sp, #0]
 80090ec:	6163      	str	r3, [r4, #20]
 80090ee:	9b01      	ldr	r3, [sp, #4]
 80090f0:	6120      	str	r0, [r4, #16]
 80090f2:	b15b      	cbz	r3, 800910c <__smakebuf_r+0x70>
 80090f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090f8:	4630      	mov	r0, r6
 80090fa:	f000 f81d 	bl	8009138 <_isatty_r>
 80090fe:	b128      	cbz	r0, 800910c <__smakebuf_r+0x70>
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	f023 0303 	bic.w	r3, r3, #3
 8009106:	f043 0301 	orr.w	r3, r3, #1
 800910a:	81a3      	strh	r3, [r4, #12]
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	431d      	orrs	r5, r3
 8009110:	81a5      	strh	r5, [r4, #12]
 8009112:	e7cf      	b.n	80090b4 <__smakebuf_r+0x18>

08009114 <_fstat_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4d07      	ldr	r5, [pc, #28]	; (8009134 <_fstat_r+0x20>)
 8009118:	2300      	movs	r3, #0
 800911a:	4604      	mov	r4, r0
 800911c:	4608      	mov	r0, r1
 800911e:	4611      	mov	r1, r2
 8009120:	602b      	str	r3, [r5, #0]
 8009122:	f7f8 fbf2 	bl	800190a <_fstat>
 8009126:	1c43      	adds	r3, r0, #1
 8009128:	d102      	bne.n	8009130 <_fstat_r+0x1c>
 800912a:	682b      	ldr	r3, [r5, #0]
 800912c:	b103      	cbz	r3, 8009130 <_fstat_r+0x1c>
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	bd38      	pop	{r3, r4, r5, pc}
 8009132:	bf00      	nop
 8009134:	200004d0 	.word	0x200004d0

08009138 <_isatty_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	4d06      	ldr	r5, [pc, #24]	; (8009154 <_isatty_r+0x1c>)
 800913c:	2300      	movs	r3, #0
 800913e:	4604      	mov	r4, r0
 8009140:	4608      	mov	r0, r1
 8009142:	602b      	str	r3, [r5, #0]
 8009144:	f7f8 fbf1 	bl	800192a <_isatty>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d102      	bne.n	8009152 <_isatty_r+0x1a>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	b103      	cbz	r3, 8009152 <_isatty_r+0x1a>
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	200004d0 	.word	0x200004d0

08009158 <_init>:
 8009158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915a:	bf00      	nop
 800915c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800915e:	bc08      	pop	{r3}
 8009160:	469e      	mov	lr, r3
 8009162:	4770      	bx	lr

08009164 <_fini>:
 8009164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009166:	bf00      	nop
 8009168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916a:	bc08      	pop	{r3}
 800916c:	469e      	mov	lr, r3
 800916e:	4770      	bx	lr
